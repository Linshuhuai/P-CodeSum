{"repo": "Payum/Payum", "path": "src/Payum/Core/Extension/GenericTokenFactoryExtension.php", "func_name": "GenericTokenFactoryExtension.onExecute", "original_string": "public function onExecute(Context $context)\n    {\n        $action = $context->getAction();\n        if ($action instanceof GenericTokenFactoryAwareInterface) {\n            $action->setGenericTokenFactory($this->genericTokenFactory);\n        }\n    }", "language": "php", "code": "public function onExecute(Context $context)\n    {\n        $action = $context->getAction();\n        if ($action instanceof GenericTokenFactoryAwareInterface) {\n            $action->setGenericTokenFactory($this->genericTokenFactory);\n        }\n    }", "code_tokens": ["public", "function", "onExecute", "(", "Context", "$", "context", ")", "{", "$", "action", "=", "$", "context", "->", "getAction", "(", ")", ";", "if", "(", "$", "action", "instanceof", "GenericTokenFactoryAwareInterface", ")", "{", "$", "action", "->", "setGenericTokenFactory", "(", "$", "this", "->", "genericTokenFactory", ")", ";", "}", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Extension/GenericTokenFactoryExtension.php#L34-L40", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Model/CreditCard.php", "func_name": "CreditCard.setHolder", "original_string": "public function setHolder($holder)\n    {\n        $this->securedHolder = SensitiveValue::ensureSensitive($holder);\n        $this->maskedHolder = Mask::mask($this->securedHolder->peek());\n\n        // BC\n        $this->holder = $this->securedHolder->peek();\n    }", "language": "php", "code": "public function setHolder($holder)\n    {\n        $this->securedHolder = SensitiveValue::ensureSensitive($holder);\n        $this->maskedHolder = Mask::mask($this->securedHolder->peek());\n\n        // BC\n        $this->holder = $this->securedHolder->peek();\n    }", "code_tokens": ["public", "function", "setHolder", "(", "$", "holder", ")", "{", "$", "this", "->", "securedHolder", "=", "SensitiveValue", "::", "ensureSensitive", "(", "$", "holder", ")", ";", "$", "this", "->", "maskedHolder", "=", "Mask", "::", "mask", "(", "$", "this", "->", "securedHolder", "->", "peek", "(", ")", ")", ";", "// BC", "$", "this", "->", "holder", "=", "$", "this", "->", "securedHolder", "->", "peek", "(", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Model/CreditCard.php#L121-L128", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Model/CreditCard.php", "func_name": "CreditCard.setNumber", "original_string": "public function setNumber($number)\n    {\n        $this->securedNumber = SensitiveValue::ensureSensitive($number);\n        $this->maskedNumber = Mask::mask($this->securedNumber->peek());\n\n        //BC\n        $this->number = $this->securedNumber->peek();\n    }", "language": "php", "code": "public function setNumber($number)\n    {\n        $this->securedNumber = SensitiveValue::ensureSensitive($number);\n        $this->maskedNumber = Mask::mask($this->securedNumber->peek());\n\n        //BC\n        $this->number = $this->securedNumber->peek();\n    }", "code_tokens": ["public", "function", "setNumber", "(", "$", "number", ")", "{", "$", "this", "->", "securedNumber", "=", "SensitiveValue", "::", "ensureSensitive", "(", "$", "number", ")", ";", "$", "this", "->", "maskedNumber", "=", "Mask", "::", "mask", "(", "$", "this", "->", "securedNumber", "->", "peek", "(", ")", ")", ";", "//BC", "$", "this", "->", "number", "=", "$", "this", "->", "securedNumber", "->", "peek", "(", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Model/CreditCard.php#L157-L164", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Model/CreditCard.php", "func_name": "CreditCard.setSecurityCode", "original_string": "public function setSecurityCode($securityCode)\n    {\n        $this->securedSecurityCode = SensitiveValue::ensureSensitive($securityCode);\n\n        // BC\n        $this->securityCode = $this->securedSecurityCode->peek();\n    }", "language": "php", "code": "public function setSecurityCode($securityCode)\n    {\n        $this->securedSecurityCode = SensitiveValue::ensureSensitive($securityCode);\n\n        // BC\n        $this->securityCode = $this->securedSecurityCode->peek();\n    }", "code_tokens": ["public", "function", "setSecurityCode", "(", "$", "securityCode", ")", "{", "$", "this", "->", "securedSecurityCode", "=", "SensitiveValue", "::", "ensureSensitive", "(", "$", "securityCode", ")", ";", "// BC", "$", "this", "->", "securityCode", "=", "$", "this", "->", "securedSecurityCode", "->", "peek", "(", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Model/CreditCard.php#L193-L199", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Be2Bill/Api.php", "func_name": "Api.payment", "original_string": "public function payment(array $params)\n    {\n        $params['OPERATIONTYPE'] = static::OPERATION_PAYMENT;\n\n        $this->addGlobalParams($params);\n\n        return $this->doRequest([\n            'method' => 'payment',\n            'params' => $params\n        ]);\n    }", "language": "php", "code": "public function payment(array $params)\n    {\n        $params['OPERATIONTYPE'] = static::OPERATION_PAYMENT;\n\n        $this->addGlobalParams($params);\n\n        return $this->doRequest([\n            'method' => 'payment',\n            'params' => $params\n        ]);\n    }", "code_tokens": ["public", "function", "payment", "(", "array", "$", "params", ")", "{", "$", "params", "[", "'OPERATIONTYPE'", "]", "=", "static", "::", "OPERATION_PAYMENT", ";", "$", "this", "->", "addGlobalParams", "(", "$", "params", ")", ";", "return", "$", "this", "->", "doRequest", "(", "[", "'method'", "=>", "'payment'", ",", "'params'", "=>", "$", "params", "]", ")", ";", "}"], "docstring": "@param array $params\n\n@return array", "docstring_tokens": ["@param", "array", "$params"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Be2Bill/Api.php#L154-L164", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Be2Bill/Api.php", "func_name": "Api.verifyHash", "original_string": "public function verifyHash(array $params)\n    {\n        if (empty($params['HASH'])) {\n            return false;\n        }\n\n        $hash = $params['HASH'];\n        unset($params['HASH']);\n\n        return $hash === $this->calculateHash($params);\n    }", "language": "php", "code": "public function verifyHash(array $params)\n    {\n        if (empty($params['HASH'])) {\n            return false;\n        }\n\n        $hash = $params['HASH'];\n        unset($params['HASH']);\n\n        return $hash === $this->calculateHash($params);\n    }", "code_tokens": ["public", "function", "verifyHash", "(", "array", "$", "params", ")", "{", "if", "(", "empty", "(", "$", "params", "[", "'HASH'", "]", ")", ")", "{", "return", "false", ";", "}", "$", "hash", "=", "$", "params", "[", "'HASH'", "]", ";", "unset", "(", "$", "params", "[", "'HASH'", "]", ")", ";", "return", "$", "hash", "===", "$", "this", "->", "calculateHash", "(", "$", "params", ")", ";", "}"], "docstring": "Verify if the hash of the given parameter is correct\n\n@param array $params\n\n@return bool", "docstring_tokens": ["Verify", "if", "the", "hash", "of", "the", "given", "parameter", "is", "correct"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Be2Bill/Api.php#L173-L183", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Be2Bill/Api.php", "func_name": "Api.doRequest", "original_string": "protected function doRequest(array $fields)\n    {\n        $headers = array(\n            'Content-Type' => 'application/x-www-form-urlencoded',\n        );\n\n        $request = $this->messageFactory->createRequest('POST', $this->getApiEndpoint(), $headers, http_build_query($fields));\n\n        $response = $this->client->send($request);\n\n        if (false == ($response->getStatusCode() >= 200 && $response->getStatusCode() < 300)) {\n            throw HttpException::factory($request, $response);\n        }\n\n        $result = json_decode($response->getBody()->getContents());\n        if (null === $result) {\n            throw new LogicException(\"Response content is not valid json: \\n\\n{$response->getBody()->getContents()}\");\n        }\n\n        return $result;\n    }", "language": "php", "code": "protected function doRequest(array $fields)\n    {\n        $headers = array(\n            'Content-Type' => 'application/x-www-form-urlencoded',\n        );\n\n        $request = $this->messageFactory->createRequest('POST', $this->getApiEndpoint(), $headers, http_build_query($fields));\n\n        $response = $this->client->send($request);\n\n        if (false == ($response->getStatusCode() >= 200 && $response->getStatusCode() < 300)) {\n            throw HttpException::factory($request, $response);\n        }\n\n        $result = json_decode($response->getBody()->getContents());\n        if (null === $result) {\n            throw new LogicException(\"Response content is not valid json: \\n\\n{$response->getBody()->getContents()}\");\n        }\n\n        return $result;\n    }", "code_tokens": ["protected", "function", "doRequest", "(", "array", "$", "fields", ")", "{", "$", "headers", "=", "array", "(", "'Content-Type'", "=>", "'application/x-www-form-urlencoded'", ",", ")", ";", "$", "request", "=", "$", "this", "->", "messageFactory", "->", "createRequest", "(", "'POST'", ",", "$", "this", "->", "getApiEndpoint", "(", ")", ",", "$", "headers", ",", "http_build_query", "(", "$", "fields", ")", ")", ";", "$", "response", "=", "$", "this", "->", "client", "->", "send", "(", "$", "request", ")", ";", "if", "(", "false", "==", "(", "$", "response", "->", "getStatusCode", "(", ")", ">=", "200", "&&", "$", "response", "->", "getStatusCode", "(", ")", "<", "300", ")", ")", "{", "throw", "HttpException", "::", "factory", "(", "$", "request", ",", "$", "response", ")", ";", "}", "$", "result", "=", "json_decode", "(", "$", "response", "->", "getBody", "(", ")", "->", "getContents", "(", ")", ")", ";", "if", "(", "null", "===", "$", "result", ")", "{", "throw", "new", "LogicException", "(", "\"Response content is not valid json: \\n\\n{$response->getBody()->getContents()}\"", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "@param array $fields\n\n@return array", "docstring_tokens": ["@param", "array", "$fields"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Be2Bill/Api.php#L190-L210", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Bridge/Symfony/Action/ObtainCreditCardAction.php", "func_name": "ObtainCreditCardAction.execute", "original_string": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $httpRequest = null;\n        if ($this->httpRequest instanceof Request) {\n            $httpRequest = $this->httpRequest;\n        } elseif ($this->httpRequestStack instanceof RequestStack) {\n            $httpRequest = $this->httpRequestStack->getMasterRequest();\n        }\n\n        if (false == $httpRequest) {\n            throw new LogicException('The action can be run only when http request is set.');\n        }\n\n        $form = $this->createCreditCardForm();\n\n        $form->handleRequest($httpRequest);\n        if ($form->isSubmitted()) {\n            /** @var CreditCardInterface $card */\n            $card = $form->getData();\n            $card->secure();\n\n            if ($form->isValid()) {\n                $request->set($card);\n\n                return;\n            }\n        }\n\n        $renderTemplate = new RenderTemplate($this->templateName, array(\n            'model' => $request->getModel(),\n            'firstModel' => $request->getFirstModel(),\n            'form' => $form->createView(),\n            'actionUrl' => $request->getToken() ? $request->getToken()->getTargetUrl() : null,\n        ));\n        $this->gateway->execute($renderTemplate);\n\n        throw new HttpResponse(new Response($renderTemplate->getResult(), 200, array(\n            'Cache-Control' => 'no-store, no-cache, max-age=0, post-check=0, pre-check=0',\n            'X-Status-Code' => 200,\n            'Pragma' => 'no-cache',\n        )));\n    }", "language": "php", "code": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $httpRequest = null;\n        if ($this->httpRequest instanceof Request) {\n            $httpRequest = $this->httpRequest;\n        } elseif ($this->httpRequestStack instanceof RequestStack) {\n            $httpRequest = $this->httpRequestStack->getMasterRequest();\n        }\n\n        if (false == $httpRequest) {\n            throw new LogicException('The action can be run only when http request is set.');\n        }\n\n        $form = $this->createCreditCardForm();\n\n        $form->handleRequest($httpRequest);\n        if ($form->isSubmitted()) {\n            /** @var CreditCardInterface $card */\n            $card = $form->getData();\n            $card->secure();\n\n            if ($form->isValid()) {\n                $request->set($card);\n\n                return;\n            }\n        }\n\n        $renderTemplate = new RenderTemplate($this->templateName, array(\n            'model' => $request->getModel(),\n            'firstModel' => $request->getFirstModel(),\n            'form' => $form->createView(),\n            'actionUrl' => $request->getToken() ? $request->getToken()->getTargetUrl() : null,\n        ));\n        $this->gateway->execute($renderTemplate);\n\n        throw new HttpResponse(new Response($renderTemplate->getResult(), 200, array(\n            'Cache-Control' => 'no-store, no-cache, max-age=0, post-check=0, pre-check=0',\n            'X-Status-Code' => 200,\n            'Pragma' => 'no-cache',\n        )));\n    }", "code_tokens": ["public", "function", "execute", "(", "$", "request", ")", "{", "RequestNotSupportedException", "::", "assertSupports", "(", "$", "this", ",", "$", "request", ")", ";", "$", "httpRequest", "=", "null", ";", "if", "(", "$", "this", "->", "httpRequest", "instanceof", "Request", ")", "{", "$", "httpRequest", "=", "$", "this", "->", "httpRequest", ";", "}", "elseif", "(", "$", "this", "->", "httpRequestStack", "instanceof", "RequestStack", ")", "{", "$", "httpRequest", "=", "$", "this", "->", "httpRequestStack", "->", "getMasterRequest", "(", ")", ";", "}", "if", "(", "false", "==", "$", "httpRequest", ")", "{", "throw", "new", "LogicException", "(", "'The action can be run only when http request is set.'", ")", ";", "}", "$", "form", "=", "$", "this", "->", "createCreditCardForm", "(", ")", ";", "$", "form", "->", "handleRequest", "(", "$", "httpRequest", ")", ";", "if", "(", "$", "form", "->", "isSubmitted", "(", ")", ")", "{", "/** @var CreditCardInterface $card */", "$", "card", "=", "$", "form", "->", "getData", "(", ")", ";", "$", "card", "->", "secure", "(", ")", ";", "if", "(", "$", "form", "->", "isValid", "(", ")", ")", "{", "$", "request", "->", "set", "(", "$", "card", ")", ";", "return", ";", "}", "}", "$", "renderTemplate", "=", "new", "RenderTemplate", "(", "$", "this", "->", "templateName", ",", "array", "(", "'model'", "=>", "$", "request", "->", "getModel", "(", ")", ",", "'firstModel'", "=>", "$", "request", "->", "getFirstModel", "(", ")", ",", "'form'", "=>", "$", "form", "->", "createView", "(", ")", ",", "'actionUrl'", "=>", "$", "request", "->", "getToken", "(", ")", "?", "$", "request", "->", "getToken", "(", ")", "->", "getTargetUrl", "(", ")", ":", "null", ",", ")", ")", ";", "$", "this", "->", "gateway", "->", "execute", "(", "$", "renderTemplate", ")", ";", "throw", "new", "HttpResponse", "(", "new", "Response", "(", "$", "renderTemplate", "->", "getResult", "(", ")", ",", "200", ",", "array", "(", "'Cache-Control'", "=>", "'no-store, no-cache, max-age=0, post-check=0, pre-check=0'", ",", "'X-Status-Code'", "=>", "200", ",", "'Pragma'", "=>", "'no-cache'", ",", ")", ")", ")", ";", "}"], "docstring": "{@inheritDoc}\n\n@param ObtainCreditCard $request", "docstring_tokens": ["{", "@inheritDoc", "}"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Bridge/Symfony/Action/ObtainCreditCardAction.php#L76-L119", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Registry/FallbackRegistry.php", "func_name": "FallbackRegistry.getGatewayFactory", "original_string": "public function getGatewayFactory($name)\n    {\n        try {\n            return $this->registry->getGatewayFactory($name);\n        } catch (InvalidArgumentException $e) {\n            return $this->fallbackRegistry->getGatewayFactory($name);\n        }\n    }", "language": "php", "code": "public function getGatewayFactory($name)\n    {\n        try {\n            return $this->registry->getGatewayFactory($name);\n        } catch (InvalidArgumentException $e) {\n            return $this->fallbackRegistry->getGatewayFactory($name);\n        }\n    }", "code_tokens": ["public", "function", "getGatewayFactory", "(", "$", "name", ")", "{", "try", "{", "return", "$", "this", "->", "registry", "->", "getGatewayFactory", "(", "$", "name", ")", ";", "}", "catch", "(", "InvalidArgumentException", "$", "e", ")", "{", "return", "$", "this", "->", "fallbackRegistry", "->", "getGatewayFactory", "(", "$", "name", ")", ";", "}", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Registry/FallbackRegistry.php#L31-L38", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Paypal/ExpressCheckout/Nvp/Action/CaptureAction.php", "func_name": "CaptureAction.execute", "original_string": "public function execute($request)\n    {\n        /** @var $request Capture */\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $details = ArrayObject::ensureArrayObject($request->getModel());\n\n        $details['PAYMENTREQUEST_0_PAYMENTACTION'] = Api::PAYMENTACTION_SALE;\n\n        foreach (range(0, 9) as $index) {\n            if (Api::PENDINGREASON_AUTHORIZATION == $details['PAYMENTINFO_'.$index.'_PENDINGREASON']) {\n                $details->defaults(['PAYMENTREQUEST_'.$index.'_COMPLETETYPE' => 'Complete']);\n\n                $this->gateway->execute(new DoCapture($details, $index));\n            }\n        }\n\n        parent::execute($request);\n    }", "language": "php", "code": "public function execute($request)\n    {\n        /** @var $request Capture */\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $details = ArrayObject::ensureArrayObject($request->getModel());\n\n        $details['PAYMENTREQUEST_0_PAYMENTACTION'] = Api::PAYMENTACTION_SALE;\n\n        foreach (range(0, 9) as $index) {\n            if (Api::PENDINGREASON_AUTHORIZATION == $details['PAYMENTINFO_'.$index.'_PENDINGREASON']) {\n                $details->defaults(['PAYMENTREQUEST_'.$index.'_COMPLETETYPE' => 'Complete']);\n\n                $this->gateway->execute(new DoCapture($details, $index));\n            }\n        }\n\n        parent::execute($request);\n    }", "code_tokens": ["public", "function", "execute", "(", "$", "request", ")", "{", "/** @var $request Capture */", "RequestNotSupportedException", "::", "assertSupports", "(", "$", "this", ",", "$", "request", ")", ";", "$", "details", "=", "ArrayObject", "::", "ensureArrayObject", "(", "$", "request", "->", "getModel", "(", ")", ")", ";", "$", "details", "[", "'PAYMENTREQUEST_0_PAYMENTACTION'", "]", "=", "Api", "::", "PAYMENTACTION_SALE", ";", "foreach", "(", "range", "(", "0", ",", "9", ")", "as", "$", "index", ")", "{", "if", "(", "Api", "::", "PENDINGREASON_AUTHORIZATION", "==", "$", "details", "[", "'PAYMENTINFO_'", ".", "$", "index", ".", "'_PENDINGREASON'", "]", ")", "{", "$", "details", "->", "defaults", "(", "[", "'PAYMENTREQUEST_'", ".", "$", "index", ".", "'_COMPLETETYPE'", "=>", "'Complete'", "]", ")", ";", "$", "this", "->", "gateway", "->", "execute", "(", "new", "DoCapture", "(", "$", "details", ",", "$", "index", ")", ")", ";", "}", "}", "parent", "::", "execute", "(", "$", "request", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Paypal/ExpressCheckout/Nvp/Action/CaptureAction.php#L15-L33", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Paypal/ExpressCheckout/Nvp/Action/CancelAction.php", "func_name": "CancelAction.execute", "original_string": "public function execute($request)\n    {\n        /** @var $request Cancel */\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $details = ArrayObject::ensureArrayObject($request->getModel());\n\n        if (!$details['TRANSACTIONID']) {\n            return;\n        }\n\n        $voidDetails = new ArrayObject([\n            'AUTHORIZATIONID' => $details['TRANSACTIONID'],\n        ]);\n\n        $this->gateway->execute(new DoVoid($voidDetails));\n        $this->gateway->execute(new Sync($request->getModel()));\n    }", "language": "php", "code": "public function execute($request)\n    {\n        /** @var $request Cancel */\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $details = ArrayObject::ensureArrayObject($request->getModel());\n\n        if (!$details['TRANSACTIONID']) {\n            return;\n        }\n\n        $voidDetails = new ArrayObject([\n            'AUTHORIZATIONID' => $details['TRANSACTIONID'],\n        ]);\n\n        $this->gateway->execute(new DoVoid($voidDetails));\n        $this->gateway->execute(new Sync($request->getModel()));\n    }", "code_tokens": ["public", "function", "execute", "(", "$", "request", ")", "{", "/** @var $request Cancel */", "RequestNotSupportedException", "::", "assertSupports", "(", "$", "this", ",", "$", "request", ")", ";", "$", "details", "=", "ArrayObject", "::", "ensureArrayObject", "(", "$", "request", "->", "getModel", "(", ")", ")", ";", "if", "(", "!", "$", "details", "[", "'TRANSACTIONID'", "]", ")", "{", "return", ";", "}", "$", "voidDetails", "=", "new", "ArrayObject", "(", "[", "'AUTHORIZATIONID'", "=>", "$", "details", "[", "'TRANSACTIONID'", "]", ",", "]", ")", ";", "$", "this", "->", "gateway", "->", "execute", "(", "new", "DoVoid", "(", "$", "voidDetails", ")", ")", ";", "$", "this", "->", "gateway", "->", "execute", "(", "new", "Sync", "(", "$", "request", "->", "getModel", "(", ")", ")", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Paypal/ExpressCheckout/Nvp/Action/CancelAction.php#L20-L37", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/PayumBuilder.php", "func_name": "PayumBuilder.addGateway", "original_string": "public function addGateway($name, $gateway)\n    {\n        // TODO add checks\n        if ($gateway instanceof GatewayInterface) {\n            $this->gateways[$name] = $gateway;\n        } elseif (is_array($gateway)) {\n            $currentConfig = isset($this->gatewayConfigs[$name]) ? $this->gatewayConfigs[$name] : [];\n            $currentConfig = array_replace_recursive($currentConfig, $gateway);\n            if (empty($currentConfig['factory'])) {\n                throw new InvalidArgumentException('Gateway config must have factory set in it and it must not be empty.');\n            }\n\n            $this->gatewayConfigs[$name] = $currentConfig;\n        } else {\n            throw new \\LogicException('Gateway argument must be either instance of GatewayInterface or a config array');\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function addGateway($name, $gateway)\n    {\n        // TODO add checks\n        if ($gateway instanceof GatewayInterface) {\n            $this->gateways[$name] = $gateway;\n        } elseif (is_array($gateway)) {\n            $currentConfig = isset($this->gatewayConfigs[$name]) ? $this->gatewayConfigs[$name] : [];\n            $currentConfig = array_replace_recursive($currentConfig, $gateway);\n            if (empty($currentConfig['factory'])) {\n                throw new InvalidArgumentException('Gateway config must have factory set in it and it must not be empty.');\n            }\n\n            $this->gatewayConfigs[$name] = $currentConfig;\n        } else {\n            throw new \\LogicException('Gateway argument must be either instance of GatewayInterface or a config array');\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addGateway", "(", "$", "name", ",", "$", "gateway", ")", "{", "// TODO add checks", "if", "(", "$", "gateway", "instanceof", "GatewayInterface", ")", "{", "$", "this", "->", "gateways", "[", "$", "name", "]", "=", "$", "gateway", ";", "}", "elseif", "(", "is_array", "(", "$", "gateway", ")", ")", "{", "$", "currentConfig", "=", "isset", "(", "$", "this", "->", "gatewayConfigs", "[", "$", "name", "]", ")", "?", "$", "this", "->", "gatewayConfigs", "[", "$", "name", "]", ":", "[", "]", ";", "$", "currentConfig", "=", "array_replace_recursive", "(", "$", "currentConfig", ",", "$", "gateway", ")", ";", "if", "(", "empty", "(", "$", "currentConfig", "[", "'factory'", "]", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Gateway config must have factory set in it and it must not be empty.'", ")", ";", "}", "$", "this", "->", "gatewayConfigs", "[", "$", "name", "]", "=", "$", "currentConfig", ";", "}", "else", "{", "throw", "new", "\\", "LogicException", "(", "'Gateway argument must be either instance of GatewayInterface or a config array'", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "@param string           $name\n@param GatewayInterface|array $gateway\n\n@return static", "docstring_tokens": ["@param", "string", "$name", "@param", "GatewayInterface|array", "$gateway"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/PayumBuilder.php#L158-L176", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/PayumBuilder.php", "func_name": "PayumBuilder.addGatewayFactory", "original_string": "public function addGatewayFactory($name, $gatewayFactory)\n    {\n        if (\n            $gatewayFactory instanceof GatewayFactoryInterface ||\n            is_callable($gatewayFactory)) {\n            $this->gatewayFactories[$name] = $gatewayFactory;\n\n            return $this;\n        }\n\n        throw new InvalidArgumentException('Invalid argument');\n    }", "language": "php", "code": "public function addGatewayFactory($name, $gatewayFactory)\n    {\n        if (\n            $gatewayFactory instanceof GatewayFactoryInterface ||\n            is_callable($gatewayFactory)) {\n            $this->gatewayFactories[$name] = $gatewayFactory;\n\n            return $this;\n        }\n\n        throw new InvalidArgumentException('Invalid argument');\n    }", "code_tokens": ["public", "function", "addGatewayFactory", "(", "$", "name", ",", "$", "gatewayFactory", ")", "{", "if", "(", "$", "gatewayFactory", "instanceof", "GatewayFactoryInterface", "||", "is_callable", "(", "$", "gatewayFactory", ")", ")", "{", "$", "this", "->", "gatewayFactories", "[", "$", "name", "]", "=", "$", "gatewayFactory", ";", "return", "$", "this", ";", "}", "throw", "new", "InvalidArgumentException", "(", "'Invalid argument'", ")", ";", "}"], "docstring": "@param string           $name\n@param GatewayFactoryInterface|callable $gatewayFactory\n\n@return static", "docstring_tokens": ["@param", "string", "$name", "@param", "GatewayFactoryInterface|callable", "$gatewayFactory"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/PayumBuilder.php#L184-L195", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/PayumBuilder.php", "func_name": "PayumBuilder.addGatewayFactoryConfig", "original_string": "public function addGatewayFactoryConfig($name, array $config)\n    {\n        $currentConfig = isset($this->gatewayFactoryConfigs[$name]) ? $this->gatewayFactoryConfigs[$name] : [];\n        $this->gatewayFactoryConfigs[$name] = array_replace_recursive($currentConfig, $config);\n\n        return $this;\n    }", "language": "php", "code": "public function addGatewayFactoryConfig($name, array $config)\n    {\n        $currentConfig = isset($this->gatewayFactoryConfigs[$name]) ? $this->gatewayFactoryConfigs[$name] : [];\n        $this->gatewayFactoryConfigs[$name] = array_replace_recursive($currentConfig, $config);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addGatewayFactoryConfig", "(", "$", "name", ",", "array", "$", "config", ")", "{", "$", "currentConfig", "=", "isset", "(", "$", "this", "->", "gatewayFactoryConfigs", "[", "$", "name", "]", ")", "?", "$", "this", "->", "gatewayFactoryConfigs", "[", "$", "name", "]", ":", "[", "]", ";", "$", "this", "->", "gatewayFactoryConfigs", "[", "$", "name", "]", "=", "array_replace_recursive", "(", "$", "currentConfig", ",", "$", "config", ")", ";", "return", "$", "this", ";", "}"], "docstring": "@param string $name\n@param array  $config\n\n@return static", "docstring_tokens": ["@param", "string", "$name", "@param", "array", "$config"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/PayumBuilder.php#L203-L209", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Bridge/Symfony/Builder/CoreGatewayFactoryBuilder.php", "func_name": "CoreGatewayFactoryBuilder.build", "original_string": "public function build(array $defaultConfig)\n    {\n        $coreGatewayFactory = new ContainerAwareCoreGatewayFactory($defaultConfig);\n        $coreGatewayFactory->setContainer($this->container);\n\n        return $coreGatewayFactory;\n    }", "language": "php", "code": "public function build(array $defaultConfig)\n    {\n        $coreGatewayFactory = new ContainerAwareCoreGatewayFactory($defaultConfig);\n        $coreGatewayFactory->setContainer($this->container);\n\n        return $coreGatewayFactory;\n    }", "code_tokens": ["public", "function", "build", "(", "array", "$", "defaultConfig", ")", "{", "$", "coreGatewayFactory", "=", "new", "ContainerAwareCoreGatewayFactory", "(", "$", "defaultConfig", ")", ";", "$", "coreGatewayFactory", "->", "setContainer", "(", "$", "this", "->", "container", ")", ";", "return", "$", "coreGatewayFactory", ";", "}"], "docstring": "@param array $defaultConfig\n\n@return GatewayFactoryInterface", "docstring_tokens": ["@param", "array", "$defaultConfig"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Bridge/Symfony/Builder/CoreGatewayFactoryBuilder.php#L18-L24", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Bridge/Propel/Storage/Propel1Storage.php", "func_name": "Propel1Storage.findBy", "original_string": "public function findBy(array $criteria)\n    {\n        $crit = new Criteria();\n        foreach ($criteria as $column => $value) {\n            $crit->add($column, $value);\n        }\n\n        $modelPeer = $this->modelPeer;\n\n        return $modelPeer::doSelect($crit);\n    }", "language": "php", "code": "public function findBy(array $criteria)\n    {\n        $crit = new Criteria();\n        foreach ($criteria as $column => $value) {\n            $crit->add($column, $value);\n        }\n\n        $modelPeer = $this->modelPeer;\n\n        return $modelPeer::doSelect($crit);\n    }", "code_tokens": ["public", "function", "findBy", "(", "array", "$", "criteria", ")", "{", "$", "crit", "=", "new", "Criteria", "(", ")", ";", "foreach", "(", "$", "criteria", "as", "$", "column", "=>", "$", "value", ")", "{", "$", "crit", "->", "add", "(", "$", "column", ",", "$", "value", ")", ";", "}", "$", "modelPeer", "=", "$", "this", "->", "modelPeer", ";", "return", "$", "modelPeer", "::", "doSelect", "(", "$", "crit", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Bridge/Propel/Storage/Propel1Storage.php#L37-L47", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Bridge/Propel/Storage/Propel1Storage.php", "func_name": "Propel1Storage.doGetIdentity", "original_string": "protected function doGetIdentity($model)\n    {\n        $id = $this->getModelId($model);\n\n        if (count($id) > 1) {\n            throw new LogicException('Storage not support composite primary ids');\n        }\n\n        return new Identity(array_shift($id), $model);\n    }", "language": "php", "code": "protected function doGetIdentity($model)\n    {\n        $id = $this->getModelId($model);\n\n        if (count($id) > 1) {\n            throw new LogicException('Storage not support composite primary ids');\n        }\n\n        return new Identity(array_shift($id), $model);\n    }", "code_tokens": ["protected", "function", "doGetIdentity", "(", "$", "model", ")", "{", "$", "id", "=", "$", "this", "->", "getModelId", "(", "$", "model", ")", ";", "if", "(", "count", "(", "$", "id", ")", ">", "1", ")", "{", "throw", "new", "LogicException", "(", "'Storage not support composite primary ids'", ")", ";", "}", "return", "new", "Identity", "(", "array_shift", "(", "$", "id", ")", ",", "$", "model", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Bridge/Propel/Storage/Propel1Storage.php#L78-L87", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Extension/StorageExtension.php", "func_name": "StorageExtension.onPreExecute", "original_string": "public function onPreExecute(Context $context)\n    {\n        $request = $context->getRequest();\n\n        if (false == $request instanceof ModelAggregateInterface) {\n            return;\n        }\n\n        if ($request->getModel() instanceof IdentityInterface) {\n            /** @var IdentityInterface $identity */\n            $identity = $request->getModel();\n            if (false == $model = $this->storage->find($identity)) {\n                return;\n            }\n\n            $request->setModel($model);\n        }\n\n        $this->scheduleForUpdateIfSupported($request->getModel());\n    }", "language": "php", "code": "public function onPreExecute(Context $context)\n    {\n        $request = $context->getRequest();\n\n        if (false == $request instanceof ModelAggregateInterface) {\n            return;\n        }\n\n        if ($request->getModel() instanceof IdentityInterface) {\n            /** @var IdentityInterface $identity */\n            $identity = $request->getModel();\n            if (false == $model = $this->storage->find($identity)) {\n                return;\n            }\n\n            $request->setModel($model);\n        }\n\n        $this->scheduleForUpdateIfSupported($request->getModel());\n    }", "code_tokens": ["public", "function", "onPreExecute", "(", "Context", "$", "context", ")", "{", "$", "request", "=", "$", "context", "->", "getRequest", "(", ")", ";", "if", "(", "false", "==", "$", "request", "instanceof", "ModelAggregateInterface", ")", "{", "return", ";", "}", "if", "(", "$", "request", "->", "getModel", "(", ")", "instanceof", "IdentityInterface", ")", "{", "/** @var IdentityInterface $identity */", "$", "identity", "=", "$", "request", "->", "getModel", "(", ")", ";", "if", "(", "false", "==", "$", "model", "=", "$", "this", "->", "storage", "->", "find", "(", "$", "identity", ")", ")", "{", "return", ";", "}", "$", "request", "->", "setModel", "(", "$", "model", ")", ";", "}", "$", "this", "->", "scheduleForUpdateIfSupported", "(", "$", "request", "->", "getModel", "(", ")", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Extension/StorageExtension.php#L31-L50", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Payex/Api/AgreementApi.php", "func_name": "AgreementApi.create", "original_string": "public function create(array $parameters)\n    {\n        $parameters['accountNumber'] = $this->options['account_number'];\n\n        //Deprecated, set to blank.\n        $parameters['notifyUrl'] = '';\n\n        $parameters['hash'] = $this->calculateHash($parameters, array(\n            'accountNumber',\n            'merchantRef',\n            'description',\n            'purchaseOperation',\n            'maxAmount',\n            'notifyUrl',\n            'startDate',\n            'stopDate',\n        ));\n\n        return $this->call('CreateAgreement3', $parameters, $this->getPxAgreementWsdl());\n    }", "language": "php", "code": "public function create(array $parameters)\n    {\n        $parameters['accountNumber'] = $this->options['account_number'];\n\n        //Deprecated, set to blank.\n        $parameters['notifyUrl'] = '';\n\n        $parameters['hash'] = $this->calculateHash($parameters, array(\n            'accountNumber',\n            'merchantRef',\n            'description',\n            'purchaseOperation',\n            'maxAmount',\n            'notifyUrl',\n            'startDate',\n            'stopDate',\n        ));\n\n        return $this->call('CreateAgreement3', $parameters, $this->getPxAgreementWsdl());\n    }", "code_tokens": ["public", "function", "create", "(", "array", "$", "parameters", ")", "{", "$", "parameters", "[", "'accountNumber'", "]", "=", "$", "this", "->", "options", "[", "'account_number'", "]", ";", "//Deprecated, set to blank.", "$", "parameters", "[", "'notifyUrl'", "]", "=", "''", ";", "$", "parameters", "[", "'hash'", "]", "=", "$", "this", "->", "calculateHash", "(", "$", "parameters", ",", "array", "(", "'accountNumber'", ",", "'merchantRef'", ",", "'description'", ",", "'purchaseOperation'", ",", "'maxAmount'", ",", "'notifyUrl'", ",", "'startDate'", ",", "'stopDate'", ",", ")", ")", ";", "return", "$", "this", "->", "call", "(", "'CreateAgreement3'", ",", "$", "parameters", ",", "$", "this", "->", "getPxAgreementWsdl", "(", ")", ")", ";", "}"], "docstring": "@param array $parameters\n\n@return array", "docstring_tokens": ["@param", "array", "$parameters"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Payex/Api/AgreementApi.php#L17-L36", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Payex/Api/AgreementApi.php", "func_name": "AgreementApi.check", "original_string": "public function check(array $parameters)\n    {\n        $parameters['accountNumber'] = $this->options['account_number'];\n\n        $parameters['hash'] = $this->calculateHash($parameters, array(\n            'accountNumber',\n            'agreementRef',\n        ));\n\n        return $this->call('Check', $parameters, $this->getPxAgreementWsdl());\n    }", "language": "php", "code": "public function check(array $parameters)\n    {\n        $parameters['accountNumber'] = $this->options['account_number'];\n\n        $parameters['hash'] = $this->calculateHash($parameters, array(\n            'accountNumber',\n            'agreementRef',\n        ));\n\n        return $this->call('Check', $parameters, $this->getPxAgreementWsdl());\n    }", "code_tokens": ["public", "function", "check", "(", "array", "$", "parameters", ")", "{", "$", "parameters", "[", "'accountNumber'", "]", "=", "$", "this", "->", "options", "[", "'account_number'", "]", ";", "$", "parameters", "[", "'hash'", "]", "=", "$", "this", "->", "calculateHash", "(", "$", "parameters", ",", "array", "(", "'accountNumber'", ",", "'agreementRef'", ",", ")", ")", ";", "return", "$", "this", "->", "call", "(", "'Check'", ",", "$", "parameters", ",", "$", "this", "->", "getPxAgreementWsdl", "(", ")", ")", ";", "}"], "docstring": "@param array $parameters\n\n@return array", "docstring_tokens": ["@param", "array", "$parameters"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Payex/Api/AgreementApi.php#L43-L53", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Payex/Api/AgreementApi.php", "func_name": "AgreementApi.delete", "original_string": "public function delete(array $parameters)\n    {\n        $parameters['accountNumber'] = $this->options['account_number'];\n\n        $parameters['hash'] = $this->calculateHash($parameters, array(\n            'accountNumber',\n            'agreementRef',\n        ));\n\n        return $this->call('DeleteAgreement', $parameters, $this->getPxAgreementWsdl());\n    }", "language": "php", "code": "public function delete(array $parameters)\n    {\n        $parameters['accountNumber'] = $this->options['account_number'];\n\n        $parameters['hash'] = $this->calculateHash($parameters, array(\n            'accountNumber',\n            'agreementRef',\n        ));\n\n        return $this->call('DeleteAgreement', $parameters, $this->getPxAgreementWsdl());\n    }", "code_tokens": ["public", "function", "delete", "(", "array", "$", "parameters", ")", "{", "$", "parameters", "[", "'accountNumber'", "]", "=", "$", "this", "->", "options", "[", "'account_number'", "]", ";", "$", "parameters", "[", "'hash'", "]", "=", "$", "this", "->", "calculateHash", "(", "$", "parameters", ",", "array", "(", "'accountNumber'", ",", "'agreementRef'", ",", ")", ")", ";", "return", "$", "this", "->", "call", "(", "'DeleteAgreement'", ",", "$", "parameters", ",", "$", "this", "->", "getPxAgreementWsdl", "(", ")", ")", ";", "}"], "docstring": "@param array $parameters\n\n@return array", "docstring_tokens": ["@param", "array", "$parameters"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Payex/Api/AgreementApi.php#L60-L70", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Sofort/Action/Api/CreateTransactionAction.php", "func_name": "CreateTransactionAction.execute", "original_string": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $details = ArrayObject::ensureArrayObject($request->getModel());\n\n        if ($details['transaction_id']) {\n            throw new LogicException(sprintf('The transaction has already been created for this payment. transaction_id: %s', $details['transaction_id']));\n        }\n\n        $details->validateNotEmpty(['amount', 'currency_code', 'reason', 'success_url', 'notification_url']);\n\n        $details->replace($this->api->createTransaction((array) $details));\n\n        if ($details['payment_url']) {\n            throw new HttpRedirect($details['payment_url']);\n        }\n    }", "language": "php", "code": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $details = ArrayObject::ensureArrayObject($request->getModel());\n\n        if ($details['transaction_id']) {\n            throw new LogicException(sprintf('The transaction has already been created for this payment. transaction_id: %s', $details['transaction_id']));\n        }\n\n        $details->validateNotEmpty(['amount', 'currency_code', 'reason', 'success_url', 'notification_url']);\n\n        $details->replace($this->api->createTransaction((array) $details));\n\n        if ($details['payment_url']) {\n            throw new HttpRedirect($details['payment_url']);\n        }\n    }", "code_tokens": ["public", "function", "execute", "(", "$", "request", ")", "{", "RequestNotSupportedException", "::", "assertSupports", "(", "$", "this", ",", "$", "request", ")", ";", "$", "details", "=", "ArrayObject", "::", "ensureArrayObject", "(", "$", "request", "->", "getModel", "(", ")", ")", ";", "if", "(", "$", "details", "[", "'transaction_id'", "]", ")", "{", "throw", "new", "LogicException", "(", "sprintf", "(", "'The transaction has already been created for this payment. transaction_id: %s'", ",", "$", "details", "[", "'transaction_id'", "]", ")", ")", ";", "}", "$", "details", "->", "validateNotEmpty", "(", "[", "'amount'", ",", "'currency_code'", ",", "'reason'", ",", "'success_url'", ",", "'notification_url'", "]", ")", ";", "$", "details", "->", "replace", "(", "$", "this", "->", "api", "->", "createTransaction", "(", "(", "array", ")", "$", "details", ")", ")", ";", "if", "(", "$", "details", "[", "'payment_url'", "]", ")", "{", "throw", "new", "HttpRedirect", "(", "$", "details", "[", "'payment_url'", "]", ")", ";", "}", "}"], "docstring": "{@inheritdoc}\n\n@param $request CreateTransaction", "docstring_tokens": ["{", "@inheritdoc", "}"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Sofort/Action/Api/CreateTransactionAction.php#L29-L46", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Bridge/Symfony/Security/TokenFactory.php", "func_name": "TokenFactory.generateUrl", "original_string": "protected function generateUrl($path, array $parameters = array())\n    {\n        return $this->urlGenerator->generate($path, $parameters, UrlGeneratorInterface::ABSOLUTE_URL);\n    }", "language": "php", "code": "protected function generateUrl($path, array $parameters = array())\n    {\n        return $this->urlGenerator->generate($path, $parameters, UrlGeneratorInterface::ABSOLUTE_URL);\n    }", "code_tokens": ["protected", "function", "generateUrl", "(", "$", "path", ",", "array", "$", "parameters", "=", "array", "(", ")", ")", "{", "return", "$", "this", "->", "urlGenerator", "->", "generate", "(", "$", "path", ",", "$", "parameters", ",", "UrlGeneratorInterface", "::", "ABSOLUTE_URL", ")", ";", "}"], "docstring": "@param string $path\n@param array  $parameters\n\n@return string", "docstring_tokens": ["@param", "string", "$path", "@param", "array", "$parameters"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Bridge/Symfony/Security/TokenFactory.php#L34-L37", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Registry/DynamicRegistry.php", "func_name": "DynamicRegistry.getGatewayFactory", "original_string": "public function getGatewayFactory($name)\n    {\n        // @deprecated It will throw invalid argument exception in 2.x\n        if ($this->backwardCompatibility && $this->gatewayFactoryRegistry instanceof  RegistryInterface) {\n            return $this->gatewayFactoryRegistry->getGatewayFactory($name);\n        }\n\n        throw new InvalidArgumentException(sprintf('Gateway factory \"%s\" does not exist.', $name));\n    }", "language": "php", "code": "public function getGatewayFactory($name)\n    {\n        // @deprecated It will throw invalid argument exception in 2.x\n        if ($this->backwardCompatibility && $this->gatewayFactoryRegistry instanceof  RegistryInterface) {\n            return $this->gatewayFactoryRegistry->getGatewayFactory($name);\n        }\n\n        throw new InvalidArgumentException(sprintf('Gateway factory \"%s\" does not exist.', $name));\n    }", "code_tokens": ["public", "function", "getGatewayFactory", "(", "$", "name", ")", "{", "// @deprecated It will throw invalid argument exception in 2.x", "if", "(", "$", "this", "->", "backwardCompatibility", "&&", "$", "this", "->", "gatewayFactoryRegistry", "instanceof", "RegistryInterface", ")", "{", "return", "$", "this", "->", "gatewayFactoryRegistry", "->", "getGatewayFactory", "(", "$", "name", ")", ";", "}", "throw", "new", "InvalidArgumentException", "(", "sprintf", "(", "'Gateway factory \"%s\" does not exist.'", ",", "$", "name", ")", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Registry/DynamicRegistry.php#L46-L54", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Registry/DynamicRegistry.php", "func_name": "DynamicRegistry.getGateway", "original_string": "public function getGateway($name)\n    {\n        if (array_key_exists($name, $this->gateways)) {\n            return $this->gateways[$name];\n        }\n\n        if ($gatewayConfigs = $this->gatewayConfigStore->findBy(array('gatewayName' => $name))) {\n            $gateway = $this->createGateway(array_shift($gatewayConfigs));\n            $this->gateways[$name] = $gateway;\n\n            return $gateway;\n        }\n\n        // @deprecated It will throw invalid argument exception in 2.x\n        if ($this->backwardCompatibility && $this->gatewayFactoryRegistry instanceof RegistryInterface) {\n            return $this->gatewayFactoryRegistry->getGateway($name);\n        }\n\n        throw new InvalidArgumentException(sprintf('Gateway \"%s\" does not exist.', $name));\n    }", "language": "php", "code": "public function getGateway($name)\n    {\n        if (array_key_exists($name, $this->gateways)) {\n            return $this->gateways[$name];\n        }\n\n        if ($gatewayConfigs = $this->gatewayConfigStore->findBy(array('gatewayName' => $name))) {\n            $gateway = $this->createGateway(array_shift($gatewayConfigs));\n            $this->gateways[$name] = $gateway;\n\n            return $gateway;\n        }\n\n        // @deprecated It will throw invalid argument exception in 2.x\n        if ($this->backwardCompatibility && $this->gatewayFactoryRegistry instanceof RegistryInterface) {\n            return $this->gatewayFactoryRegistry->getGateway($name);\n        }\n\n        throw new InvalidArgumentException(sprintf('Gateway \"%s\" does not exist.', $name));\n    }", "code_tokens": ["public", "function", "getGateway", "(", "$", "name", ")", "{", "if", "(", "array_key_exists", "(", "$", "name", ",", "$", "this", "->", "gateways", ")", ")", "{", "return", "$", "this", "->", "gateways", "[", "$", "name", "]", ";", "}", "if", "(", "$", "gatewayConfigs", "=", "$", "this", "->", "gatewayConfigStore", "->", "findBy", "(", "array", "(", "'gatewayName'", "=>", "$", "name", ")", ")", ")", "{", "$", "gateway", "=", "$", "this", "->", "createGateway", "(", "array_shift", "(", "$", "gatewayConfigs", ")", ")", ";", "$", "this", "->", "gateways", "[", "$", "name", "]", "=", "$", "gateway", ";", "return", "$", "gateway", ";", "}", "// @deprecated It will throw invalid argument exception in 2.x", "if", "(", "$", "this", "->", "backwardCompatibility", "&&", "$", "this", "->", "gatewayFactoryRegistry", "instanceof", "RegistryInterface", ")", "{", "return", "$", "this", "->", "gatewayFactoryRegistry", "->", "getGateway", "(", "$", "name", ")", ";", "}", "throw", "new", "InvalidArgumentException", "(", "sprintf", "(", "'Gateway \"%s\" does not exist.'", ",", "$", "name", ")", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Registry/DynamicRegistry.php#L72-L91", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Registry/DynamicRegistry.php", "func_name": "DynamicRegistry.getGateways", "original_string": "public function getGateways()\n    {\n        // @deprecated It will return empty array here\n        if ($this->backwardCompatibility && $this->gatewayFactoryRegistry instanceof  RegistryInterface) {\n            return $this->gatewayFactoryRegistry->getGateways();\n        }\n\n        $gateways = [];\n        foreach ($this->gatewayConfigStore->findBy([]) as $gatewayConfig) {\n            /** @var GatewayConfigInterface $gatewayConfig */\n\n            $gateways[$gatewayConfig->getGatewayName()] = $this->getGateway($gatewayConfig->getGatewayName());\n        }\n\n        return $gateways;\n    }", "language": "php", "code": "public function getGateways()\n    {\n        // @deprecated It will return empty array here\n        if ($this->backwardCompatibility && $this->gatewayFactoryRegistry instanceof  RegistryInterface) {\n            return $this->gatewayFactoryRegistry->getGateways();\n        }\n\n        $gateways = [];\n        foreach ($this->gatewayConfigStore->findBy([]) as $gatewayConfig) {\n            /** @var GatewayConfigInterface $gatewayConfig */\n\n            $gateways[$gatewayConfig->getGatewayName()] = $this->getGateway($gatewayConfig->getGatewayName());\n        }\n\n        return $gateways;\n    }", "code_tokens": ["public", "function", "getGateways", "(", ")", "{", "// @deprecated It will return empty array here", "if", "(", "$", "this", "->", "backwardCompatibility", "&&", "$", "this", "->", "gatewayFactoryRegistry", "instanceof", "RegistryInterface", ")", "{", "return", "$", "this", "->", "gatewayFactoryRegistry", "->", "getGateways", "(", ")", ";", "}", "$", "gateways", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "gatewayConfigStore", "->", "findBy", "(", "[", "]", ")", "as", "$", "gatewayConfig", ")", "{", "/** @var GatewayConfigInterface $gatewayConfig */", "$", "gateways", "[", "$", "gatewayConfig", "->", "getGatewayName", "(", ")", "]", "=", "$", "this", "->", "getGateway", "(", "$", "gatewayConfig", "->", "getGatewayName", "(", ")", ")", ";", "}", "return", "$", "gateways", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Registry/DynamicRegistry.php#L96-L111", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Paypal/ProHosted/Nvp/Api.php", "func_name": "Api.doCreateButton", "original_string": "public function doCreateButton(array $fields)\n    {\n        if (false == isset($fields['return'])) {\n            if (false == $this->options['return']) {\n                throw new RuntimeException('The return must be set either to FormRequest or to options.');\n            }\n\n            $fields['return'] = $this->options['return'];\n        }\n\n        $fields['paymentaction'] = self::PAYMENTACTION_SALE;\n        $fields['cmd']           = self::FORM_CMD;\n\n        $newFields = [];\n        $i         = 0;\n        foreach ($fields as $key => $val) {\n            $newFields['L_BUTTONVAR'.$i] = $key.'='.$val;\n            $i++;\n        }\n\n        $newFields['METHOD']     = 'BMCreateButton';\n        $newFields['BUTTONTYPE'] = 'PAYMENT';\n        $newFields['BUTTONCODE'] = 'TOKEN';\n\n        $this->addVersionField($newFields);\n        $this->addAuthorizeFields($newFields);\n\n        $response = $this->doRequest($newFields);\n\n        return $response;\n    }", "language": "php", "code": "public function doCreateButton(array $fields)\n    {\n        if (false == isset($fields['return'])) {\n            if (false == $this->options['return']) {\n                throw new RuntimeException('The return must be set either to FormRequest or to options.');\n            }\n\n            $fields['return'] = $this->options['return'];\n        }\n\n        $fields['paymentaction'] = self::PAYMENTACTION_SALE;\n        $fields['cmd']           = self::FORM_CMD;\n\n        $newFields = [];\n        $i         = 0;\n        foreach ($fields as $key => $val) {\n            $newFields['L_BUTTONVAR'.$i] = $key.'='.$val;\n            $i++;\n        }\n\n        $newFields['METHOD']     = 'BMCreateButton';\n        $newFields['BUTTONTYPE'] = 'PAYMENT';\n        $newFields['BUTTONCODE'] = 'TOKEN';\n\n        $this->addVersionField($newFields);\n        $this->addAuthorizeFields($newFields);\n\n        $response = $this->doRequest($newFields);\n\n        return $response;\n    }", "code_tokens": ["public", "function", "doCreateButton", "(", "array", "$", "fields", ")", "{", "if", "(", "false", "==", "isset", "(", "$", "fields", "[", "'return'", "]", ")", ")", "{", "if", "(", "false", "==", "$", "this", "->", "options", "[", "'return'", "]", ")", "{", "throw", "new", "RuntimeException", "(", "'The return must be set either to FormRequest or to options.'", ")", ";", "}", "$", "fields", "[", "'return'", "]", "=", "$", "this", "->", "options", "[", "'return'", "]", ";", "}", "$", "fields", "[", "'paymentaction'", "]", "=", "self", "::", "PAYMENTACTION_SALE", ";", "$", "fields", "[", "'cmd'", "]", "=", "self", "::", "FORM_CMD", ";", "$", "newFields", "=", "[", "]", ";", "$", "i", "=", "0", ";", "foreach", "(", "$", "fields", "as", "$", "key", "=>", "$", "val", ")", "{", "$", "newFields", "[", "'L_BUTTONVAR'", ".", "$", "i", "]", "=", "$", "key", ".", "'='", ".", "$", "val", ";", "$", "i", "++", ";", "}", "$", "newFields", "[", "'METHOD'", "]", "=", "'BMCreateButton'", ";", "$", "newFields", "[", "'BUTTONTYPE'", "]", "=", "'PAYMENT'", ";", "$", "newFields", "[", "'BUTTONCODE'", "]", "=", "'TOKEN'", ";", "$", "this", "->", "addVersionField", "(", "$", "newFields", ")", ";", "$", "this", "->", "addAuthorizeFields", "(", "$", "newFields", ")", ";", "$", "response", "=", "$", "this", "->", "doRequest", "(", "$", "newFields", ")", ";", "return", "$", "response", ";", "}"], "docstring": "Solution BMCreateButton\n\n@param array $fields\n\n@throws RuntimeException\n\n@return array", "docstring_tokens": ["Solution", "BMCreateButton"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Paypal/ProHosted/Nvp/Api.php#L154-L184", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Paypal/ProHosted/Nvp/Api.php", "func_name": "Api.getTransactionDetails", "original_string": "public function getTransactionDetails($fields)\n    {\n        $fields['METHOD'] = 'GetTransactionDetails';\n\n        $this->addAuthorizeFields($fields);\n        $this->addVersionField($fields);\n\n        return $this->doRequest($fields);\n    }", "language": "php", "code": "public function getTransactionDetails($fields)\n    {\n        $fields['METHOD'] = 'GetTransactionDetails';\n\n        $this->addAuthorizeFields($fields);\n        $this->addVersionField($fields);\n\n        return $this->doRequest($fields);\n    }", "code_tokens": ["public", "function", "getTransactionDetails", "(", "$", "fields", ")", "{", "$", "fields", "[", "'METHOD'", "]", "=", "'GetTransactionDetails'", ";", "$", "this", "->", "addAuthorizeFields", "(", "$", "fields", ")", ";", "$", "this", "->", "addVersionField", "(", "$", "fields", ")", ";", "return", "$", "this", "->", "doRequest", "(", "$", "fields", ")", ";", "}"], "docstring": "Require: TRANSACTIONID\n\n@param array $fields\n\n@return array", "docstring_tokens": ["Require", ":", "TRANSACTIONID"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Paypal/ProHosted/Nvp/Api.php#L193-L201", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Bridge/Propel2/Storage/Propel2Storage.php", "func_name": "Propel2Storage.doFind", "original_string": "protected function doFind($id)\n    {\n        $query = new $this->modelQuery();\n        $model = $query->findPk($id);\n\n        return $model ?: new $this->modelClass();\n    }", "language": "php", "code": "protected function doFind($id)\n    {\n        $query = new $this->modelQuery();\n        $model = $query->findPk($id);\n\n        return $model ?: new $this->modelClass();\n    }", "code_tokens": ["protected", "function", "doFind", "(", "$", "id", ")", "{", "$", "query", "=", "new", "$", "this", "->", "modelQuery", "(", ")", ";", "$", "model", "=", "$", "query", "->", "findPk", "(", "$", "id", ")", ";", "return", "$", "model", "?", ":", "new", "$", "this", "->", "modelClass", "(", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Bridge/Propel2/Storage/Propel2Storage.php#L52-L58", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Bridge/Zend/Storage/TableGatewayStorage.php", "func_name": "TableGatewayStorage.doGetIdentity", "original_string": "protected function doGetIdentity($model)\n    {\n        $id = $this->getModelId($model);\n\n        if (!$id) {\n            throw new LogicException('The model must be persisted before usage of this method');\n        }\n\n        return new Identity($id, $model);\n    }", "language": "php", "code": "protected function doGetIdentity($model)\n    {\n        $id = $this->getModelId($model);\n\n        if (!$id) {\n            throw new LogicException('The model must be persisted before usage of this method');\n        }\n\n        return new Identity($id, $model);\n    }", "code_tokens": ["protected", "function", "doGetIdentity", "(", "$", "model", ")", "{", "$", "id", "=", "$", "this", "->", "getModelId", "(", "$", "model", ")", ";", "if", "(", "!", "$", "id", ")", "{", "throw", "new", "LogicException", "(", "'The model must be persisted before usage of this method'", ")", ";", "}", "return", "new", "Identity", "(", "$", "id", ",", "$", "model", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Bridge/Zend/Storage/TableGatewayStorage.php#L111-L120", "partition": "test"}
