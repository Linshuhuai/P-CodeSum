{"repo": "Payum/Payum", "path": "src/Payum/Sofort/Action/RefundAction.php", "func_name": "RefundAction.execute", "original_string": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $this->gateway->execute(new RefundTransaction($request->getModel()));\n\n        $this->gateway->execute(new Sync($request->getModel()));\n    }", "language": "php", "code": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $this->gateway->execute(new RefundTransaction($request->getModel()));\n\n        $this->gateway->execute(new Sync($request->getModel()));\n    }", "code_tokens": ["public", "function", "execute", "(", "$", "request", ")", "{", "RequestNotSupportedException", "::", "assertSupports", "(", "$", "this", ",", "$", "request", ")", ";", "$", "this", "->", "gateway", "->", "execute", "(", "new", "RefundTransaction", "(", "$", "request", "->", "getModel", "(", ")", ")", ")", ";", "$", "this", "->", "gateway", "->", "execute", "(", "new", "Sync", "(", "$", "request", "->", "getModel", "(", ")", ")", ")", ";", "}"], "docstring": "{@inheritdoc}\n\n@param $request Notify", "docstring_tokens": ["{", "@inheritdoc", "}"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Sofort/Action/RefundAction.php#L23-L30", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/GatewayFactory.php", "func_name": "GatewayFactory.createConfig", "original_string": "public function createConfig(array $config = array())\n    {\n        $config = ArrayObject::ensureArrayObject($config);\n        $config->defaults($this->defaultConfig);\n        $config->defaults($this->coreGatewayFactory->createConfig((array) $config));\n\n        $this->populateConfig($config);\n\n        return (array) $config;\n    }", "language": "php", "code": "public function createConfig(array $config = array())\n    {\n        $config = ArrayObject::ensureArrayObject($config);\n        $config->defaults($this->defaultConfig);\n        $config->defaults($this->coreGatewayFactory->createConfig((array) $config));\n\n        $this->populateConfig($config);\n\n        return (array) $config;\n    }", "code_tokens": ["public", "function", "createConfig", "(", "array", "$", "config", "=", "array", "(", ")", ")", "{", "$", "config", "=", "ArrayObject", "::", "ensureArrayObject", "(", "$", "config", ")", ";", "$", "config", "->", "defaults", "(", "$", "this", "->", "defaultConfig", ")", ";", "$", "config", "->", "defaults", "(", "$", "this", "->", "coreGatewayFactory", "->", "createConfig", "(", "(", "array", ")", "$", "config", ")", ")", ";", "$", "this", "->", "populateConfig", "(", "$", "config", ")", ";", "return", "(", "array", ")", "$", "config", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/GatewayFactory.php#L39-L48", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Sofort/SofortGatewayFactory.php", "func_name": "SofortGatewayFactory.populateConfig", "original_string": "protected function populateConfig(ArrayObject $config)\n    {\n        if (false == class_exists(Sofortueberweisung::class)) {\n            throw new LogicException('You must install \"sofort/sofortlib-php:^3.0\" library.');\n        }\n\n        $config->defaults(array(\n            'payum.factory_name' => 'sofort',\n            'payum.factory_title' => 'Sofort',\n            'payum.action.capture' => new CaptureAction(),\n            'payum.action.status' => new StatusAction(),\n            'payum.action.notify' => new NotifyAction(),\n            'payum.action.sync' => new SyncAction(),\n            'payum.action.refund' => new RefundAction(),\n            'payum.action.convert_payment' => new ConvertPaymentAction(),\n\n            'payum.action.api.create_transaction' => new CreateTransactionAction(),\n            'payum.action.api.get_transaction_data' => new GetTransactionDataAction(),\n            'payum.action.api.refund_transaction' => new RefundTransactionAction(),\n        ));\n\n        if (false == $config['payum.api']) {\n            $config['payum.default_options'] = [\n                'config_key' => '',\n                'abort_url' => '',\n\n                /**\n                 * This adds possibility to disable use of notification url.\n                 * Could be useful in dev environments which is not accessable from the Internet.\n                 * @link https://github.com/Payum/Payum/issues/628\n                 */\n                'disable_notification' => false,\n\n            ];\n            $config->defaults($config['payum.default_options']);\n            $config['payum.required_options'] = ['config_key'];\n\n            $config['payum.api'] = function (ArrayObject $config) {\n                $config->validateNotEmpty($config['payum.required_options']);\n\n                if (false == preg_match('/.*\\:.*\\:.*/', $config['config_key'])) {\n                    throw new \\LogicException('The config_key is invalid. It must match the regexp \"/.*\\:.*\\:.*/\".');\n                }\n\n                return new Api([\n                    'config_key' => $config['config_key'],\n                    'abort_url' => $config['abort_url'],\n                    'disable_notification' => $config['disable_notification'],\n                ]);\n            };\n        }\n    }", "language": "php", "code": "protected function populateConfig(ArrayObject $config)\n    {\n        if (false == class_exists(Sofortueberweisung::class)) {\n            throw new LogicException('You must install \"sofort/sofortlib-php:^3.0\" library.');\n        }\n\n        $config->defaults(array(\n            'payum.factory_name' => 'sofort',\n            'payum.factory_title' => 'Sofort',\n            'payum.action.capture' => new CaptureAction(),\n            'payum.action.status' => new StatusAction(),\n            'payum.action.notify' => new NotifyAction(),\n            'payum.action.sync' => new SyncAction(),\n            'payum.action.refund' => new RefundAction(),\n            'payum.action.convert_payment' => new ConvertPaymentAction(),\n\n            'payum.action.api.create_transaction' => new CreateTransactionAction(),\n            'payum.action.api.get_transaction_data' => new GetTransactionDataAction(),\n            'payum.action.api.refund_transaction' => new RefundTransactionAction(),\n        ));\n\n        if (false == $config['payum.api']) {\n            $config['payum.default_options'] = [\n                'config_key' => '',\n                'abort_url' => '',\n\n                /**\n                 * This adds possibility to disable use of notification url.\n                 * Could be useful in dev environments which is not accessable from the Internet.\n                 * @link https://github.com/Payum/Payum/issues/628\n                 */\n                'disable_notification' => false,\n\n            ];\n            $config->defaults($config['payum.default_options']);\n            $config['payum.required_options'] = ['config_key'];\n\n            $config['payum.api'] = function (ArrayObject $config) {\n                $config->validateNotEmpty($config['payum.required_options']);\n\n                if (false == preg_match('/.*\\:.*\\:.*/', $config['config_key'])) {\n                    throw new \\LogicException('The config_key is invalid. It must match the regexp \"/.*\\:.*\\:.*/\".');\n                }\n\n                return new Api([\n                    'config_key' => $config['config_key'],\n                    'abort_url' => $config['abort_url'],\n                    'disable_notification' => $config['disable_notification'],\n                ]);\n            };\n        }\n    }", "code_tokens": ["protected", "function", "populateConfig", "(", "ArrayObject", "$", "config", ")", "{", "if", "(", "false", "==", "class_exists", "(", "Sofortueberweisung", "::", "class", ")", ")", "{", "throw", "new", "LogicException", "(", "'You must install \"sofort/sofortlib-php:^3.0\" library.'", ")", ";", "}", "$", "config", "->", "defaults", "(", "array", "(", "'payum.factory_name'", "=>", "'sofort'", ",", "'payum.factory_title'", "=>", "'Sofort'", ",", "'payum.action.capture'", "=>", "new", "CaptureAction", "(", ")", ",", "'payum.action.status'", "=>", "new", "StatusAction", "(", ")", ",", "'payum.action.notify'", "=>", "new", "NotifyAction", "(", ")", ",", "'payum.action.sync'", "=>", "new", "SyncAction", "(", ")", ",", "'payum.action.refund'", "=>", "new", "RefundAction", "(", ")", ",", "'payum.action.convert_payment'", "=>", "new", "ConvertPaymentAction", "(", ")", ",", "'payum.action.api.create_transaction'", "=>", "new", "CreateTransactionAction", "(", ")", ",", "'payum.action.api.get_transaction_data'", "=>", "new", "GetTransactionDataAction", "(", ")", ",", "'payum.action.api.refund_transaction'", "=>", "new", "RefundTransactionAction", "(", ")", ",", ")", ")", ";", "if", "(", "false", "==", "$", "config", "[", "'payum.api'", "]", ")", "{", "$", "config", "[", "'payum.default_options'", "]", "=", "[", "'config_key'", "=>", "''", ",", "'abort_url'", "=>", "''", ",", "/**\n                 * This adds possibility to disable use of notification url.\n                 * Could be useful in dev environments which is not accessable from the Internet.\n                 * @link https://github.com/Payum/Payum/issues/628\n                 */", "'disable_notification'", "=>", "false", ",", "]", ";", "$", "config", "->", "defaults", "(", "$", "config", "[", "'payum.default_options'", "]", ")", ";", "$", "config", "[", "'payum.required_options'", "]", "=", "[", "'config_key'", "]", ";", "$", "config", "[", "'payum.api'", "]", "=", "function", "(", "ArrayObject", "$", "config", ")", "{", "$", "config", "->", "validateNotEmpty", "(", "$", "config", "[", "'payum.required_options'", "]", ")", ";", "if", "(", "false", "==", "preg_match", "(", "'/.*\\:.*\\:.*/'", ",", "$", "config", "[", "'config_key'", "]", ")", ")", "{", "throw", "new", "\\", "LogicException", "(", "'The config_key is invalid. It must match the regexp \"/.*\\:.*\\:.*/\".'", ")", ";", "}", "return", "new", "Api", "(", "[", "'config_key'", "=>", "$", "config", "[", "'config_key'", "]", ",", "'abort_url'", "=>", "$", "config", "[", "'abort_url'", "]", ",", "'disable_notification'", "=>", "$", "config", "[", "'disable_notification'", "]", ",", "]", ")", ";", "}", ";", "}", "}"], "docstring": "{@inheritdoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Sofort/SofortGatewayFactory.php#L23-L74", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Klarna/Checkout/Action/SyncAction.php", "func_name": "SyncAction.execute", "original_string": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $model = ArrayObject::ensureArrayObject($request->getModel());\n\n        if ($model['location']) {\n            $this->gateway->execute($fetchOrder = new FetchOrder($model));\n\n            $model->replace($fetchOrder->getOrder()->marshal());\n        }\n    }", "language": "php", "code": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $model = ArrayObject::ensureArrayObject($request->getModel());\n\n        if ($model['location']) {\n            $this->gateway->execute($fetchOrder = new FetchOrder($model));\n\n            $model->replace($fetchOrder->getOrder()->marshal());\n        }\n    }", "code_tokens": ["public", "function", "execute", "(", "$", "request", ")", "{", "RequestNotSupportedException", "::", "assertSupports", "(", "$", "this", ",", "$", "request", ")", ";", "$", "model", "=", "ArrayObject", "::", "ensureArrayObject", "(", "$", "request", "->", "getModel", "(", ")", ")", ";", "if", "(", "$", "model", "[", "'location'", "]", ")", "{", "$", "this", "->", "gateway", "->", "execute", "(", "$", "fetchOrder", "=", "new", "FetchOrder", "(", "$", "model", ")", ")", ";", "$", "model", "->", "replace", "(", "$", "fetchOrder", "->", "getOrder", "(", ")", "->", "marshal", "(", ")", ")", ";", "}", "}"], "docstring": "{@inheritDoc}\n\n@param Sync $request", "docstring_tokens": ["{", "@inheritDoc", "}"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Klarna/Checkout/Action/SyncAction.php#L21-L32", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Stripe/Action/StatusAction.php", "func_name": "StatusAction.execute", "original_string": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $model = ArrayObject::ensureArrayObject($request->getModel());\n\n        if ($model['error']) {\n            $request->markFailed();\n\n            return;\n        }\n\n        if (false == $model['status'] && false == $model['card']) {\n            $request->markNew();\n\n            return;\n        }\n\n        if (false == $model['status'] && $model['card']) {\n            $request->markPending();\n\n            return;\n        }\n\n        if (Constants::STATUS_FAILED == $model['status']) {\n            $request->markFailed();\n\n            return;\n        }\n\n        if ($model['refunded']) {\n            $request->markRefunded();\n\n            return;\n        }\n\n        if (Constants::STATUS_SUCCEEDED == $model['status'] && $model['captured'] && $model['paid']) {\n            $request->markCaptured();\n\n            return;\n        }\n\n        if (Constants::STATUS_PAID == $model['status'] && $model['captured'] && $model['paid']) {\n            $request->markCaptured();\n\n            return;\n        }\n\n\n        if (Constants::STATUS_SUCCEEDED == $model['status'] && false == $model['captured']) {\n            $request->markAuthorized();\n\n            return;\n        }\n        if (Constants::STATUS_PAID == $model['status'] && false == $model['captured']) {\n            $request->markAuthorized();\n\n            return;\n        }\n\n        $request->markUnknown();\n    }", "language": "php", "code": "public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $model = ArrayObject::ensureArrayObject($request->getModel());\n\n        if ($model['error']) {\n            $request->markFailed();\n\n            return;\n        }\n\n        if (false == $model['status'] && false == $model['card']) {\n            $request->markNew();\n\n            return;\n        }\n\n        if (false == $model['status'] && $model['card']) {\n            $request->markPending();\n\n            return;\n        }\n\n        if (Constants::STATUS_FAILED == $model['status']) {\n            $request->markFailed();\n\n            return;\n        }\n\n        if ($model['refunded']) {\n            $request->markRefunded();\n\n            return;\n        }\n\n        if (Constants::STATUS_SUCCEEDED == $model['status'] && $model['captured'] && $model['paid']) {\n            $request->markCaptured();\n\n            return;\n        }\n\n        if (Constants::STATUS_PAID == $model['status'] && $model['captured'] && $model['paid']) {\n            $request->markCaptured();\n\n            return;\n        }\n\n\n        if (Constants::STATUS_SUCCEEDED == $model['status'] && false == $model['captured']) {\n            $request->markAuthorized();\n\n            return;\n        }\n        if (Constants::STATUS_PAID == $model['status'] && false == $model['captured']) {\n            $request->markAuthorized();\n\n            return;\n        }\n\n        $request->markUnknown();\n    }", "code_tokens": ["public", "function", "execute", "(", "$", "request", ")", "{", "RequestNotSupportedException", "::", "assertSupports", "(", "$", "this", ",", "$", "request", ")", ";", "$", "model", "=", "ArrayObject", "::", "ensureArrayObject", "(", "$", "request", "->", "getModel", "(", ")", ")", ";", "if", "(", "$", "model", "[", "'error'", "]", ")", "{", "$", "request", "->", "markFailed", "(", ")", ";", "return", ";", "}", "if", "(", "false", "==", "$", "model", "[", "'status'", "]", "&&", "false", "==", "$", "model", "[", "'card'", "]", ")", "{", "$", "request", "->", "markNew", "(", ")", ";", "return", ";", "}", "if", "(", "false", "==", "$", "model", "[", "'status'", "]", "&&", "$", "model", "[", "'card'", "]", ")", "{", "$", "request", "->", "markPending", "(", ")", ";", "return", ";", "}", "if", "(", "Constants", "::", "STATUS_FAILED", "==", "$", "model", "[", "'status'", "]", ")", "{", "$", "request", "->", "markFailed", "(", ")", ";", "return", ";", "}", "if", "(", "$", "model", "[", "'refunded'", "]", ")", "{", "$", "request", "->", "markRefunded", "(", ")", ";", "return", ";", "}", "if", "(", "Constants", "::", "STATUS_SUCCEEDED", "==", "$", "model", "[", "'status'", "]", "&&", "$", "model", "[", "'captured'", "]", "&&", "$", "model", "[", "'paid'", "]", ")", "{", "$", "request", "->", "markCaptured", "(", ")", ";", "return", ";", "}", "if", "(", "Constants", "::", "STATUS_PAID", "==", "$", "model", "[", "'status'", "]", "&&", "$", "model", "[", "'captured'", "]", "&&", "$", "model", "[", "'paid'", "]", ")", "{", "$", "request", "->", "markCaptured", "(", ")", ";", "return", ";", "}", "if", "(", "Constants", "::", "STATUS_SUCCEEDED", "==", "$", "model", "[", "'status'", "]", "&&", "false", "==", "$", "model", "[", "'captured'", "]", ")", "{", "$", "request", "->", "markAuthorized", "(", ")", ";", "return", ";", "}", "if", "(", "Constants", "::", "STATUS_PAID", "==", "$", "model", "[", "'status'", "]", "&&", "false", "==", "$", "model", "[", "'captured'", "]", ")", "{", "$", "request", "->", "markAuthorized", "(", ")", ";", "return", ";", "}", "$", "request", "->", "markUnknown", "(", ")", ";", "}"], "docstring": "{@inheritDoc}\n\n@param GetStatusInterface $request", "docstring_tokens": ["{", "@inheritDoc", "}"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Stripe/Action/StatusAction.php#L17-L78", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Extension/GenericTokenFactoryExtension.php", "func_name": "GenericTokenFactoryExtension.onPostExecute", "original_string": "public function onPostExecute(Context $context)\n    {\n        $action = $context->getAction();\n        if ($action instanceof GenericTokenFactoryAwareInterface) {\n            $action->setGenericTokenFactory(null);\n        }\n    }", "language": "php", "code": "public function onPostExecute(Context $context)\n    {\n        $action = $context->getAction();\n        if ($action instanceof GenericTokenFactoryAwareInterface) {\n            $action->setGenericTokenFactory(null);\n        }\n    }", "code_tokens": ["public", "function", "onPostExecute", "(", "Context", "$", "context", ")", "{", "$", "action", "=", "$", "context", "->", "getAction", "(", ")", ";", "if", "(", "$", "action", "instanceof", "GenericTokenFactoryAwareInterface", ")", "{", "$", "action", "->", "setGenericTokenFactory", "(", "null", ")", ";", "}", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Extension/GenericTokenFactoryExtension.php#L45-L51", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/Model/CreditCard.php", "func_name": "CreditCard.secure", "original_string": "public function secure()\n    {\n        $this->holder = $this->number = $this->expireAt = $this->securityCode = null;\n    }", "language": "php", "code": "public function secure()\n    {\n        $this->holder = $this->number = $this->expireAt = $this->securityCode = null;\n    }", "code_tokens": ["public", "function", "secure", "(", ")", "{", "$", "this", "->", "holder", "=", "$", "this", "->", "number", "=", "$", "this", "->", "expireAt", "=", "$", "this", "->", "securityCode", "=", "null", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/Model/CreditCard.php#L237-L240", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Be2Bill/Api.php", "func_name": "Api.calculateHash", "original_string": "public function calculateHash(array $params)\n    {\n        #Alpha sort\n        ksort($params);\n\n        $clearString = $this->options['password'];\n        foreach ($params as $key => $value) {\n            $clearString .= $key.'='.$value.$this->options['password'];\n        }\n\n        return hash('sha256', $clearString);\n    }", "language": "php", "code": "public function calculateHash(array $params)\n    {\n        #Alpha sort\n        ksort($params);\n\n        $clearString = $this->options['password'];\n        foreach ($params as $key => $value) {\n            $clearString .= $key.'='.$value.$this->options['password'];\n        }\n\n        return hash('sha256', $clearString);\n    }", "code_tokens": ["public", "function", "calculateHash", "(", "array", "$", "params", ")", "{", "#Alpha sort", "ksort", "(", "$", "params", ")", ";", "$", "clearString", "=", "$", "this", "->", "options", "[", "'password'", "]", ";", "foreach", "(", "$", "params", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "clearString", ".=", "$", "key", ".", "'='", ".", "$", "value", ".", "$", "this", "->", "options", "[", "'password'", "]", ";", "}", "return", "hash", "(", "'sha256'", ",", "$", "clearString", ")", ";", "}"], "docstring": "@param array $params\n\n@return string", "docstring_tokens": ["@param", "array", "$params"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Be2Bill/Api.php#L287-L298", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Core/PayumBuilder.php", "func_name": "PayumBuilder.buildOmnipayV3GatewayFactories", "original_string": "protected function buildOmnipayV3GatewayFactories(GatewayFactoryInterface $coreGatewayFactory)\n    {\n        $gatewayFactories = [];\n        if (false == class_exists(\\Omnipay\\Omnipay::class) || false == class_exists(OmnipayV3GatewayFactory::class)) {\n            return $gatewayFactories;\n        }\n\n        $factory = \\Omnipay\\Omnipay::getFactory();\n\n        $gatewayFactories['omnipay'] = new OmnipayV3GatewayFactory($factory, [], $coreGatewayFactory);\n\n        return $gatewayFactories;\n    }", "language": "php", "code": "protected function buildOmnipayV3GatewayFactories(GatewayFactoryInterface $coreGatewayFactory)\n    {\n        $gatewayFactories = [];\n        if (false == class_exists(\\Omnipay\\Omnipay::class) || false == class_exists(OmnipayV3GatewayFactory::class)) {\n            return $gatewayFactories;\n        }\n\n        $factory = \\Omnipay\\Omnipay::getFactory();\n\n        $gatewayFactories['omnipay'] = new OmnipayV3GatewayFactory($factory, [], $coreGatewayFactory);\n\n        return $gatewayFactories;\n    }", "code_tokens": ["protected", "function", "buildOmnipayV3GatewayFactories", "(", "GatewayFactoryInterface", "$", "coreGatewayFactory", ")", "{", "$", "gatewayFactories", "=", "[", "]", ";", "if", "(", "false", "==", "class_exists", "(", "\\", "Omnipay", "\\", "Omnipay", "::", "class", ")", "||", "false", "==", "class_exists", "(", "OmnipayV3GatewayFactory", "::", "class", ")", ")", "{", "return", "$", "gatewayFactories", ";", "}", "$", "factory", "=", "\\", "Omnipay", "\\", "Omnipay", "::", "getFactory", "(", ")", ";", "$", "gatewayFactories", "[", "'omnipay'", "]", "=", "new", "OmnipayV3GatewayFactory", "(", "$", "factory", ",", "[", "]", ",", "$", "coreGatewayFactory", ")", ";", "return", "$", "gatewayFactories", ";", "}"], "docstring": "@param GatewayFactoryInterface $coreGatewayFactory\n\n@return GatewayFactoryInterface[]", "docstring_tokens": ["@param", "GatewayFactoryInterface", "$coreGatewayFactory"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Core/PayumBuilder.php#L640-L652", "partition": "test"}
{"repo": "Payum/Payum", "path": "src/Payum/Payex/Api/AgreementApi.php", "func_name": "AgreementApi.autoPay", "original_string": "public function autoPay(array $parameters)\n    {\n        $parameters['accountNumber'] = $this->options['account_number'];\n\n        $parameters['hash'] = $this->calculateHash($parameters, array(\n            'accountNumber',\n            'agreementRef',\n            'price',\n            'productNumber',\n            'description',\n            'orderId',\n            'purchaseOperation',\n            'currency',\n        ));\n\n        return $this->call('AutoPay3', $parameters, $this->getPxAgreementWsdl());\n    }", "language": "php", "code": "public function autoPay(array $parameters)\n    {\n        $parameters['accountNumber'] = $this->options['account_number'];\n\n        $parameters['hash'] = $this->calculateHash($parameters, array(\n            'accountNumber',\n            'agreementRef',\n            'price',\n            'productNumber',\n            'description',\n            'orderId',\n            'purchaseOperation',\n            'currency',\n        ));\n\n        return $this->call('AutoPay3', $parameters, $this->getPxAgreementWsdl());\n    }", "code_tokens": ["public", "function", "autoPay", "(", "array", "$", "parameters", ")", "{", "$", "parameters", "[", "'accountNumber'", "]", "=", "$", "this", "->", "options", "[", "'account_number'", "]", ";", "$", "parameters", "[", "'hash'", "]", "=", "$", "this", "->", "calculateHash", "(", "$", "parameters", ",", "array", "(", "'accountNumber'", ",", "'agreementRef'", ",", "'price'", ",", "'productNumber'", ",", "'description'", ",", "'orderId'", ",", "'purchaseOperation'", ",", "'currency'", ",", ")", ")", ";", "return", "$", "this", "->", "call", "(", "'AutoPay3'", ",", "$", "parameters", ",", "$", "this", "->", "getPxAgreementWsdl", "(", ")", ")", ";", "}"], "docstring": "@param array $parameters\n\n@return array", "docstring_tokens": ["@param", "array", "$parameters"], "sha": "cf4be4f91d9bf24069153aceeb44b4f5b3d4f011", "url": "https://github.com/Payum/Payum/blob/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011/src/Payum/Payex/Api/AgreementApi.php#L77-L93", "partition": "test"}
