{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(key) {\n        var dict = this.dict;\n\n        if (dict.hasOwnProperty(key)) {\n          return true;\n        }\n\n        if (this.parent) {\n          return this.parent.has(key);\n        }\n\n        return false;\n      }", "language": "javascript", "code": "function(key) {\n        var dict = this.dict;\n\n        if (dict.hasOwnProperty(key)) {\n          return true;\n        }\n\n        if (this.parent) {\n          return this.parent.has(key);\n        }\n\n        return false;\n      }", "code_tokens": ["function", "(", "key", ")", "{", "var", "dict", "=", "this", ".", "dict", ";", "if", "(", "dict", ".", "hasOwnProperty", "(", "key", ")", ")", "{", "return", "true", ";", "}", "if", "(", "this", ".", "parent", ")", "{", "return", "this", ".", "parent", ".", "has", "(", "key", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Check for the existence of given a key, if the key is present at the current\nlevel return true, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return false.\n\n@method has\n@param {String} key\n@return {Boolean}", "docstring_tokens": ["Check", "for", "the", "existence", "of", "given", "a", "key", "if", "the", "key", "is", "present", "at", "the", "current", "level", "return", "true", "otherwise", "walk", "up", "the", "parent", "hierarchy", "and", "try", "again", ".", "If", "no", "matching", "key", "is", "found", "return", "false", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L11599-L11611", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function (callback) {\n    var items = [],\n        offset = 0;\n\n    forEach(this._operations, function (arrayOperation) {\n      callback(arrayOperation.items, offset, arrayOperation.type);\n\n      if (arrayOperation.type !== DELETE) {\n        offset += arrayOperation.count;\n        items = items.concat(arrayOperation.items);\n      }\n    });\n\n    this._operations = [new ArrayOperation(RETAIN, items.length, items)];\n  }", "language": "javascript", "code": "function (callback) {\n    var items = [],\n        offset = 0;\n\n    forEach(this._operations, function (arrayOperation) {\n      callback(arrayOperation.items, offset, arrayOperation.type);\n\n      if (arrayOperation.type !== DELETE) {\n        offset += arrayOperation.count;\n        items = items.concat(arrayOperation.items);\n      }\n    });\n\n    this._operations = [new ArrayOperation(RETAIN, items.length, items)];\n  }", "code_tokens": ["function", "(", "callback", ")", "{", "var", "items", "=", "[", "]", ",", "offset", "=", "0", ";", "forEach", "(", "this", ".", "_operations", ",", "function", "(", "arrayOperation", ")", "{", "callback", "(", "arrayOperation", ".", "items", ",", "offset", ",", "arrayOperation", ".", "type", ")", ";", "if", "(", "arrayOperation", ".", "type", "!==", "DELETE", ")", "{", "offset", "+=", "arrayOperation", ".", "count", ";", "items", "=", "items", ".", "concat", "(", "arrayOperation", ".", "items", ")", ";", "}", "}", ")", ";", "this", ".", "_operations", "=", "[", "new", "ArrayOperation", "(", "RETAIN", ",", "items", ".", "length", ",", "items", ")", "]", ";", "}"], "docstring": "Apply all operations, reducing them to retain:n, for `n`, the number of\nitems in the array.\n\n`callback` will be called for each operation and will be passed the following arguments:\n\n{array} items The items for the given operation\n{number} offset The computed offset of the items, ie the index in the\narray of the first item for this operation.\n{string} operation The type of the operation.  One of\n`Ember.TrackedArray.{RETAIN, DELETE, INSERT}`\n\n@method apply\n@param {function} callback", "docstring_tokens": ["Apply", "all", "operations", "reducing", "them", "to", "retain", ":", "n", "for", "n", "the", "number", "of", "items", "in", "the", "array", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L19027-L19041", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(path) {\n    var split = path.split(':'),\n        propertyPath = split[0],\n        classNames = \"\",\n        className,\n        falsyClassName;\n\n    // check if the property is defined as prop:class or prop:trueClass:falseClass\n    if (split.length > 1) {\n      className = split[1];\n      if (split.length === 3) { falsyClassName = split[2]; }\n\n      classNames = ':' + className;\n      if (falsyClassName) { classNames += \":\" + falsyClassName; }\n    }\n\n    return {\n      path: propertyPath,\n      classNames: classNames,\n      className: (className === '') ? undefined : className,\n      falsyClassName: falsyClassName\n    };\n  }", "language": "javascript", "code": "function(path) {\n    var split = path.split(':'),\n        propertyPath = split[0],\n        classNames = \"\",\n        className,\n        falsyClassName;\n\n    // check if the property is defined as prop:class or prop:trueClass:falseClass\n    if (split.length > 1) {\n      className = split[1];\n      if (split.length === 3) { falsyClassName = split[2]; }\n\n      classNames = ':' + className;\n      if (falsyClassName) { classNames += \":\" + falsyClassName; }\n    }\n\n    return {\n      path: propertyPath,\n      classNames: classNames,\n      className: (className === '') ? undefined : className,\n      falsyClassName: falsyClassName\n    };\n  }", "code_tokens": ["function", "(", "path", ")", "{", "var", "split", "=", "path", ".", "split", "(", "':'", ")", ",", "propertyPath", "=", "split", "[", "0", "]", ",", "classNames", "=", "\"\"", ",", "className", ",", "falsyClassName", ";", "// check if the property is defined as prop:class or prop:trueClass:falseClass", "if", "(", "split", ".", "length", ">", "1", ")", "{", "className", "=", "split", "[", "1", "]", ";", "if", "(", "split", ".", "length", "===", "3", ")", "{", "falsyClassName", "=", "split", "[", "2", "]", ";", "}", "classNames", "=", "':'", "+", "className", ";", "if", "(", "falsyClassName", ")", "{", "classNames", "+=", "\":\"", "+", "falsyClassName", ";", "}", "}", "return", "{", "path", ":", "propertyPath", ",", "classNames", ":", "classNames", ",", "className", ":", "(", "className", "===", "''", ")", "?", "undefined", ":", "className", ",", "falsyClassName", ":", "falsyClassName", "}", ";", "}"], "docstring": "Parse a path and return an object which holds the parsed properties.\n\nFor example a path like \"content.isEnabled:enabled:disabled\" will return the\nfollowing object:\n\n```javascript\n{\npath: \"content.isEnabled\",\nclassName: \"enabled\",\nfalsyClassName: \"disabled\",\nclassNames: \":enabled:disabled\"\n}\n```\n\n@method _parsePropertyPath\n@static\n@private", "docstring_tokens": ["Parse", "a", "path", "and", "return", "an", "object", "which", "holds", "the", "parsed", "properties", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L24742-L24764", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "serialize", "original_string": "function serialize(handler, model, names) {\n      var object = {};\n      if (isParam(model)) {\n        object[names[0]] = model;\n        return object;\n      }\n\n      // Use custom serialize if it exists.\n      if (handler.serialize) {\n        return handler.serialize(model, names);\n      }\n\n      if (names.length !== 1) { return; }\n\n      var name = names[0];\n\n      if (/_id$/.test(name)) {\n        object[name] = model.id;\n      } else {\n        object[name] = model;\n      }\n      return object;\n    }", "language": "javascript", "code": "function serialize(handler, model, names) {\n      var object = {};\n      if (isParam(model)) {\n        object[names[0]] = model;\n        return object;\n      }\n\n      // Use custom serialize if it exists.\n      if (handler.serialize) {\n        return handler.serialize(model, names);\n      }\n\n      if (names.length !== 1) { return; }\n\n      var name = names[0];\n\n      if (/_id$/.test(name)) {\n        object[name] = model.id;\n      } else {\n        object[name] = model;\n      }\n      return object;\n    }", "code_tokens": ["function", "serialize", "(", "handler", ",", "model", ",", "names", ")", "{", "var", "object", "=", "{", "}", ";", "if", "(", "isParam", "(", "model", ")", ")", "{", "object", "[", "names", "[", "0", "]", "]", "=", "model", ";", "return", "object", ";", "}", "// Use custom serialize if it exists.", "if", "(", "handler", ".", "serialize", ")", "{", "return", "handler", ".", "serialize", "(", "model", ",", "names", ")", ";", "}", "if", "(", "names", ".", "length", "!==", "1", ")", "{", "return", ";", "}", "var", "name", "=", "names", "[", "0", "]", ";", "if", "(", "/", "_id$", "/", ".", "test", "(", "name", ")", ")", "{", "object", "[", "name", "]", "=", "model", ".", "id", ";", "}", "else", "{", "object", "[", "name", "]", "=", "model", ";", "}", "return", "object", ";", "}"], "docstring": "@private\n\nSerializes a handler using its custom `serialize` method or\nby a default that looks up the expected property name from\nthe dynamic segment.\n\n@param {Object} handler a router handler\n@param {Object} model the model to be serialized for this handler\n@param {Array[Object]} names the names array attached to an\nhandler object returned from router.recognizer.handlersFor()", "docstring_tokens": ["@private"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L34592-L34614", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(type, recordsAdded, recordsUpdated, recordsRemoved) {\n    var self = this, releaseMethods = Ember.A(), records = this.getRecords(type), release;\n\n    var recordUpdated = function(updatedRecord) {\n      recordsUpdated([updatedRecord]);\n    };\n\n    var recordsToSend = records.map(function(record) {\n      releaseMethods.push(self.observeRecord(record, recordUpdated));\n      return self.wrapRecord(record);\n    });\n\n\n    var contentDidChange = function(array, idx, removedCount, addedCount) {\n      for (var i = idx; i < idx + addedCount; i++) {\n        var record = array.objectAt(i);\n        var wrapped = self.wrapRecord(record);\n        releaseMethods.push(self.observeRecord(record, recordUpdated));\n        recordsAdded([wrapped]);\n      }\n\n      if (removedCount) {\n        recordsRemoved(idx, removedCount);\n      }\n    };\n\n    var observer = { didChange: contentDidChange, willChange: Ember.K };\n    records.addArrayObserver(self, observer);\n\n    release = function() {\n      releaseMethods.forEach(function(fn) { fn(); });\n      records.removeArrayObserver(self, observer);\n      self.releaseMethods.removeObject(release);\n    };\n\n    recordsAdded(recordsToSend);\n\n    this.releaseMethods.pushObject(release);\n    return release;\n  }", "language": "javascript", "code": "function(type, recordsAdded, recordsUpdated, recordsRemoved) {\n    var self = this, releaseMethods = Ember.A(), records = this.getRecords(type), release;\n\n    var recordUpdated = function(updatedRecord) {\n      recordsUpdated([updatedRecord]);\n    };\n\n    var recordsToSend = records.map(function(record) {\n      releaseMethods.push(self.observeRecord(record, recordUpdated));\n      return self.wrapRecord(record);\n    });\n\n\n    var contentDidChange = function(array, idx, removedCount, addedCount) {\n      for (var i = idx; i < idx + addedCount; i++) {\n        var record = array.objectAt(i);\n        var wrapped = self.wrapRecord(record);\n        releaseMethods.push(self.observeRecord(record, recordUpdated));\n        recordsAdded([wrapped]);\n      }\n\n      if (removedCount) {\n        recordsRemoved(idx, removedCount);\n      }\n    };\n\n    var observer = { didChange: contentDidChange, willChange: Ember.K };\n    records.addArrayObserver(self, observer);\n\n    release = function() {\n      releaseMethods.forEach(function(fn) { fn(); });\n      records.removeArrayObserver(self, observer);\n      self.releaseMethods.removeObject(release);\n    };\n\n    recordsAdded(recordsToSend);\n\n    this.releaseMethods.pushObject(release);\n    return release;\n  }", "code_tokens": ["function", "(", "type", ",", "recordsAdded", ",", "recordsUpdated", ",", "recordsRemoved", ")", "{", "var", "self", "=", "this", ",", "releaseMethods", "=", "Ember", ".", "A", "(", ")", ",", "records", "=", "this", ".", "getRecords", "(", "type", ")", ",", "release", ";", "var", "recordUpdated", "=", "function", "(", "updatedRecord", ")", "{", "recordsUpdated", "(", "[", "updatedRecord", "]", ")", ";", "}", ";", "var", "recordsToSend", "=", "records", ".", "map", "(", "function", "(", "record", ")", "{", "releaseMethods", ".", "push", "(", "self", ".", "observeRecord", "(", "record", ",", "recordUpdated", ")", ")", ";", "return", "self", ".", "wrapRecord", "(", "record", ")", ";", "}", ")", ";", "var", "contentDidChange", "=", "function", "(", "array", ",", "idx", ",", "removedCount", ",", "addedCount", ")", "{", "for", "(", "var", "i", "=", "idx", ";", "i", "<", "idx", "+", "addedCount", ";", "i", "++", ")", "{", "var", "record", "=", "array", ".", "objectAt", "(", "i", ")", ";", "var", "wrapped", "=", "self", ".", "wrapRecord", "(", "record", ")", ";", "releaseMethods", ".", "push", "(", "self", ".", "observeRecord", "(", "record", ",", "recordUpdated", ")", ")", ";", "recordsAdded", "(", "[", "wrapped", "]", ")", ";", "}", "if", "(", "removedCount", ")", "{", "recordsRemoved", "(", "idx", ",", "removedCount", ")", ";", "}", "}", ";", "var", "observer", "=", "{", "didChange", ":", "contentDidChange", ",", "willChange", ":", "Ember", ".", "K", "}", ";", "records", ".", "addArrayObserver", "(", "self", ",", "observer", ")", ";", "release", "=", "function", "(", ")", "{", "releaseMethods", ".", "forEach", "(", "function", "(", "fn", ")", "{", "fn", "(", ")", ";", "}", ")", ";", "records", ".", "removeArrayObserver", "(", "self", ",", "observer", ")", ";", "self", ".", "releaseMethods", ".", "removeObject", "(", "release", ")", ";", "}", ";", "recordsAdded", "(", "recordsToSend", ")", ";", "this", ".", "releaseMethods", ".", "pushObject", "(", "release", ")", ";", "return", "release", ";", "}"], "docstring": "Fetch the records of a given type and observe them for changes.\n\n@public\n@method watchRecords\n\n@param {Function} recordsAdded Callback to call to add records.\nTakes an array of objects containing wrapped records.\nThe object should have the following properties:\ncolumnValues: {Object} key and value of a table cell\nobject: {Object} the actual record object\n\n@param {Function} recordsUpdated Callback to call when a record has changed.\nTakes an array of objects containing wrapped records.\n\n@param {Function} recordsRemoved Callback to call when a record has removed.\nTakes the following parameters:\nindex: the array index where the records were removed\ncount: the number of records removed\n\n@return {Function} Method to call to remove all observers", "docstring_tokens": ["Fetch", "the", "records", "of", "a", "given", "type", "and", "observe", "them", "for", "changes", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L41940-L41979", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "lib/reflect.js", "func_name": "", "original_string": "function() {\n    var trap = this.getTrap(\"isSealed\");\n    if (trap === undefined) {\n      // default forwarding behavior\n      return Reflect.isSealed(this.target);\n    }\n\n    var result = trap.call(this.handler, this.target);\n    result = !!result; // coerce to Boolean\n    var state = Object_isSealed(this.target);\n    if (result !== state) {\n      if (result) {\n        throw new TypeError(\"cannot report unsealed object as sealed: \"+\n                             this.target);\n      } else {\n        throw new TypeError(\"cannot report sealed object as unsealed: \"+\n                             this.target);\n      }\n    }\n    return state;\n  }", "language": "javascript", "code": "function() {\n    var trap = this.getTrap(\"isSealed\");\n    if (trap === undefined) {\n      // default forwarding behavior\n      return Reflect.isSealed(this.target);\n    }\n\n    var result = trap.call(this.handler, this.target);\n    result = !!result; // coerce to Boolean\n    var state = Object_isSealed(this.target);\n    if (result !== state) {\n      if (result) {\n        throw new TypeError(\"cannot report unsealed object as sealed: \"+\n                             this.target);\n      } else {\n        throw new TypeError(\"cannot report sealed object as unsealed: \"+\n                             this.target);\n      }\n    }\n    return state;\n  }", "code_tokens": ["function", "(", ")", "{", "var", "trap", "=", "this", ".", "getTrap", "(", "\"isSealed\"", ")", ";", "if", "(", "trap", "===", "undefined", ")", "{", "// default forwarding behavior", "return", "Reflect", ".", "isSealed", "(", "this", ".", "target", ")", ";", "}", "var", "result", "=", "trap", ".", "call", "(", "this", ".", "handler", ",", "this", ".", "target", ")", ";", "result", "=", "!", "!", "result", ";", "// coerce to Boolean", "var", "state", "=", "Object_isSealed", "(", "this", ".", "target", ")", ";", "if", "(", "result", "!==", "state", ")", "{", "if", "(", "result", ")", "{", "throw", "new", "TypeError", "(", "\"cannot report unsealed object as sealed: \"", "+", "this", ".", "target", ")", ";", "}", "else", "{", "throw", "new", "TypeError", "(", "\"cannot report sealed object as unsealed: \"", "+", "this", ".", "target", ")", ";", "}", "}", "return", "state", ";", "}"], "docstring": "Checks whether the trap result is consistent with the state of the\nwrapped target.", "docstring_tokens": ["Checks", "whether", "the", "trap", "result", "is", "consistent", "with", "the", "state", "of", "the", "wrapped", "target", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/lib/reflect.js#L1342-L1362", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(type) {\n    type = this.modelFor(type);\n\n    var typeMap = this.typeMapFor(type),\n        findAllCache = typeMap.findAllCache;\n\n    if (findAllCache) { return findAllCache; }\n\n    var array = this.recordArrayManager.createRecordArray(type);\n\n    typeMap.findAllCache = array;\n    return array;\n  }", "language": "javascript", "code": "function(type) {\n    type = this.modelFor(type);\n\n    var typeMap = this.typeMapFor(type),\n        findAllCache = typeMap.findAllCache;\n\n    if (findAllCache) { return findAllCache; }\n\n    var array = this.recordArrayManager.createRecordArray(type);\n\n    typeMap.findAllCache = array;\n    return array;\n  }", "code_tokens": ["function", "(", "type", ")", "{", "type", "=", "this", ".", "modelFor", "(", "type", ")", ";", "var", "typeMap", "=", "this", ".", "typeMapFor", "(", "type", ")", ",", "findAllCache", "=", "typeMap", ".", "findAllCache", ";", "if", "(", "findAllCache", ")", "{", "return", "findAllCache", ";", "}", "var", "array", "=", "this", ".", "recordArrayManager", ".", "createRecordArray", "(", "type", ")", ";", "typeMap", ".", "findAllCache", "=", "array", ";", "return", "array", ";", "}"], "docstring": "This method returns a filtered array that contains all of the known records\nfor a given type.\n\nNote that because it's just a filter, it will have any locally\ncreated records of the type.\n\nAlso note that multiple calls to `all` for a given type will always\nreturn the same RecordArray.\n\nExample\n\n```javascript\nvar local_posts = store.all(App.Post);\n```\n\n@method all\n@param {String or subclass of DS.Model} type\n@return {DS.RecordArray}", "docstring_tokens": ["This", "method", "returns", "a", "filtered", "array", "that", "contains", "all", "of", "the", "known", "records", "for", "a", "given", "type", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L2634-L2646", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(attributeName, value) {\n\n    // If a value is passed in, update the internal attributes and clear\n    // the attribute cache so it picks up the new value. Otherwise,\n    // collapse the current value into the internal attributes because\n    // the adapter has acknowledged it.\n    if (value !== undefined) {\n      this._data[attributeName] = value;\n      this.notifyPropertyChange(attributeName);\n    } else {\n      this._data[attributeName] = this._inFlightAttributes[attributeName];\n    }\n\n    this.updateRecordArraysLater();\n  }", "language": "javascript", "code": "function(attributeName, value) {\n\n    // If a value is passed in, update the internal attributes and clear\n    // the attribute cache so it picks up the new value. Otherwise,\n    // collapse the current value into the internal attributes because\n    // the adapter has acknowledged it.\n    if (value !== undefined) {\n      this._data[attributeName] = value;\n      this.notifyPropertyChange(attributeName);\n    } else {\n      this._data[attributeName] = this._inFlightAttributes[attributeName];\n    }\n\n    this.updateRecordArraysLater();\n  }", "code_tokens": ["function", "(", "attributeName", ",", "value", ")", "{", "// If a value is passed in, update the internal attributes and clear", "// the attribute cache so it picks up the new value. Otherwise,", "// collapse the current value into the internal attributes because", "// the adapter has acknowledged it.", "if", "(", "value", "!==", "undefined", ")", "{", "this", ".", "_data", "[", "attributeName", "]", "=", "value", ";", "this", ".", "notifyPropertyChange", "(", "attributeName", ")", ";", "}", "else", "{", "this", ".", "_data", "[", "attributeName", "]", "=", "this", ".", "_inFlightAttributes", "[", "attributeName", "]", ";", "}", "this", ".", "updateRecordArraysLater", "(", ")", ";", "}"], "docstring": "FOR USE DURING COMMIT PROCESS", "docstring_tokens": ["FOR", "USE", "DURING", "COMMIT", "PROCESS"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L5426-L5440", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(store, record, url) {\n    var host = get(this, 'host'),\n        id   = get(record, 'id'),\n        type = record.constructor.typeKey;\n\n    if (host && url.charAt(0) === '/' && url.charAt(1) !== '/') {\n      url = host + url;\n    }\n\n    return this.ajax(this.urlPrefix(url, this.buildURL(type, id)), 'GET');\n  }", "language": "javascript", "code": "function(store, record, url) {\n    var host = get(this, 'host'),\n        id   = get(record, 'id'),\n        type = record.constructor.typeKey;\n\n    if (host && url.charAt(0) === '/' && url.charAt(1) !== '/') {\n      url = host + url;\n    }\n\n    return this.ajax(this.urlPrefix(url, this.buildURL(type, id)), 'GET');\n  }", "code_tokens": ["function", "(", "store", ",", "record", ",", "url", ")", "{", "var", "host", "=", "get", "(", "this", ",", "'host'", ")", ",", "id", "=", "get", "(", "record", ",", "'id'", ")", ",", "type", "=", "record", ".", "constructor", ".", "typeKey", ";", "if", "(", "host", "&&", "url", ".", "charAt", "(", "0", ")", "===", "'/'", "&&", "url", ".", "charAt", "(", "1", ")", "!==", "'/'", ")", "{", "url", "=", "host", "+", "url", ";", "}", "return", "this", ".", "ajax", "(", "this", ".", "urlPrefix", "(", "url", ",", "this", ".", "buildURL", "(", "type", ",", "id", ")", ")", ",", "'GET'", ")", ";", "}"], "docstring": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a has-many relationship that were originally\nspecified as a URL (inside of `links`).\n\nFor example, if your original payload looks like this:\n\n```js\n{\n\"post\": {\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"links\": { \"comments\": \"/posts/1/comments\" }\n}\n}\n```\n\nThis method will be called with the parent record and `/posts/1/comments`.\n\nThe `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.\nIf the URL is host-relative (starting with a single slash), the\nrequest will use the host specified on the adapter (if any).\n\n@method findHasMany\n@param {DS.Store} store\n@param {DS.Model} record\n@param {String} url\n@returns {Promise} promise", "docstring_tokens": ["Called", "by", "the", "store", "in", "order", "to", "fetch", "a", "JSON", "array", "for", "the", "unloaded", "records", "in", "a", "has", "-", "many", "relationship", "that", "were", "originally", "specified", "as", "a", "URL", "(", "inside", "of", "links", ")", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L9299-L9309", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(jqXHR) {\n    var error = this._super(jqXHR);\n\n    if (jqXHR && jqXHR.status === 422) {\n      var jsonErrors = Ember.$.parseJSON(jqXHR.responseText)[\"errors\"],\n          errors = {};\n\n      forEach(Ember.keys(jsonErrors), function(key) {\n        errors[Ember.String.camelize(key)] = jsonErrors[key];\n      });\n\n      return new DS.InvalidError(errors);\n    } else {\n      return error;\n    }\n  }", "language": "javascript", "code": "function(jqXHR) {\n    var error = this._super(jqXHR);\n\n    if (jqXHR && jqXHR.status === 422) {\n      var jsonErrors = Ember.$.parseJSON(jqXHR.responseText)[\"errors\"],\n          errors = {};\n\n      forEach(Ember.keys(jsonErrors), function(key) {\n        errors[Ember.String.camelize(key)] = jsonErrors[key];\n      });\n\n      return new DS.InvalidError(errors);\n    } else {\n      return error;\n    }\n  }", "code_tokens": ["function", "(", "jqXHR", ")", "{", "var", "error", "=", "this", ".", "_super", "(", "jqXHR", ")", ";", "if", "(", "jqXHR", "&&", "jqXHR", ".", "status", "===", "422", ")", "{", "var", "jsonErrors", "=", "Ember", ".", "$", ".", "parseJSON", "(", "jqXHR", ".", "responseText", ")", "[", "\"errors\"", "]", ",", "errors", "=", "{", "}", ";", "forEach", "(", "Ember", ".", "keys", "(", "jsonErrors", ")", ",", "function", "(", "key", ")", "{", "errors", "[", "Ember", ".", "String", ".", "camelize", "(", "key", ")", "]", "=", "jsonErrors", "[", "key", "]", ";", "}", ")", ";", "return", "new", "DS", ".", "InvalidError", "(", "errors", ")", ";", "}", "else", "{", "return", "error", ";", "}", "}"], "docstring": "The ActiveModelAdapter overrides the `ajaxError` method\nto return a DS.InvalidError for all 422 Unprocessable Entity\nresponses.\n\nA 422 HTTP response from the server generally implies that the request\nwas well formed but the API was unable to process it because the\ncontent was not semantically correct or meaningful per the API.\n\nFor more information on 422 HTTP Error code see 11.2 WebDAV RFC 4918\nhttps://tools.ietf.org/html/rfc4918#section-11.2\n\n@method ajaxError\n@param jqXHR\n@returns error", "docstring_tokens": ["The", "ActiveModelAdapter", "overrides", "the", "ajaxError", "method", "to", "return", "a", "DS", ".", "InvalidError", "for", "all", "422", "Unprocessable", "Entity", "responses", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L10499-L10514", "partition": "test"}
