{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(fullName, property, injectionName) {\n        if (this.parent) { illegalChildOperation('injection'); }\n\n        validateFullName(injectionName);\n        var normalizedInjectionName = this.normalize(injectionName);\n\n        if (fullName.indexOf(':') === -1) {\n          return this.typeInjection(fullName, property, normalizedInjectionName);\n        }\n\n        validateFullName(fullName);\n        var normalizedName = this.normalize(fullName);\n\n        addInjection(this.injections, normalizedName, property, normalizedInjectionName);\n      }", "language": "javascript", "code": "function(fullName, property, injectionName) {\n        if (this.parent) { illegalChildOperation('injection'); }\n\n        validateFullName(injectionName);\n        var normalizedInjectionName = this.normalize(injectionName);\n\n        if (fullName.indexOf(':') === -1) {\n          return this.typeInjection(fullName, property, normalizedInjectionName);\n        }\n\n        validateFullName(fullName);\n        var normalizedName = this.normalize(fullName);\n\n        addInjection(this.injections, normalizedName, property, normalizedInjectionName);\n      }", "code_tokens": ["function", "(", "fullName", ",", "property", ",", "injectionName", ")", "{", "if", "(", "this", ".", "parent", ")", "{", "illegalChildOperation", "(", "'injection'", ")", ";", "}", "validateFullName", "(", "injectionName", ")", ";", "var", "normalizedInjectionName", "=", "this", ".", "normalize", "(", "injectionName", ")", ";", "if", "(", "fullName", ".", "indexOf", "(", "':'", ")", "===", "-", "1", ")", "{", "return", "this", ".", "typeInjection", "(", "fullName", ",", "property", ",", "normalizedInjectionName", ")", ";", "}", "validateFullName", "(", "fullName", ")", ";", "var", "normalizedName", "=", "this", ".", "normalize", "(", "fullName", ")", ";", "addInjection", "(", "this", ".", "injections", ",", "normalizedName", ",", "property", ",", "normalizedInjectionName", ")", ";", "}"], "docstring": "Defines injection rules.\n\nThese rules are used to inject dependencies onto objects when they\nare instantiated.\n\nTwo forms of injections are possible:\n\nInjecting one fullName on another fullName\nInjecting one fullName on a type\n\nExample:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('source:main', Source);\ncontainer.register('model:user', User);\ncontainer.register('model:post', Post);\n\ninjecting one fullName on another fullName\neg. each user model gets a post model\ncontainer.injection('model:user', 'post', 'model:post');\n\ninjecting one fullName on another type\ncontainer.injection('model', 'source', 'source:main');\n\nvar user = container.lookup('model:user');\nvar post = container.lookup('model:post');\n\nuser.source instanceof Source; //=> true\npost.source instanceof Source; //=> true\n\nuser.post instanceof Post; //=> true\n\nand both models share the same source\nuser.source === post.source; //=> true\n```\n\n@method injection\n@param {String} factoryName\n@param {String} property\n@param {String} injectionName", "docstring_tokens": ["Defines", "injection", "rules", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L11172-L11186", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(type, property, fullName) {\n        if (this.parent) { illegalChildOperation('factoryTypeInjection'); }\n\n        addTypeInjection(this.factoryTypeInjections, type, property, this.normalize(fullName));\n      }", "language": "javascript", "code": "function(type, property, fullName) {\n        if (this.parent) { illegalChildOperation('factoryTypeInjection'); }\n\n        addTypeInjection(this.factoryTypeInjections, type, property, this.normalize(fullName));\n      }", "code_tokens": ["function", "(", "type", ",", "property", ",", "fullName", ")", "{", "if", "(", "this", ".", "parent", ")", "{", "illegalChildOperation", "(", "'factoryTypeInjection'", ")", ";", "}", "addTypeInjection", "(", "this", ".", "factoryTypeInjections", ",", "type", ",", "property", ",", "this", ".", "normalize", "(", "fullName", ")", ")", ";", "}"], "docstring": "Used only via `factoryInjection`.\n\nProvides a specialized form of injection, specifically enabling\nall factory of one type to be injected with a reference to another\nobject.\n\nFor example, provided each factory of type `model` needed a `store`.\none would do the following:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('store:main', SomeStore);\n\ncontainer.factoryTypeInjection('model', 'store', 'store:main');\n\nvar store = container.lookup('store:main');\nvar UserFactory = container.lookupFactory('model:user');\n\nUserFactory.store instanceof SomeStore; //=> true\n```\n\n@private\n@method factoryTypeInjection\n@param {String} type\n@param {String} property\n@param {String} fullName", "docstring_tokens": ["Used", "only", "via", "factoryInjection", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L11218-L11222", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(key) {\n        var dict = this.dict;\n\n        if (dict.hasOwnProperty(key)) {\n          return dict[key];\n        }\n\n        if (this.parent) {\n          return this.parent.get(key);\n        }\n      }", "language": "javascript", "code": "function(key) {\n        var dict = this.dict;\n\n        if (dict.hasOwnProperty(key)) {\n          return dict[key];\n        }\n\n        if (this.parent) {\n          return this.parent.get(key);\n        }\n      }", "code_tokens": ["function", "(", "key", ")", "{", "var", "dict", "=", "this", ".", "dict", ";", "if", "(", "dict", ".", "hasOwnProperty", "(", "key", ")", ")", "{", "return", "dict", "[", "key", "]", ";", "}", "if", "(", "this", ".", "parent", ")", "{", "return", "this", ".", "parent", ".", "get", "(", "key", ")", ";", "}", "}"], "docstring": "Retrieve the value given a key, if the value is present at the current\nlevel use it, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return undefined.\n\n@method get\n@param {String} key\n@return {any}", "docstring_tokens": ["Retrieve", "the", "value", "given", "a", "key", "if", "the", "value", "is", "present", "at", "the", "current", "level", "use", "it", "otherwise", "walk", "up", "the", "parent", "hierarchy", "and", "try", "again", ".", "If", "no", "matching", "key", "is", "found", "return", "undefined", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L11557-L11567", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(target, opts) {\n    var willChange = (opts && opts.willChange) || 'arrayWillChange',\n        didChange  = (opts && opts.didChange) || 'arrayDidChange';\n\n    var hasObservers = get(this, 'hasArrayObservers');\n    if (!hasObservers) Ember.propertyWillChange(this, 'hasArrayObservers');\n    Ember.addListener(this, '@array:before', target, willChange);\n    Ember.addListener(this, '@array:change', target, didChange);\n    if (!hasObservers) Ember.propertyDidChange(this, 'hasArrayObservers');\n    return this;\n  }", "language": "javascript", "code": "function(target, opts) {\n    var willChange = (opts && opts.willChange) || 'arrayWillChange',\n        didChange  = (opts && opts.didChange) || 'arrayDidChange';\n\n    var hasObservers = get(this, 'hasArrayObservers');\n    if (!hasObservers) Ember.propertyWillChange(this, 'hasArrayObservers');\n    Ember.addListener(this, '@array:before', target, willChange);\n    Ember.addListener(this, '@array:change', target, didChange);\n    if (!hasObservers) Ember.propertyDidChange(this, 'hasArrayObservers');\n    return this;\n  }", "code_tokens": ["function", "(", "target", ",", "opts", ")", "{", "var", "willChange", "=", "(", "opts", "&&", "opts", ".", "willChange", ")", "||", "'arrayWillChange'", ",", "didChange", "=", "(", "opts", "&&", "opts", ".", "didChange", ")", "||", "'arrayDidChange'", ";", "var", "hasObservers", "=", "get", "(", "this", ",", "'hasArrayObservers'", ")", ";", "if", "(", "!", "hasObservers", ")", "Ember", ".", "propertyWillChange", "(", "this", ",", "'hasArrayObservers'", ")", ";", "Ember", ".", "addListener", "(", "this", ",", "'@array:before'", ",", "target", ",", "willChange", ")", ";", "Ember", ".", "addListener", "(", "this", ",", "'@array:change'", ",", "target", ",", "didChange", ")", ";", "if", "(", "!", "hasObservers", ")", "Ember", ".", "propertyDidChange", "(", "this", ",", "'hasArrayObservers'", ")", ";", "return", "this", ";", "}"], "docstring": ".......................................................... ARRAY OBSERVERS  \nAdds an array observer to the receiving array. The array observer object\nnormally must implement two methods:\n\n`arrayWillChange(observedObj, start, removeCount, addCount)` - This method will be\ncalled just before the array is modified.\n`arrayDidChange(observedObj, start, removeCount, addCount)` - This method will be\ncalled just after the array is modified.\n\nBoth callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.\n\nIn addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.\n\n@method addArrayObserver\n@param {Object} target The observer object.\n@param {Hash} opts Optional hash of configuration options including\n`willChange` and `didChange` option.\n@return {Ember.Array} receiver", "docstring_tokens": ["..........................................................", "ARRAY", "OBSERVERS", "Adds", "an", "array", "observer", "to", "the", "receiving", "array", ".", "The", "array", "observer", "object", "normally", "must", "implement", "two", "methods", ":"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L15241-L15251", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(startIdx, removeAmt, addAmt) {\n\n    // if no args are passed assume everything changes\n    if (startIdx===undefined) {\n      startIdx = 0;\n      removeAmt = addAmt = -1;\n    } else {\n      if (removeAmt === undefined) removeAmt=-1;\n      if (addAmt    === undefined) addAmt=-1;\n    }\n\n    // Make sure the @each proxy is set up if anyone is observing @each\n    if (Ember.isWatching(this, '@each')) { get(this, '@each'); }\n\n    Ember.sendEvent(this, '@array:before', [this, startIdx, removeAmt, addAmt]);\n\n    var removing, lim;\n    if (startIdx>=0 && removeAmt>=0 && get(this, 'hasEnumerableObservers')) {\n      removing = [];\n      lim = startIdx+removeAmt;\n      for(var idx=startIdx;idx<lim;idx++) removing.push(this.objectAt(idx));\n    } else {\n      removing = removeAmt;\n    }\n\n    this.enumerableContentWillChange(removing, addAmt);\n\n    return this;\n  }", "language": "javascript", "code": "function(startIdx, removeAmt, addAmt) {\n\n    // if no args are passed assume everything changes\n    if (startIdx===undefined) {\n      startIdx = 0;\n      removeAmt = addAmt = -1;\n    } else {\n      if (removeAmt === undefined) removeAmt=-1;\n      if (addAmt    === undefined) addAmt=-1;\n    }\n\n    // Make sure the @each proxy is set up if anyone is observing @each\n    if (Ember.isWatching(this, '@each')) { get(this, '@each'); }\n\n    Ember.sendEvent(this, '@array:before', [this, startIdx, removeAmt, addAmt]);\n\n    var removing, lim;\n    if (startIdx>=0 && removeAmt>=0 && get(this, 'hasEnumerableObservers')) {\n      removing = [];\n      lim = startIdx+removeAmt;\n      for(var idx=startIdx;idx<lim;idx++) removing.push(this.objectAt(idx));\n    } else {\n      removing = removeAmt;\n    }\n\n    this.enumerableContentWillChange(removing, addAmt);\n\n    return this;\n  }", "code_tokens": ["function", "(", "startIdx", ",", "removeAmt", ",", "addAmt", ")", "{", "// if no args are passed assume everything changes", "if", "(", "startIdx", "===", "undefined", ")", "{", "startIdx", "=", "0", ";", "removeAmt", "=", "addAmt", "=", "-", "1", ";", "}", "else", "{", "if", "(", "removeAmt", "===", "undefined", ")", "removeAmt", "=", "-", "1", ";", "if", "(", "addAmt", "===", "undefined", ")", "addAmt", "=", "-", "1", ";", "}", "// Make sure the @each proxy is set up if anyone is observing @each", "if", "(", "Ember", ".", "isWatching", "(", "this", ",", "'@each'", ")", ")", "{", "get", "(", "this", ",", "'@each'", ")", ";", "}", "Ember", ".", "sendEvent", "(", "this", ",", "'@array:before'", ",", "[", "this", ",", "startIdx", ",", "removeAmt", ",", "addAmt", "]", ")", ";", "var", "removing", ",", "lim", ";", "if", "(", "startIdx", ">=", "0", "&&", "removeAmt", ">=", "0", "&&", "get", "(", "this", ",", "'hasEnumerableObservers'", ")", ")", "{", "removing", "=", "[", "]", ";", "lim", "=", "startIdx", "+", "removeAmt", ";", "for", "(", "var", "idx", "=", "startIdx", ";", "idx", "<", "lim", ";", "idx", "++", ")", "removing", ".", "push", "(", "this", ".", "objectAt", "(", "idx", ")", ")", ";", "}", "else", "{", "removing", "=", "removeAmt", ";", "}", "this", ".", "enumerableContentWillChange", "(", "removing", ",", "addAmt", ")", ";", "return", "this", ";", "}"], "docstring": "If you are implementing an object that supports `Ember.Array`, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\n\n@method arrayContentWillChange\n@param {Number} startIdx The starting index in the array that will change.\n@param {Number} removeAmt The number of items that will be removed. If you\npass `null` assumes 0\n@param {Number} addAmt The number of items that will be added. If you\npass `null` assumes 0.\n@return {Ember.Array} receiver", "docstring_tokens": ["If", "you", "are", "implementing", "an", "object", "that", "supports", "Ember", ".", "Array", "call", "this", "method", "just", "before", "the", "array", "content", "changes", "to", "notify", "any", "observers", "and", "invalidate", "any", "related", "properties", ".", "Pass", "the", "starting", "index", "of", "the", "change", "as", "well", "as", "a", "delta", "of", "the", "amounts", "to", "change", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L15300-L15328", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(startIdx, removeAmt, addAmt) {\n\n    // if no args are passed assume everything changes\n    if (startIdx===undefined) {\n      startIdx = 0;\n      removeAmt = addAmt = -1;\n    } else {\n      if (removeAmt === undefined) removeAmt=-1;\n      if (addAmt    === undefined) addAmt=-1;\n    }\n\n    var adding, lim;\n    if (startIdx>=0 && addAmt>=0 && get(this, 'hasEnumerableObservers')) {\n      adding = [];\n      lim = startIdx+addAmt;\n      for(var idx=startIdx;idx<lim;idx++) adding.push(this.objectAt(idx));\n    } else {\n      adding = addAmt;\n    }\n\n    this.enumerableContentDidChange(removeAmt, adding);\n    Ember.sendEvent(this, '@array:change', [this, startIdx, removeAmt, addAmt]);\n\n    var length      = get(this, 'length'),\n        cachedFirst = cacheFor(this, 'firstObject'),\n        cachedLast  = cacheFor(this, 'lastObject');\n    if (this.objectAt(0) !== cachedFirst) {\n      Ember.propertyWillChange(this, 'firstObject');\n      Ember.propertyDidChange(this, 'firstObject');\n    }\n    if (this.objectAt(length-1) !== cachedLast) {\n      Ember.propertyWillChange(this, 'lastObject');\n      Ember.propertyDidChange(this, 'lastObject');\n    }\n\n    return this;\n  }", "language": "javascript", "code": "function(startIdx, removeAmt, addAmt) {\n\n    // if no args are passed assume everything changes\n    if (startIdx===undefined) {\n      startIdx = 0;\n      removeAmt = addAmt = -1;\n    } else {\n      if (removeAmt === undefined) removeAmt=-1;\n      if (addAmt    === undefined) addAmt=-1;\n    }\n\n    var adding, lim;\n    if (startIdx>=0 && addAmt>=0 && get(this, 'hasEnumerableObservers')) {\n      adding = [];\n      lim = startIdx+addAmt;\n      for(var idx=startIdx;idx<lim;idx++) adding.push(this.objectAt(idx));\n    } else {\n      adding = addAmt;\n    }\n\n    this.enumerableContentDidChange(removeAmt, adding);\n    Ember.sendEvent(this, '@array:change', [this, startIdx, removeAmt, addAmt]);\n\n    var length      = get(this, 'length'),\n        cachedFirst = cacheFor(this, 'firstObject'),\n        cachedLast  = cacheFor(this, 'lastObject');\n    if (this.objectAt(0) !== cachedFirst) {\n      Ember.propertyWillChange(this, 'firstObject');\n      Ember.propertyDidChange(this, 'firstObject');\n    }\n    if (this.objectAt(length-1) !== cachedLast) {\n      Ember.propertyWillChange(this, 'lastObject');\n      Ember.propertyDidChange(this, 'lastObject');\n    }\n\n    return this;\n  }", "code_tokens": ["function", "(", "startIdx", ",", "removeAmt", ",", "addAmt", ")", "{", "// if no args are passed assume everything changes", "if", "(", "startIdx", "===", "undefined", ")", "{", "startIdx", "=", "0", ";", "removeAmt", "=", "addAmt", "=", "-", "1", ";", "}", "else", "{", "if", "(", "removeAmt", "===", "undefined", ")", "removeAmt", "=", "-", "1", ";", "if", "(", "addAmt", "===", "undefined", ")", "addAmt", "=", "-", "1", ";", "}", "var", "adding", ",", "lim", ";", "if", "(", "startIdx", ">=", "0", "&&", "addAmt", ">=", "0", "&&", "get", "(", "this", ",", "'hasEnumerableObservers'", ")", ")", "{", "adding", "=", "[", "]", ";", "lim", "=", "startIdx", "+", "addAmt", ";", "for", "(", "var", "idx", "=", "startIdx", ";", "idx", "<", "lim", ";", "idx", "++", ")", "adding", ".", "push", "(", "this", ".", "objectAt", "(", "idx", ")", ")", ";", "}", "else", "{", "adding", "=", "addAmt", ";", "}", "this", ".", "enumerableContentDidChange", "(", "removeAmt", ",", "adding", ")", ";", "Ember", ".", "sendEvent", "(", "this", ",", "'@array:change'", ",", "[", "this", ",", "startIdx", ",", "removeAmt", ",", "addAmt", "]", ")", ";", "var", "length", "=", "get", "(", "this", ",", "'length'", ")", ",", "cachedFirst", "=", "cacheFor", "(", "this", ",", "'firstObject'", ")", ",", "cachedLast", "=", "cacheFor", "(", "this", ",", "'lastObject'", ")", ";", "if", "(", "this", ".", "objectAt", "(", "0", ")", "!==", "cachedFirst", ")", "{", "Ember", ".", "propertyWillChange", "(", "this", ",", "'firstObject'", ")", ";", "Ember", ".", "propertyDidChange", "(", "this", ",", "'firstObject'", ")", ";", "}", "if", "(", "this", ".", "objectAt", "(", "length", "-", "1", ")", "!==", "cachedLast", ")", "{", "Ember", ".", "propertyWillChange", "(", "this", ",", "'lastObject'", ")", ";", "Ember", ".", "propertyDidChange", "(", "this", ",", "'lastObject'", ")", ";", "}", "return", "this", ";", "}"], "docstring": "If you are implementing an object that supports `Ember.Array`, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\n\n@method arrayContentDidChange\n@param {Number} startIdx The starting index in the array that did change.\n@param {Number} removeAmt The number of items that were removed. If you\npass `null` assumes 0\n@param {Number} addAmt The number of items that were added. If you\npass `null` assumes 0.\n@return {Ember.Array} receiver", "docstring_tokens": ["If", "you", "are", "implementing", "an", "object", "that", "supports", "Ember", ".", "Array", "call", "this", "method", "just", "after", "the", "array", "content", "changes", "to", "notify", "any", "observers", "and", "invalidate", "any", "related", "properties", ".", "Pass", "the", "starting", "index", "of", "the", "change", "as", "well", "as", "a", "delta", "of", "the", "amounts", "to", "change", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L15344-L15380", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function (index) {\n    var newArrayOperation = this._operations[index],\n        leftArrayOperation = this._operations[index-1], // may be undefined\n        rightArrayOperation = this._operations[index+1], // may be undefined\n        leftOp = leftArrayOperation && leftArrayOperation.type,\n        rightOp = rightArrayOperation && rightArrayOperation.type;\n\n    if (leftOp === INSERT) {\n        // merge left\n        leftArrayOperation.count += newArrayOperation.count;\n        leftArrayOperation.items = leftArrayOperation.items.concat(newArrayOperation.items);\n\n      if (rightOp === INSERT) {\n        // also merge right (we have split an insert with an insert)\n        leftArrayOperation.count += rightArrayOperation.count;\n        leftArrayOperation.items = leftArrayOperation.items.concat(rightArrayOperation.items);\n        this._operations.splice(index, 2);\n      } else {\n        // only merge left\n        this._operations.splice(index, 1);\n      }\n    } else if (rightOp === INSERT) {\n      // merge right\n      newArrayOperation.count += rightArrayOperation.count;\n      newArrayOperation.items = newArrayOperation.items.concat(rightArrayOperation.items);\n      this._operations.splice(index + 1, 1);\n    }\n  }", "language": "javascript", "code": "function (index) {\n    var newArrayOperation = this._operations[index],\n        leftArrayOperation = this._operations[index-1], // may be undefined\n        rightArrayOperation = this._operations[index+1], // may be undefined\n        leftOp = leftArrayOperation && leftArrayOperation.type,\n        rightOp = rightArrayOperation && rightArrayOperation.type;\n\n    if (leftOp === INSERT) {\n        // merge left\n        leftArrayOperation.count += newArrayOperation.count;\n        leftArrayOperation.items = leftArrayOperation.items.concat(newArrayOperation.items);\n\n      if (rightOp === INSERT) {\n        // also merge right (we have split an insert with an insert)\n        leftArrayOperation.count += rightArrayOperation.count;\n        leftArrayOperation.items = leftArrayOperation.items.concat(rightArrayOperation.items);\n        this._operations.splice(index, 2);\n      } else {\n        // only merge left\n        this._operations.splice(index, 1);\n      }\n    } else if (rightOp === INSERT) {\n      // merge right\n      newArrayOperation.count += rightArrayOperation.count;\n      newArrayOperation.items = newArrayOperation.items.concat(rightArrayOperation.items);\n      this._operations.splice(index + 1, 1);\n    }\n  }", "code_tokens": ["function", "(", "index", ")", "{", "var", "newArrayOperation", "=", "this", ".", "_operations", "[", "index", "]", ",", "leftArrayOperation", "=", "this", ".", "_operations", "[", "index", "-", "1", "]", ",", "// may be undefined", "rightArrayOperation", "=", "this", ".", "_operations", "[", "index", "+", "1", "]", ",", "// may be undefined", "leftOp", "=", "leftArrayOperation", "&&", "leftArrayOperation", ".", "type", ",", "rightOp", "=", "rightArrayOperation", "&&", "rightArrayOperation", ".", "type", ";", "if", "(", "leftOp", "===", "INSERT", ")", "{", "// merge left", "leftArrayOperation", ".", "count", "+=", "newArrayOperation", ".", "count", ";", "leftArrayOperation", ".", "items", "=", "leftArrayOperation", ".", "items", ".", "concat", "(", "newArrayOperation", ".", "items", ")", ";", "if", "(", "rightOp", "===", "INSERT", ")", "{", "// also merge right (we have split an insert with an insert)", "leftArrayOperation", ".", "count", "+=", "rightArrayOperation", ".", "count", ";", "leftArrayOperation", ".", "items", "=", "leftArrayOperation", ".", "items", ".", "concat", "(", "rightArrayOperation", ".", "items", ")", ";", "this", ".", "_operations", ".", "splice", "(", "index", ",", "2", ")", ";", "}", "else", "{", "// only merge left", "this", ".", "_operations", ".", "splice", "(", "index", ",", "1", ")", ";", "}", "}", "else", "if", "(", "rightOp", "===", "INSERT", ")", "{", "// merge right", "newArrayOperation", ".", "count", "+=", "rightArrayOperation", ".", "count", ";", "newArrayOperation", ".", "items", "=", "newArrayOperation", ".", "items", ".", "concat", "(", "rightArrayOperation", ".", "items", ")", ";", "this", ".", "_operations", ".", "splice", "(", "index", "+", "1", ",", "1", ")", ";", "}", "}"], "docstring": "see SubArray for a better implementation.", "docstring_tokens": ["see", "SubArray", "for", "a", "better", "implementation", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L19095-L19122", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "ArrayOperation", "original_string": "function ArrayOperation (operation, count, items) {\n  this.type = operation; // RETAIN | INSERT | DELETE\n  this.count = count;\n  this.items = items;\n}", "language": "javascript", "code": "function ArrayOperation (operation, count, items) {\n  this.type = operation; // RETAIN | INSERT | DELETE\n  this.count = count;\n  this.items = items;\n}", "code_tokens": ["function", "ArrayOperation", "(", "operation", ",", "count", ",", "items", ")", "{", "this", ".", "type", "=", "operation", ";", "// RETAIN | INSERT | DELETE", "this", ".", "count", "=", "count", ";", "this", ".", "items", "=", "items", ";", "}"], "docstring": "Internal data structure to represent an array operation.\n\n@method ArrayOperation\n@private\n@param {string} type The type of the operation.  One of\n`Ember.TrackedArray.{RETAIN, INSERT, DELETE}`\n@param {number} count The number of items in this operation.\n@param {array} items The items of the operation, if included.  RETAIN and\nINSERT include their items, DELETE does not.", "docstring_tokens": ["Internal", "data", "structure", "to", "represent", "an", "array", "operation", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L19212-L19216", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "ArrayOperationMatch", "original_string": "function ArrayOperationMatch(operation, index, split, rangeStart) {\n  this.operation = operation;\n  this.index = index;\n  this.split = split;\n  this.rangeStart = rangeStart;\n}", "language": "javascript", "code": "function ArrayOperationMatch(operation, index, split, rangeStart) {\n  this.operation = operation;\n  this.index = index;\n  this.split = split;\n  this.rangeStart = rangeStart;\n}", "code_tokens": ["function", "ArrayOperationMatch", "(", "operation", ",", "index", ",", "split", ",", "rangeStart", ")", "{", "this", ".", "operation", "=", "operation", ";", "this", ".", "index", "=", "index", ";", "this", ".", "split", "=", "split", ";", "this", ".", "rangeStart", "=", "rangeStart", ";", "}"], "docstring": "Internal data structure used to include information when looking up operations\nby item index.\n\n@method ArrayOperationMatch\n@private\n@param {ArrayOperation} operation\n@param {number} index The index of `operation` in the array of operations.\n@param {boolean} split Whether or not the item index searched for would\nrequire a split for a new operation type.\n@param {number} rangeStart The index of the first item in the operation,\nwith respect to the tracked array.  The index of the last item can be computed\nfrom `rangeStart` and `operation.count`.", "docstring_tokens": ["Internal", "data", "structure", "used", "to", "include", "information", "when", "looking", "up", "operations", "by", "item", "index", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L19232-L19237", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(html) {\n      var self;\n\n      if (this instanceof Metamorph) {\n        self = this;\n      } else {\n        self = new K();\n      }\n\n      self.innerHTML = html;\n      var myGuid = 'metamorph-'+(guid++);\n      self.start = myGuid + '-start';\n      self.end = myGuid + '-end';\n\n      return self;\n    }", "language": "javascript", "code": "function(html) {\n      var self;\n\n      if (this instanceof Metamorph) {\n        self = this;\n      } else {\n        self = new K();\n      }\n\n      self.innerHTML = html;\n      var myGuid = 'metamorph-'+(guid++);\n      self.start = myGuid + '-start';\n      self.end = myGuid + '-end';\n\n      return self;\n    }", "code_tokens": ["function", "(", "html", ")", "{", "var", "self", ";", "if", "(", "this", "instanceof", "Metamorph", ")", "{", "self", "=", "this", ";", "}", "else", "{", "self", "=", "new", "K", "(", ")", ";", "}", "self", ".", "innerHTML", "=", "html", ";", "var", "myGuid", "=", "'metamorph-'", "+", "(", "guid", "++", ")", ";", "self", ".", "start", "=", "myGuid", "+", "'-start'", ";", "self", ".", "end", "=", "myGuid", "+", "'-end'", ";", "return", "self", ";", "}"], "docstring": "Constructor that supports either Metamorph('foo') or new Metamorph('foo');  Takes a string of HTML as the argument.", "docstring_tokens": ["Constructor", "that", "supports", "either", "Metamorph", "(", "foo", ")", "or", "new", "Metamorph", "(", "foo", ")", ";", "Takes", "a", "string", "of", "HTML", "as", "the", "argument", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L26584-L26599", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(path, data) {\n    var normalized = Ember.Handlebars.normalizePath(null, path, data);\n    if (normalized.isKeyword) {\n      return 'templateData.keywords.' + path;\n    } else if (Ember.isGlobalPath(path)) {\n      return null;\n    } else if (path === 'this' || path === '') {\n      return '_parentView.context';\n    } else {\n      return '_parentView.context.' + path;\n    }\n  }", "language": "javascript", "code": "function(path, data) {\n    var normalized = Ember.Handlebars.normalizePath(null, path, data);\n    if (normalized.isKeyword) {\n      return 'templateData.keywords.' + path;\n    } else if (Ember.isGlobalPath(path)) {\n      return null;\n    } else if (path === 'this' || path === '') {\n      return '_parentView.context';\n    } else {\n      return '_parentView.context.' + path;\n    }\n  }", "code_tokens": ["function", "(", "path", ",", "data", ")", "{", "var", "normalized", "=", "Ember", ".", "Handlebars", ".", "normalizePath", "(", "null", ",", "path", ",", "data", ")", ";", "if", "(", "normalized", ".", "isKeyword", ")", "{", "return", "'templateData.keywords.'", "+", "path", ";", "}", "else", "if", "(", "Ember", ".", "isGlobalPath", "(", "path", ")", ")", "{", "return", "null", ";", "}", "else", "if", "(", "path", "===", "'this'", "||", "path", "===", "''", ")", "{", "return", "'_parentView.context'", ";", "}", "else", "{", "return", "'_parentView.context.'", "+", "path", ";", "}", "}"], "docstring": "Transform bindings from the current context to a context that can be evaluated within the view. Returns null if the path shouldn't be changed.  TODO: consider the addition of a prefix that would allow this method to return `path`.", "docstring_tokens": ["Transform", "bindings", "from", "the", "current", "context", "to", "a", "context", "that", "can", "be", "evaluated", "within", "the", "view", ".", "Returns", "null", "if", "the", "path", "shouldn", "t", "be", "changed", ".", "TODO", ":", "consider", "the", "addition", "of", "a", "prefix", "that", "would", "allow", "this", "method", "to", "return", "path", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L29321-L29332", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "_addMetamorphCheck", "original_string": "function _addMetamorphCheck() {\n  Ember.Handlebars.EachView.reopen({\n    _checkMetamorph: Ember.on('didInsertElement', function() {\n      Ember.assert(\"The metamorph tags, \" +\n                   this.morph.start + \" and \" + this.morph.end +\n                   \", have different parents.\\nThe browser has fixed your template to output valid HTML (for example, check that you have properly closed all tags and have used a TBODY tag when creating a table with '{{#each}}')\",\n        document.getElementById( this.morph.start ).parentNode ===\n        document.getElementById( this.morph.end ).parentNode\n      );\n    })\n  });\n}", "language": "javascript", "code": "function _addMetamorphCheck() {\n  Ember.Handlebars.EachView.reopen({\n    _checkMetamorph: Ember.on('didInsertElement', function() {\n      Ember.assert(\"The metamorph tags, \" +\n                   this.morph.start + \" and \" + this.morph.end +\n                   \", have different parents.\\nThe browser has fixed your template to output valid HTML (for example, check that you have properly closed all tags and have used a TBODY tag when creating a table with '{{#each}}')\",\n        document.getElementById( this.morph.start ).parentNode ===\n        document.getElementById( this.morph.end ).parentNode\n      );\n    })\n  });\n}", "code_tokens": ["function", "_addMetamorphCheck", "(", ")", "{", "Ember", ".", "Handlebars", ".", "EachView", ".", "reopen", "(", "{", "_checkMetamorph", ":", "Ember", ".", "on", "(", "'didInsertElement'", ",", "function", "(", ")", "{", "Ember", ".", "assert", "(", "\"The metamorph tags, \"", "+", "this", ".", "morph", ".", "start", "+", "\" and \"", "+", "this", ".", "morph", ".", "end", "+", "\", have different parents.\\nThe browser has fixed your template to output valid HTML (for example, check that you have properly closed all tags and have used a TBODY tag when creating a table with '{{#each}}')\"", ",", "document", ".", "getElementById", "(", "this", ".", "morph", ".", "start", ")", ".", "parentNode", "===", "document", ".", "getElementById", "(", "this", ".", "morph", ".", "end", ")", ".", "parentNode", ")", ";", "}", ")", "}", ")", ";", "}"], "docstring": "Defeatureify doesn't seem to like nested functions that need to be removed", "docstring_tokens": ["Defeatureify", "doesn", "t", "seem", "to", "like", "nested", "functions", "that", "need", "to", "be", "removed"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L30063-L30074", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(path) {\n    var state = { path: path };\n\n    get(this, 'history').replaceState(state, null, path);\n\n    // store state if browser doesn't support `history.state`\n    if (!supportsHistoryState) {\n      this._historyState = state;\n    }\n\n    // used for webkit workaround\n    this._previousURL = this.getURL();\n  }", "language": "javascript", "code": "function(path) {\n    var state = { path: path };\n\n    get(this, 'history').replaceState(state, null, path);\n\n    // store state if browser doesn't support `history.state`\n    if (!supportsHistoryState) {\n      this._historyState = state;\n    }\n\n    // used for webkit workaround\n    this._previousURL = this.getURL();\n  }", "code_tokens": ["function", "(", "path", ")", "{", "var", "state", "=", "{", "path", ":", "path", "}", ";", "get", "(", "this", ",", "'history'", ")", ".", "replaceState", "(", "state", ",", "null", ",", "path", ")", ";", "// store state if browser doesn't support `history.state`", "if", "(", "!", "supportsHistoryState", ")", "{", "this", ".", "_historyState", "=", "state", ";", "}", "// used for webkit workaround", "this", ".", "_previousURL", "=", "this", ".", "getURL", "(", ")", ";", "}"], "docstring": "Replaces the current state.\n\n@private\n@method replaceState\n@param path {String}", "docstring_tokens": ["Replaces", "the", "current", "state", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L39647-L39659", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function(callback) {\n    var guid = Ember.guidFor(this),\n        self = this;\n\n    Ember.$(window).on('popstate.ember-location-'+guid, function(e) {\n      // Ignore initial page load popstate event in Chrome\n      if (!popstateFired) {\n        popstateFired = true;\n        if (self.getURL() === self._previousURL) { return; }\n      }\n      callback(self.getURL());\n    });\n  }", "language": "javascript", "code": "function(callback) {\n    var guid = Ember.guidFor(this),\n        self = this;\n\n    Ember.$(window).on('popstate.ember-location-'+guid, function(e) {\n      // Ignore initial page load popstate event in Chrome\n      if (!popstateFired) {\n        popstateFired = true;\n        if (self.getURL() === self._previousURL) { return; }\n      }\n      callback(self.getURL());\n    });\n  }", "code_tokens": ["function", "(", "callback", ")", "{", "var", "guid", "=", "Ember", ".", "guidFor", "(", "this", ")", ",", "self", "=", "this", ";", "Ember", ".", "$", "(", "window", ")", ".", "on", "(", "'popstate.ember-location-'", "+", "guid", ",", "function", "(", "e", ")", "{", "// Ignore initial page load popstate event in Chrome", "if", "(", "!", "popstateFired", ")", "{", "popstateFired", "=", "true", ";", "if", "(", "self", ".", "getURL", "(", ")", "===", "self", ".", "_previousURL", ")", "{", "return", ";", "}", "}", "callback", "(", "self", ".", "getURL", "(", ")", ")", ";", "}", ")", ";", "}"], "docstring": "Register a callback to be invoked whenever the browser\nhistory changes, including using forward and back buttons.\n\n@private\n@method onUpdateURL\n@param callback {Function}", "docstring_tokens": ["Register", "a", "callback", "to", "be", "invoked", "whenever", "the", "browser", "history", "changes", "including", "using", "forward", "and", "back", "buttons", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L39669-L39681", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "", "original_string": "function() {\n    var customEvents = get(this, 'customEvents'),\n        rootElement = get(this, 'rootElement'),\n        dispatcher = this.__container__.lookup('event_dispatcher:main');\n\n    set(this, 'eventDispatcher', dispatcher);\n    dispatcher.setup(customEvents, rootElement);\n  }", "language": "javascript", "code": "function() {\n    var customEvents = get(this, 'customEvents'),\n        rootElement = get(this, 'rootElement'),\n        dispatcher = this.__container__.lookup('event_dispatcher:main');\n\n    set(this, 'eventDispatcher', dispatcher);\n    dispatcher.setup(customEvents, rootElement);\n  }", "code_tokens": ["function", "(", ")", "{", "var", "customEvents", "=", "get", "(", "this", ",", "'customEvents'", ")", ",", "rootElement", "=", "get", "(", "this", ",", "'rootElement'", ")", ",", "dispatcher", "=", "this", ".", "__container__", ".", "lookup", "(", "'event_dispatcher:main'", ")", ";", "set", "(", "this", ",", "'eventDispatcher'", ",", "dispatcher", ")", ";", "dispatcher", ".", "setup", "(", "customEvents", ",", "rootElement", ")", ";", "}"], "docstring": "Setup up the event dispatcher to receive events on the\napplication's `rootElement` with any registered\n`customEvents`.\n\n@private\n@method setupEventDispatcher", "docstring_tokens": ["Setup", "up", "the", "event", "dispatcher", "to", "receive", "events", "on", "the", "application", "s", "rootElement", "with", "any", "registered", "customEvents", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L41252-L41259", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-1.5.1.js", "func_name": "protoWrap", "original_string": "function protoWrap(proto, name, callback, isAsync) {\n  proto[name] = function() {\n    var args = arguments;\n    if (isAsync) {\n      return callback.apply(this, args);\n    } else {\n      return this.then(function() {\n        return callback.apply(this, args);\n      });\n    }\n  };\n}", "language": "javascript", "code": "function protoWrap(proto, name, callback, isAsync) {\n  proto[name] = function() {\n    var args = arguments;\n    if (isAsync) {\n      return callback.apply(this, args);\n    } else {\n      return this.then(function() {\n        return callback.apply(this, args);\n      });\n    }\n  };\n}", "code_tokens": ["function", "protoWrap", "(", "proto", ",", "name", ",", "callback", ",", "isAsync", ")", "{", "proto", "[", "name", "]", "=", "function", "(", ")", "{", "var", "args", "=", "arguments", ";", "if", "(", "isAsync", ")", "{", "return", "callback", ".", "apply", "(", "this", ",", "args", ")", ";", "}", "else", "{", "return", "this", ".", "then", "(", "function", "(", ")", "{", "return", "callback", ".", "apply", "(", "this", ",", "args", ")", ";", "}", ")", ";", "}", "}", ";", "}"], "docstring": "This method is no longer needed But still here for backwards compatibility of helper chaining", "docstring_tokens": ["This", "method", "is", "no", "longer", "needed", "But", "still", "here", "for", "backwards", "compatibility", "of", "helper", "chaining"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-1.5.1.js#L43552-L43563", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/app.js", "func_name": "cleanerEval", "original_string": "function cleanerEval(str, oldConsole) {\n\tvar logArr = [];\n    var console = {\n        log: function(msg) {\n\t\t    logArr.push(msg);\n            oldConsole.log(msg);\n        }\n    };\n\teval(str);\n\treturn logArr;\n}", "language": "javascript", "code": "function cleanerEval(str, oldConsole) {\n\tvar logArr = [];\n    var console = {\n        log: function(msg) {\n\t\t    logArr.push(msg);\n            oldConsole.log(msg);\n        }\n    };\n\teval(str);\n\treturn logArr;\n}", "code_tokens": ["function", "cleanerEval", "(", "str", ",", "oldConsole", ")", "{", "var", "logArr", "=", "[", "]", ";", "var", "console", "=", "{", "log", ":", "function", "(", "msg", ")", "{", "logArr", ".", "push", "(", "msg", ")", ";", "oldConsole", ".", "log", "(", "msg", ")", ";", "}", "}", ";", "eval", "(", "str", ")", ";", "return", "logArr", ";", "}"], "docstring": "returns the log array", "docstring_tokens": ["returns", "the", "log", "array"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/app.js#L2-L12", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "lib/reflect.js", "func_name": "toPropertyDescriptor", "original_string": "function toPropertyDescriptor(obj) {\n  if (Object(obj) !== obj) {\n    throw new TypeError(\"property descriptor should be an Object, given: \"+\n                        obj);\n  }\n  var desc = {};\n  if ('enumerable' in obj) { desc.enumerable = !!obj.enumerable; }\n  if ('configurable' in obj) { desc.configurable = !!obj.configurable; }\n  if ('value' in obj) { desc.value = obj.value; }\n  if ('writable' in obj) { desc.writable = !!obj.writable; }\n  if ('get' in obj) {\n    var getter = obj.get;\n    if (getter !== undefined && typeof getter !== \"function\") {\n      throw new TypeError(\"property descriptor 'get' attribute must be \"+\n                          \"callable or undefined, given: \"+getter);\n    }\n    desc.get = getter;\n  }\n  if ('set' in obj) {\n    var setter = obj.set;\n    if (setter !== undefined && typeof setter !== \"function\") {\n      throw new TypeError(\"property descriptor 'set' attribute must be \"+\n                          \"callable or undefined, given: \"+setter);\n    }\n    desc.set = setter;\n  }\n  if ('get' in desc || 'set' in desc) {\n    if ('value' in desc || 'writable' in desc) {\n      throw new TypeError(\"property descriptor cannot be both a data and an \"+\n                          \"accessor descriptor: \"+obj);\n    }\n  }\n  return desc;\n}", "language": "javascript", "code": "function toPropertyDescriptor(obj) {\n  if (Object(obj) !== obj) {\n    throw new TypeError(\"property descriptor should be an Object, given: \"+\n                        obj);\n  }\n  var desc = {};\n  if ('enumerable' in obj) { desc.enumerable = !!obj.enumerable; }\n  if ('configurable' in obj) { desc.configurable = !!obj.configurable; }\n  if ('value' in obj) { desc.value = obj.value; }\n  if ('writable' in obj) { desc.writable = !!obj.writable; }\n  if ('get' in obj) {\n    var getter = obj.get;\n    if (getter !== undefined && typeof getter !== \"function\") {\n      throw new TypeError(\"property descriptor 'get' attribute must be \"+\n                          \"callable or undefined, given: \"+getter);\n    }\n    desc.get = getter;\n  }\n  if ('set' in obj) {\n    var setter = obj.set;\n    if (setter !== undefined && typeof setter !== \"function\") {\n      throw new TypeError(\"property descriptor 'set' attribute must be \"+\n                          \"callable or undefined, given: \"+setter);\n    }\n    desc.set = setter;\n  }\n  if ('get' in desc || 'set' in desc) {\n    if ('value' in desc || 'writable' in desc) {\n      throw new TypeError(\"property descriptor cannot be both a data and an \"+\n                          \"accessor descriptor: \"+obj);\n    }\n  }\n  return desc;\n}", "code_tokens": ["function", "toPropertyDescriptor", "(", "obj", ")", "{", "if", "(", "Object", "(", "obj", ")", "!==", "obj", ")", "{", "throw", "new", "TypeError", "(", "\"property descriptor should be an Object, given: \"", "+", "obj", ")", ";", "}", "var", "desc", "=", "{", "}", ";", "if", "(", "'enumerable'", "in", "obj", ")", "{", "desc", ".", "enumerable", "=", "!", "!", "obj", ".", "enumerable", ";", "}", "if", "(", "'configurable'", "in", "obj", ")", "{", "desc", ".", "configurable", "=", "!", "!", "obj", ".", "configurable", ";", "}", "if", "(", "'value'", "in", "obj", ")", "{", "desc", ".", "value", "=", "obj", ".", "value", ";", "}", "if", "(", "'writable'", "in", "obj", ")", "{", "desc", ".", "writable", "=", "!", "!", "obj", ".", "writable", ";", "}", "if", "(", "'get'", "in", "obj", ")", "{", "var", "getter", "=", "obj", ".", "get", ";", "if", "(", "getter", "!==", "undefined", "&&", "typeof", "getter", "!==", "\"function\"", ")", "{", "throw", "new", "TypeError", "(", "\"property descriptor 'get' attribute must be \"", "+", "\"callable or undefined, given: \"", "+", "getter", ")", ";", "}", "desc", ".", "get", "=", "getter", ";", "}", "if", "(", "'set'", "in", "obj", ")", "{", "var", "setter", "=", "obj", ".", "set", ";", "if", "(", "setter", "!==", "undefined", "&&", "typeof", "setter", "!==", "\"function\"", ")", "{", "throw", "new", "TypeError", "(", "\"property descriptor 'set' attribute must be \"", "+", "\"callable or undefined, given: \"", "+", "setter", ")", ";", "}", "desc", ".", "set", "=", "setter", ";", "}", "if", "(", "'get'", "in", "desc", "||", "'set'", "in", "desc", ")", "{", "if", "(", "'value'", "in", "desc", "||", "'writable'", "in", "desc", ")", "{", "throw", "new", "TypeError", "(", "\"property descriptor cannot be both a data and an \"", "+", "\"accessor descriptor: \"", "+", "obj", ")", ";", "}", "}", "return", "desc", ";", "}"], "docstring": "Adapted from ES5 section 8.10.5", "docstring_tokens": ["Adapted", "from", "ES5", "section", "8", ".", "10", ".", "5"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/lib/reflect.js#L193-L226", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "lib/reflect.js", "func_name": "normalizeAndCompletePropertyDescriptor", "original_string": "function normalizeAndCompletePropertyDescriptor(attributes) {\n  if (attributes === undefined) { return undefined; }\n  var desc = toCompletePropertyDescriptor(attributes);\n  // Note: no need to call FromPropertyDescriptor(desc), as we represent\n  // \"internal\" property descriptors as proper Objects from the start\n  for (var name in attributes) {\n    if (!isStandardAttribute(name)) {\n      Object.defineProperty(desc, name,\n        { value: attributes[name],\n          writable: true,\n          enumerable: true,\n          configurable: true });\n    }\n  }\n  return desc;\n}", "language": "javascript", "code": "function normalizeAndCompletePropertyDescriptor(attributes) {\n  if (attributes === undefined) { return undefined; }\n  var desc = toCompletePropertyDescriptor(attributes);\n  // Note: no need to call FromPropertyDescriptor(desc), as we represent\n  // \"internal\" property descriptors as proper Objects from the start\n  for (var name in attributes) {\n    if (!isStandardAttribute(name)) {\n      Object.defineProperty(desc, name,\n        { value: attributes[name],\n          writable: true,\n          enumerable: true,\n          configurable: true });\n    }\n  }\n  return desc;\n}", "code_tokens": ["function", "normalizeAndCompletePropertyDescriptor", "(", "attributes", ")", "{", "if", "(", "attributes", "===", "undefined", ")", "{", "return", "undefined", ";", "}", "var", "desc", "=", "toCompletePropertyDescriptor", "(", "attributes", ")", ";", "// Note: no need to call FromPropertyDescriptor(desc), as we represent", "// \"internal\" property descriptors as proper Objects from the start", "for", "(", "var", "name", "in", "attributes", ")", "{", "if", "(", "!", "isStandardAttribute", "(", "name", ")", ")", "{", "Object", ".", "defineProperty", "(", "desc", ",", "name", ",", "{", "value", ":", "attributes", "[", "name", "]", ",", "writable", ":", "true", ",", "enumerable", ":", "true", ",", "configurable", ":", "true", "}", ")", ";", "}", "}", "return", "desc", ";", "}"], "docstring": "Returns a fresh property descriptor that is guaranteed\nto be complete (i.e. contain all the standard attributes).\nAdditionally, any non-standard enumerable properties of\nattributes are copied over to the fresh descriptor.\n\nIf attributes is undefined, returns undefined.\n\nSee also: http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics", "docstring_tokens": ["Returns", "a", "fresh", "property", "descriptor", "that", "is", "guaranteed", "to", "be", "complete", "(", "i", ".", "e", ".", "contain", "all", "the", "standard", "attributes", ")", ".", "Additionally", "any", "non", "-", "standard", "enumerable", "properties", "of", "attributes", "are", "copied", "over", "to", "the", "fresh", "descriptor", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/lib/reflect.js#L298-L313", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "lib/reflect.js", "func_name": "", "original_string": "function() {\n    var trap = this.getTrap(\"isFrozen\");\n    if (trap === undefined) {\n      // default forwarding behavior\n      return Reflect.isFrozen(this.target);\n    }\n\n    var result = trap.call(this.handler, this.target);\n    result = !!result; // coerce to Boolean\n    var state = Object_isFrozen(this.target);\n    if (result !== state) {\n      if (result) {\n        throw new TypeError(\"cannot report unfrozen object as frozen: \"+\n                             this.target);\n      } else {\n        throw new TypeError(\"cannot report frozen object as unfrozen: \"+\n                             this.target);\n      }\n    }\n    return state;\n  }", "language": "javascript", "code": "function() {\n    var trap = this.getTrap(\"isFrozen\");\n    if (trap === undefined) {\n      // default forwarding behavior\n      return Reflect.isFrozen(this.target);\n    }\n\n    var result = trap.call(this.handler, this.target);\n    result = !!result; // coerce to Boolean\n    var state = Object_isFrozen(this.target);\n    if (result !== state) {\n      if (result) {\n        throw new TypeError(\"cannot report unfrozen object as frozen: \"+\n                             this.target);\n      } else {\n        throw new TypeError(\"cannot report frozen object as unfrozen: \"+\n                             this.target);\n      }\n    }\n    return state;\n  }", "code_tokens": ["function", "(", ")", "{", "var", "trap", "=", "this", ".", "getTrap", "(", "\"isFrozen\"", ")", ";", "if", "(", "trap", "===", "undefined", ")", "{", "// default forwarding behavior", "return", "Reflect", ".", "isFrozen", "(", "this", ".", "target", ")", ";", "}", "var", "result", "=", "trap", ".", "call", "(", "this", ".", "handler", ",", "this", ".", "target", ")", ";", "result", "=", "!", "!", "result", ";", "// coerce to Boolean", "var", "state", "=", "Object_isFrozen", "(", "this", ".", "target", ")", ";", "if", "(", "result", "!==", "state", ")", "{", "if", "(", "result", ")", "{", "throw", "new", "TypeError", "(", "\"cannot report unfrozen object as frozen: \"", "+", "this", ".", "target", ")", ";", "}", "else", "{", "throw", "new", "TypeError", "(", "\"cannot report frozen object as unfrozen: \"", "+", "this", ".", "target", ")", ";", "}", "}", "return", "state", ";", "}"], "docstring": "Checks whether the trap result is consistent with the state of the\nwrapped target.", "docstring_tokens": ["Checks", "whether", "the", "trap", "result", "is", "consistent", "with", "the", "state", "of", "the", "wrapped", "target", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/lib/reflect.js#L1368-L1388", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "lib/autoload.js", "func_name": "load", "original_string": "function load(obj) {\n  var name, root;\n  root = typeof global !== \"undefined\" && global !== null ? global : this;\n  for(name in obj) {\n    if(obj.hasOwnProperty(name)) {\n      root[name] = obj[name];\n    }\n  }\n}", "language": "javascript", "code": "function load(obj) {\n  var name, root;\n  root = typeof global !== \"undefined\" && global !== null ? global : this;\n  for(name in obj) {\n    if(obj.hasOwnProperty(name)) {\n      root[name] = obj[name];\n    }\n  }\n}", "code_tokens": ["function", "load", "(", "obj", ")", "{", "var", "name", ",", "root", ";", "root", "=", "typeof", "global", "!==", "\"undefined\"", "&&", "global", "!==", "null", "?", "global", ":", "this", ";", "for", "(", "name", "in", "obj", ")", "{", "if", "(", "obj", ".", "hasOwnProperty", "(", "name", ")", ")", "{", "root", "[", "name", "]", "=", "obj", "[", "name", "]", ";", "}", "}", "}"], "docstring": "load all the contract identifiers into the global scope", "docstring_tokens": ["load", "all", "the", "contract", "identifiers", "into", "the", "global", "scope"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/lib/autoload.js#L2-L10", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(type, data) {\n    type.eachTransformedAttribute(function(key, type) {\n      var transform = this.transformFor(type);\n      data[key] = transform.deserialize(data[key]);\n    }, this);\n\n    return data;\n  }", "language": "javascript", "code": "function(type, data) {\n    type.eachTransformedAttribute(function(key, type) {\n      var transform = this.transformFor(type);\n      data[key] = transform.deserialize(data[key]);\n    }, this);\n\n    return data;\n  }", "code_tokens": ["function", "(", "type", ",", "data", ")", "{", "type", ".", "eachTransformedAttribute", "(", "function", "(", "key", ",", "type", ")", "{", "var", "transform", "=", "this", ".", "transformFor", "(", "type", ")", ";", "data", "[", "key", "]", "=", "transform", ".", "deserialize", "(", "data", "[", "key", "]", ")", ";", "}", ",", "this", ")", ";", "return", "data", ";", "}"], "docstring": "Given a subclass of `DS.Model` and a JSON object this method will\niterate through each attribute of the `DS.Model` and invoke the\n`DS.Transform#deserialize` method on the matching property of the\nJSON object.  This method is typically called after the\nserializer's `normalize` method.\n\n@method applyTransforms\n@private\n@param {subclass of DS.Model} type\n@param {Object} data The data to transform\n@return {Object} data The transformed data object", "docstring_tokens": ["Given", "a", "subclass", "of", "DS", ".", "Model", "and", "a", "JSON", "object", "this", "method", "will", "iterate", "through", "each", "attribute", "of", "the", "DS", ".", "Model", "and", "invoke", "the", "DS", ".", "Transform#deserialize", "method", "on", "the", "matching", "property", "of", "the", "JSON", "object", ".", "This", "method", "is", "typically", "called", "after", "the", "serializer", "s", "normalize", "method", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L147-L154", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(type, query) {\n    type = this.modelFor(type);\n\n    var array = this.recordArrayManager\n      .createAdapterPopulatedRecordArray(type, query);\n\n    var adapter = this.adapterFor(type),\n        promiseLabel = \"DS: Store#findQuery \" + type,\n        resolver = Ember.RSVP.defer(promiseLabel);\n\n    Ember.assert(\"You tried to load a query but you have no adapter (for \" + type + \")\", adapter);\n    Ember.assert(\"You tried to load a query but your adapter does not implement `findQuery`\", adapter.findQuery);\n\n    resolver.resolve(_findQuery(adapter, this, type, query, array));\n\n    return promiseArray(resolver.promise);\n  }", "language": "javascript", "code": "function(type, query) {\n    type = this.modelFor(type);\n\n    var array = this.recordArrayManager\n      .createAdapterPopulatedRecordArray(type, query);\n\n    var adapter = this.adapterFor(type),\n        promiseLabel = \"DS: Store#findQuery \" + type,\n        resolver = Ember.RSVP.defer(promiseLabel);\n\n    Ember.assert(\"You tried to load a query but you have no adapter (for \" + type + \")\", adapter);\n    Ember.assert(\"You tried to load a query but your adapter does not implement `findQuery`\", adapter.findQuery);\n\n    resolver.resolve(_findQuery(adapter, this, type, query, array));\n\n    return promiseArray(resolver.promise);\n  }", "code_tokens": ["function", "(", "type", ",", "query", ")", "{", "type", "=", "this", ".", "modelFor", "(", "type", ")", ";", "var", "array", "=", "this", ".", "recordArrayManager", ".", "createAdapterPopulatedRecordArray", "(", "type", ",", "query", ")", ";", "var", "adapter", "=", "this", ".", "adapterFor", "(", "type", ")", ",", "promiseLabel", "=", "\"DS: Store#findQuery \"", "+", "type", ",", "resolver", "=", "Ember", ".", "RSVP", ".", "defer", "(", "promiseLabel", ")", ";", "Ember", ".", "assert", "(", "\"You tried to load a query but you have no adapter (for \"", "+", "type", "+", "\")\"", ",", "adapter", ")", ";", "Ember", ".", "assert", "(", "\"You tried to load a query but your adapter does not implement `findQuery`\"", ",", "adapter", ".", "findQuery", ")", ";", "resolver", ".", "resolve", "(", "_findQuery", "(", "adapter", ",", "this", ",", "type", ",", "query", ",", "array", ")", ")", ";", "return", "promiseArray", "(", "resolver", ".", "promise", ")", ";", "}"], "docstring": "This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.\n\nExposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.\n\nThis method returns a promise, which is resolved with a `RecordArray`\nonce the server returns.\n\n@method findQuery\n@private\n@param {String or subclass of DS.Model} type\n@param {any} query an opaque query to be used by the adapter\n@return {Promise} promise", "docstring_tokens": ["This", "method", "delegates", "a", "query", "to", "the", "adapter", ".", "This", "is", "the", "one", "place", "where", "adapter", "-", "level", "semantics", "are", "exposed", "to", "the", "application", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L2552-L2568", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(type, metadata) {\n    type = this.modelFor(type);\n\n    Ember.merge(this.typeMapFor(type).metadata, metadata);\n  }", "language": "javascript", "code": "function(type, metadata) {\n    type = this.modelFor(type);\n\n    Ember.merge(this.typeMapFor(type).metadata, metadata);\n  }", "code_tokens": ["function", "(", "type", ",", "metadata", ")", "{", "type", "=", "this", ".", "modelFor", "(", "type", ")", ";", "Ember", ".", "merge", "(", "this", ".", "typeMapFor", "(", "type", ")", ".", "metadata", ",", "metadata", ")", ";", "}"], "docstring": "If you have some metadata to set for a type\nyou can call `metaForType`.\n\n@method metaForType\n@param {String or subclass of DS.Model} type\n@param {Object} metadata", "docstring_tokens": ["If", "you", "have", "some", "metadata", "to", "set", "for", "a", "type", "you", "can", "call", "metaForType", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L3143-L3147", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "deepClone", "original_string": "function deepClone(object) {\n  var clone = {}, value;\n\n  for (var prop in object) {\n    value = object[prop];\n    if (value && typeof value === 'object') {\n      clone[prop] = deepClone(value);\n    } else {\n      clone[prop] = value;\n    }\n  }\n\n  return clone;\n}", "language": "javascript", "code": "function deepClone(object) {\n  var clone = {}, value;\n\n  for (var prop in object) {\n    value = object[prop];\n    if (value && typeof value === 'object') {\n      clone[prop] = deepClone(value);\n    } else {\n      clone[prop] = value;\n    }\n  }\n\n  return clone;\n}", "code_tokens": ["function", "deepClone", "(", "object", ")", "{", "var", "clone", "=", "{", "}", ",", "value", ";", "for", "(", "var", "prop", "in", "object", ")", "{", "value", "=", "object", "[", "prop", "]", ";", "if", "(", "value", "&&", "typeof", "value", "===", "'object'", ")", "{", "clone", "[", "prop", "]", "=", "deepClone", "(", "value", ")", ";", "}", "else", "{", "clone", "[", "prop", "]", "=", "value", ";", "}", "}", "return", "clone", ";", "}"], "docstring": "The created and updated states are created outside the state chart so we can reopen their substates and add mixins as necessary.", "docstring_tokens": ["The", "created", "and", "updated", "states", "are", "created", "outside", "the", "state", "chart", "so", "we", "can", "reopen", "their", "substates", "and", "add", "mixins", "as", "necessary", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L3960-L3973", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function() {\n    set(this, 'isReloading', true);\n\n    var  record = this;\n\n    var promiseLabel = \"DS: Model#reload of \" + this;\n    var promise = new Ember.RSVP.Promise(function(resolve){\n       record.send('reloadRecord', resolve);\n    }, promiseLabel).then(function() {\n      record.set('isReloading', false);\n      record.set('isError', false);\n      return record;\n    }, function(reason) {\n      record.set('isError', true);\n      throw reason;\n    }, \"DS: Model#reload complete, update flags\");\n\n    return DS.PromiseObject.create({ promise: promise });\n  }", "language": "javascript", "code": "function() {\n    set(this, 'isReloading', true);\n\n    var  record = this;\n\n    var promiseLabel = \"DS: Model#reload of \" + this;\n    var promise = new Ember.RSVP.Promise(function(resolve){\n       record.send('reloadRecord', resolve);\n    }, promiseLabel).then(function() {\n      record.set('isReloading', false);\n      record.set('isError', false);\n      return record;\n    }, function(reason) {\n      record.set('isError', true);\n      throw reason;\n    }, \"DS: Model#reload complete, update flags\");\n\n    return DS.PromiseObject.create({ promise: promise });\n  }", "code_tokens": ["function", "(", ")", "{", "set", "(", "this", ",", "'isReloading'", ",", "true", ")", ";", "var", "record", "=", "this", ";", "var", "promiseLabel", "=", "\"DS: Model#reload of \"", "+", "this", ";", "var", "promise", "=", "new", "Ember", ".", "RSVP", ".", "Promise", "(", "function", "(", "resolve", ")", "{", "record", ".", "send", "(", "'reloadRecord'", ",", "resolve", ")", ";", "}", ",", "promiseLabel", ")", ".", "then", "(", "function", "(", ")", "{", "record", ".", "set", "(", "'isReloading'", ",", "false", ")", ";", "record", ".", "set", "(", "'isError'", ",", "false", ")", ";", "return", "record", ";", "}", ",", "function", "(", "reason", ")", "{", "record", ".", "set", "(", "'isError'", ",", "true", ")", ";", "throw", "reason", ";", "}", ",", "\"DS: Model#reload complete, update flags\"", ")", ";", "return", "DS", ".", "PromiseObject", ".", "create", "(", "{", "promise", ":", "promise", "}", ")", ";", "}"], "docstring": "Reload the record from the adapter.\n\nThis will only work if the record has already finished loading\nand has not yet been modified (`isLoaded` but not `isDirty`,\nor `isSaving`).\n\nExample\n\n```javascript\nApp.ModelViewRoute = Ember.Route.extend({\nactions: {\nreload: function() {\nthis.get('model').reload();\n}\n}\n});\n```\n\n@method reload\n@return {Promise} a promise that will be resolved with the record when the\nadapter returns successfully or rejected if the adapter returns\nwith an error.", "docstring_tokens": ["Reload", "the", "record", "from", "the", "adapter", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L5404-L5422", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(store, type, record) {\n    return store.serializerFor(type).serialize(record, { includeId: true });\n  }", "language": "javascript", "code": "function(store, type, record) {\n    return store.serializerFor(type).serialize(record, { includeId: true });\n  }", "code_tokens": ["function", "(", "store", ",", "type", ",", "record", ")", "{", "return", "store", ".", "serializerFor", "(", "type", ")", ".", "serialize", "(", "record", ",", "{", "includeId", ":", "true", "}", ")", ";", "}"], "docstring": "Implement this method in order to provide json for CRUD methods\n\n@method mockJSON\n@param {Subclass of DS.Model} type\n@param {DS.Model} record", "docstring_tokens": ["Implement", "this", "method", "in", "order", "to", "provide", "json", "for", "CRUD", "methods"], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L7980-L7982", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(store, type, ids) {\n    return this.ajax(this.buildURL(type.typeKey), 'GET', { data: { ids: ids } });\n  }", "language": "javascript", "code": "function(store, type, ids) {\n    return this.ajax(this.buildURL(type.typeKey), 'GET', { data: { ids: ids } });\n  }", "code_tokens": ["function", "(", "store", ",", "type", ",", "ids", ")", "{", "return", "this", ".", "ajax", "(", "this", ".", "buildURL", "(", "type", ".", "typeKey", ")", ",", "'GET'", ",", "{", "data", ":", "{", "ids", ":", "ids", "}", "}", ")", ";", "}"], "docstring": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a has-many relationship that were originally\nspecified as IDs.\n\nFor example, if the original payload looks like:\n\n```js\n{\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"comments\": [ 1, 2, 3 ]\n}\n```\n\nThe IDs will be passed as a URL-encoded Array of IDs, in this form:\n\n```\nids[]=1&ids[]=2&ids[]=3\n```\n\nMany servers, such as Rails and PHP, will automatically convert this URL-encoded array\ninto an Array for you on the server-side. If you want to encode the\nIDs, differently, just override this (one-line) method.\n\nThe `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.\n\n@method findMany\n@param {DS.Store} store\n@param {subclass of DS.Model} type\n@param {Array} ids\n@returns {Promise} promise", "docstring_tokens": ["Called", "by", "the", "store", "in", "order", "to", "fetch", "a", "JSON", "array", "for", "the", "unloaded", "records", "in", "a", "has", "-", "many", "relationship", "that", "were", "originally", "specified", "as", "IDs", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L9266-L9268", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(store, record, url) {\n    var id   = get(record, 'id'),\n        type = record.constructor.typeKey;\n\n    return this.ajax(this.urlPrefix(url, this.buildURL(type, id)), 'GET');\n  }", "language": "javascript", "code": "function(store, record, url) {\n    var id   = get(record, 'id'),\n        type = record.constructor.typeKey;\n\n    return this.ajax(this.urlPrefix(url, this.buildURL(type, id)), 'GET');\n  }", "code_tokens": ["function", "(", "store", ",", "record", ",", "url", ")", "{", "var", "id", "=", "get", "(", "record", ",", "'id'", ")", ",", "type", "=", "record", ".", "constructor", ".", "typeKey", ";", "return", "this", ".", "ajax", "(", "this", ".", "urlPrefix", "(", "url", ",", "this", ".", "buildURL", "(", "type", ",", "id", ")", ")", ",", "'GET'", ")", ";", "}"], "docstring": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a belongs-to relationship that were originally\nspecified as a URL (inside of `links`).\n\nFor example, if your original payload looks like this:\n\n```js\n{\n\"person\": {\n\"id\": 1,\n\"name\": \"Tom Dale\",\n\"links\": { \"group\": \"/people/1/group\" }\n}\n}\n```\n\nThis method will be called with the parent record and `/people/1/group`.\n\nThe `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.\n\n@method findBelongsTo\n@param {DS.Store} store\n@param {DS.Model} record\n@param {String} url\n@returns {Promise} promise", "docstring_tokens": ["Called", "by", "the", "store", "in", "order", "to", "fetch", "a", "JSON", "array", "for", "the", "unloaded", "records", "in", "a", "belongs", "-", "to", "relationship", "that", "were", "originally", "specified", "as", "a", "URL", "(", "inside", "of", "links", ")", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L9338-L9343", "partition": "test"}
{"repo": "disnet/contracts.js", "path": "js/libs/ember-data.js", "func_name": "", "original_string": "function(type) {\n    var decamelized = Ember.String.decamelize(type);\n    return Ember.String.pluralize(decamelized);\n  }", "language": "javascript", "code": "function(type) {\n    var decamelized = Ember.String.decamelize(type);\n    return Ember.String.pluralize(decamelized);\n  }", "code_tokens": ["function", "(", "type", ")", "{", "var", "decamelized", "=", "Ember", ".", "String", ".", "decamelize", "(", "type", ")", ";", "return", "Ember", ".", "String", ".", "pluralize", "(", "decamelized", ")", ";", "}"], "docstring": "The ActiveModelAdapter overrides the `pathForType` method to build\nunderscored URLs by decamelizing and pluralizing the object type name.\n\n```js\nthis.pathForType(\"famousPerson\");\n=> \"famous_people\"\n```\n\n@method pathForType\n@param {String} type\n@returns String", "docstring_tokens": ["The", "ActiveModelAdapter", "overrides", "the", "pathForType", "method", "to", "build", "underscored", "URLs", "by", "decamelizing", "and", "pluralizing", "the", "object", "type", "name", "."], "sha": "3ad1335a8c92597f116d97a6da5b3359ce90fca0", "url": "https://github.com/disnet/contracts.js/blob/3ad1335a8c92597f116d97a6da5b3359ce90fca0/js/libs/ember-data.js#L10478-L10481", "partition": "test"}
