{"repo": "dgraph-io/badger", "path": "dir_unix.go", "func_name": "release", "original_string": "func (guard *directoryLockGuard) release() error {\n\tvar err error\n\tif !guard.readOnly {\n\t\t// It's important that we remove the pid file first.\n\t\terr = os.Remove(guard.path)\n\t}\n\n\tif closeErr := guard.f.Close(); err == nil {\n\t\terr = closeErr\n\t}\n\tguard.path = \"\"\n\tguard.f = nil\n\n\treturn err\n}", "language": "go", "code": "func (guard *directoryLockGuard) release() error {\n\tvar err error\n\tif !guard.readOnly {\n\t\t// It's important that we remove the pid file first.\n\t\terr = os.Remove(guard.path)\n\t}\n\n\tif closeErr := guard.f.Close(); err == nil {\n\t\terr = closeErr\n\t}\n\tguard.path = \"\"\n\tguard.f = nil\n\n\treturn err\n}", "code_tokens": ["func", "(", "guard", "*", "directoryLockGuard", ")", "release", "(", ")", "error", "{", "var", "err", "error", "\n", "if", "!", "guard", ".", "readOnly", "{", "// It's important that we remove the pid file first.", "err", "=", "os", ".", "Remove", "(", "guard", ".", "path", ")", "\n", "}", "\n\n", "if", "closeErr", ":=", "guard", ".", "f", ".", "Close", "(", ")", ";", "err", "==", "nil", "{", "err", "=", "closeErr", "\n", "}", "\n", "guard", ".", "path", "=", "\"", "\"", "\n", "guard", ".", "f", "=", "nil", "\n\n", "return", "err", "\n", "}"], "docstring": "// Release deletes the pid file and releases our lock on the directory.", "docstring_tokens": ["Release", "deletes", "the", "pid", "file", "and", "releases", "our", "lock", "on", "the", "directory", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/dir_unix.go#L83-L97", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "y/iterator.go", "func_name": "Close", "original_string": "func (s *MergeIterator) Close() error {\n\tfor _, itr := range s.all {\n\t\tif err := itr.Close(); err != nil {\n\t\t\treturn errors.Wrap(err, \"MergeIterator\")\n\t\t}\n\t}\n\treturn nil\n}", "language": "go", "code": "func (s *MergeIterator) Close() error {\n\tfor _, itr := range s.all {\n\t\tif err := itr.Close(); err != nil {\n\t\t\treturn errors.Wrap(err, \"MergeIterator\")\n\t\t}\n\t}\n\treturn nil\n}", "code_tokens": ["func", "(", "s", "*", "MergeIterator", ")", "Close", "(", ")", "error", "{", "for", "_", ",", "itr", ":=", "range", "s", ".", "all", "{", "if", "err", ":=", "itr", ".", "Close", "(", ")", ";", "err", "!=", "nil", "{", "return", "errors", ".", "Wrap", "(", "err", ",", "\"", "\"", ")", "\n", "}", "\n", "}", "\n", "return", "nil", "\n", "}"], "docstring": "// Close implements y.Iterator", "docstring_tokens": ["Close", "implements", "y", ".", "Iterator"], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/y/iterator.go#L257-L264", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "structs.go", "func_name": "encodeEntry", "original_string": "func encodeEntry(e *Entry, buf *bytes.Buffer) (int, error) {\n\th := header{\n\t\tklen:      uint32(len(e.Key)),\n\t\tvlen:      uint32(len(e.Value)),\n\t\texpiresAt: e.ExpiresAt,\n\t\tmeta:      e.meta,\n\t\tuserMeta:  e.UserMeta,\n\t}\n\n\tvar headerEnc [headerBufSize]byte\n\th.Encode(headerEnc[:])\n\n\thash := crc32.New(y.CastagnoliCrcTable)\n\n\tbuf.Write(headerEnc[:])\n\thash.Write(headerEnc[:])\n\n\tbuf.Write(e.Key)\n\thash.Write(e.Key)\n\n\tbuf.Write(e.Value)\n\thash.Write(e.Value)\n\n\tvar crcBuf [crc32.Size]byte\n\tbinary.BigEndian.PutUint32(crcBuf[:], hash.Sum32())\n\tbuf.Write(crcBuf[:])\n\n\treturn len(headerEnc) + len(e.Key) + len(e.Value) + len(crcBuf), nil\n}", "language": "go", "code": "func encodeEntry(e *Entry, buf *bytes.Buffer) (int, error) {\n\th := header{\n\t\tklen:      uint32(len(e.Key)),\n\t\tvlen:      uint32(len(e.Value)),\n\t\texpiresAt: e.ExpiresAt,\n\t\tmeta:      e.meta,\n\t\tuserMeta:  e.UserMeta,\n\t}\n\n\tvar headerEnc [headerBufSize]byte\n\th.Encode(headerEnc[:])\n\n\thash := crc32.New(y.CastagnoliCrcTable)\n\n\tbuf.Write(headerEnc[:])\n\thash.Write(headerEnc[:])\n\n\tbuf.Write(e.Key)\n\thash.Write(e.Key)\n\n\tbuf.Write(e.Value)\n\thash.Write(e.Value)\n\n\tvar crcBuf [crc32.Size]byte\n\tbinary.BigEndian.PutUint32(crcBuf[:], hash.Sum32())\n\tbuf.Write(crcBuf[:])\n\n\treturn len(headerEnc) + len(e.Key) + len(e.Value) + len(crcBuf), nil\n}", "code_tokens": ["func", "encodeEntry", "(", "e", "*", "Entry", ",", "buf", "*", "bytes", ".", "Buffer", ")", "(", "int", ",", "error", ")", "{", "h", ":=", "header", "{", "klen", ":", "uint32", "(", "len", "(", "e", ".", "Key", ")", ")", ",", "vlen", ":", "uint32", "(", "len", "(", "e", ".", "Value", ")", ")", ",", "expiresAt", ":", "e", ".", "ExpiresAt", ",", "meta", ":", "e", ".", "meta", ",", "userMeta", ":", "e", ".", "UserMeta", ",", "}", "\n\n", "var", "headerEnc", "[", "headerBufSize", "]", "byte", "\n", "h", ".", "Encode", "(", "headerEnc", "[", ":", "]", ")", "\n\n", "hash", ":=", "crc32", ".", "New", "(", "y", ".", "CastagnoliCrcTable", ")", "\n\n", "buf", ".", "Write", "(", "headerEnc", "[", ":", "]", ")", "\n", "hash", ".", "Write", "(", "headerEnc", "[", ":", "]", ")", "\n\n", "buf", ".", "Write", "(", "e", ".", "Key", ")", "\n", "hash", ".", "Write", "(", "e", ".", "Key", ")", "\n\n", "buf", ".", "Write", "(", "e", ".", "Value", ")", "\n", "hash", ".", "Write", "(", "e", ".", "Value", ")", "\n\n", "var", "crcBuf", "[", "crc32", ".", "Size", "]", "byte", "\n", "binary", ".", "BigEndian", ".", "PutUint32", "(", "crcBuf", "[", ":", "]", ",", "hash", ".", "Sum32", "(", ")", ")", "\n", "buf", ".", "Write", "(", "crcBuf", "[", ":", "]", ")", "\n\n", "return", "len", "(", "headerEnc", ")", "+", "len", "(", "e", ".", "Key", ")", "+", "len", "(", "e", ".", "Value", ")", "+", "len", "(", "crcBuf", ")", ",", "nil", "\n", "}"], "docstring": "// Encodes e to buf. Returns number of bytes written.", "docstring_tokens": ["Encodes", "e", "to", "buf", ".", "Returns", "number", "of", "bytes", "written", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/structs.go#L99-L127", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "batch.go", "func_name": "Error", "original_string": "func (wb *WriteBatch) Error() error {\n\twb.Lock()\n\tdefer wb.Unlock()\n\treturn wb.err\n}", "language": "go", "code": "func (wb *WriteBatch) Error() error {\n\twb.Lock()\n\tdefer wb.Unlock()\n\treturn wb.err\n}", "code_tokens": ["func", "(", "wb", "*", "WriteBatch", ")", "Error", "(", ")", "error", "{", "wb", ".", "Lock", "(", ")", "\n", "defer", "wb", ".", "Unlock", "(", ")", "\n", "return", "wb", ".", "err", "\n", "}"], "docstring": "// Error returns any errors encountered so far. No commits would be run once an error is detected.", "docstring_tokens": ["Error", "returns", "any", "errors", "encountered", "so", "far", ".", "No", "commits", "would", "be", "run", "once", "an", "error", "is", "detected", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/batch.go#L157-L161", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "db.go", "func_name": "DropPrefix", "original_string": "func (db *DB) DropPrefix(prefix []byte) error {\n\tdb.opt.Infof(\"DropPrefix called on %s. Blocking writes...\", hex.Dump(prefix))\n\tf := db.prepareToDrop()\n\tdefer f()\n\n\t// Block all foreign interactions with memory tables.\n\tdb.Lock()\n\tdefer db.Unlock()\n\n\tdb.imm = append(db.imm, db.mt)\n\tfor _, memtable := range db.imm {\n\t\tif memtable.Empty() {\n\t\t\tmemtable.DecrRef()\n\t\t\tcontinue\n\t\t}\n\t\ttask := flushTask{\n\t\t\tmt: memtable,\n\t\t\t// Ensure that the head of value log gets persisted to disk.\n\t\t\tvptr:       db.vhead,\n\t\t\tdropPrefix: prefix,\n\t\t}\n\t\tdb.opt.Debugf(\"Flushing memtable\")\n\t\tif err := db.handleFlushTask(task); err != nil {\n\t\t\tdb.opt.Errorf(\"While trying to flush memtable: %v\", err)\n\t\t\treturn err\n\t\t}\n\t\tmemtable.DecrRef()\n\t}\n\tdb.imm = db.imm[:0]\n\tdb.mt = skl.NewSkiplist(arenaSize(db.opt))\n\n\t// Drop prefixes from the levels.\n\tif err := db.lc.dropPrefix(prefix); err != nil {\n\t\treturn err\n\t}\n\tdb.opt.Infof(\"DropPrefix done\")\n\treturn nil\n}", "language": "go", "code": "func (db *DB) DropPrefix(prefix []byte) error {\n\tdb.opt.Infof(\"DropPrefix called on %s. Blocking writes...\", hex.Dump(prefix))\n\tf := db.prepareToDrop()\n\tdefer f()\n\n\t// Block all foreign interactions with memory tables.\n\tdb.Lock()\n\tdefer db.Unlock()\n\n\tdb.imm = append(db.imm, db.mt)\n\tfor _, memtable := range db.imm {\n\t\tif memtable.Empty() {\n\t\t\tmemtable.DecrRef()\n\t\t\tcontinue\n\t\t}\n\t\ttask := flushTask{\n\t\t\tmt: memtable,\n\t\t\t// Ensure that the head of value log gets persisted to disk.\n\t\t\tvptr:       db.vhead,\n\t\t\tdropPrefix: prefix,\n\t\t}\n\t\tdb.opt.Debugf(\"Flushing memtable\")\n\t\tif err := db.handleFlushTask(task); err != nil {\n\t\t\tdb.opt.Errorf(\"While trying to flush memtable: %v\", err)\n\t\t\treturn err\n\t\t}\n\t\tmemtable.DecrRef()\n\t}\n\tdb.imm = db.imm[:0]\n\tdb.mt = skl.NewSkiplist(arenaSize(db.opt))\n\n\t// Drop prefixes from the levels.\n\tif err := db.lc.dropPrefix(prefix); err != nil {\n\t\treturn err\n\t}\n\tdb.opt.Infof(\"DropPrefix done\")\n\treturn nil\n}", "code_tokens": ["func", "(", "db", "*", "DB", ")", "DropPrefix", "(", "prefix", "[", "]", "byte", ")", "error", "{", "db", ".", "opt", ".", "Infof", "(", "\"", "\"", ",", "hex", ".", "Dump", "(", "prefix", ")", ")", "\n", "f", ":=", "db", ".", "prepareToDrop", "(", ")", "\n", "defer", "f", "(", ")", "\n\n", "// Block all foreign interactions with memory tables.", "db", ".", "Lock", "(", ")", "\n", "defer", "db", ".", "Unlock", "(", ")", "\n\n", "db", ".", "imm", "=", "append", "(", "db", ".", "imm", ",", "db", ".", "mt", ")", "\n", "for", "_", ",", "memtable", ":=", "range", "db", ".", "imm", "{", "if", "memtable", ".", "Empty", "(", ")", "{", "memtable", ".", "DecrRef", "(", ")", "\n", "continue", "\n", "}", "\n", "task", ":=", "flushTask", "{", "mt", ":", "memtable", ",", "// Ensure that the head of value log gets persisted to disk.", "vptr", ":", "db", ".", "vhead", ",", "dropPrefix", ":", "prefix", ",", "}", "\n", "db", ".", "opt", ".", "Debugf", "(", "\"", "\"", ")", "\n", "if", "err", ":=", "db", ".", "handleFlushTask", "(", "task", ")", ";", "err", "!=", "nil", "{", "db", ".", "opt", ".", "Errorf", "(", "\"", "\"", ",", "err", ")", "\n", "return", "err", "\n", "}", "\n", "memtable", ".", "DecrRef", "(", ")", "\n", "}", "\n", "db", ".", "imm", "=", "db", ".", "imm", "[", ":", "0", "]", "\n", "db", ".", "mt", "=", "skl", ".", "NewSkiplist", "(", "arenaSize", "(", "db", ".", "opt", ")", ")", "\n\n", "// Drop prefixes from the levels.", "if", "err", ":=", "db", ".", "lc", ".", "dropPrefix", "(", "prefix", ")", ";", "err", "!=", "nil", "{", "return", "err", "\n", "}", "\n", "db", ".", "opt", ".", "Infof", "(", "\"", "\"", ")", "\n", "return", "nil", "\n", "}"], "docstring": "// DropPrefix would drop all the keys with the provided prefix. It does this in the following way:\n// - Stop accepting new writes.\n// - Stop memtable flushes and compactions.\n// - Flush out all memtables, skipping over keys with the given prefix, Kp.\n// - Write out the value log header to memtables when flushing, so we don't accidentally bring Kp\n//   back after a restart.\n// - Compact L0->L1, skipping over Kp.\n// - Compact rest of the levels, Li->Li, picking tables which have Kp.\n// - Resume memtable flushes, compactions and writes.", "docstring_tokens": ["DropPrefix", "would", "drop", "all", "the", "keys", "with", "the", "provided", "prefix", ".", "It", "does", "this", "in", "the", "following", "way", ":", "-", "Stop", "accepting", "new", "writes", ".", "-", "Stop", "memtable", "flushes", "and", "compactions", ".", "-", "Flush", "out", "all", "memtables", "skipping", "over", "keys", "with", "the", "given", "prefix", "Kp", ".", "-", "Write", "out", "the", "value", "log", "header", "to", "memtables", "when", "flushing", "so", "we", "don", "t", "accidentally", "bring", "Kp", "back", "after", "a", "restart", ".", "-", "Compact", "L0", "-", ">", "L1", "skipping", "over", "Kp", ".", "-", "Compact", "rest", "of", "the", "levels", "Li", "-", ">", "Li", "picking", "tables", "which", "have", "Kp", ".", "-", "Resume", "memtable", "flushes", "compactions", "and", "writes", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/db.go#L1336-L1373", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "y/mmap_unix.go", "func_name": "Madvise", "original_string": "func Madvise(b []byte, readahead bool) error {\n\tflags := unix.MADV_NORMAL\n\tif !readahead {\n\t\tflags = unix.MADV_RANDOM\n\t}\n\treturn madvise(b, flags)\n}", "language": "go", "code": "func Madvise(b []byte, readahead bool) error {\n\tflags := unix.MADV_NORMAL\n\tif !readahead {\n\t\tflags = unix.MADV_RANDOM\n\t}\n\treturn madvise(b, flags)\n}", "code_tokens": ["func", "Madvise", "(", "b", "[", "]", "byte", ",", "readahead", "bool", ")", "error", "{", "flags", ":=", "unix", ".", "MADV_NORMAL", "\n", "if", "!", "readahead", "{", "flags", "=", "unix", ".", "MADV_RANDOM", "\n", "}", "\n", "return", "madvise", "(", "b", ",", "flags", ")", "\n", "}"], "docstring": "// Madvise uses the madvise system call to give advise about the use of memory\n// when using a slice that is memory-mapped to a file. Set the readahead flag to\n// false if page references are expected in random order.", "docstring_tokens": ["Madvise", "uses", "the", "madvise", "system", "call", "to", "give", "advise", "about", "the", "use", "of", "memory", "when", "using", "a", "slice", "that", "is", "memory", "-", "mapped", "to", "a", "file", ".", "Set", "the", "readahead", "flag", "to", "false", "if", "page", "references", "are", "expected", "in", "random", "order", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/y/mmap_unix.go#L47-L53", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "txn.go", "func_name": "View", "original_string": "func (db *DB) View(fn func(txn *Txn) error) error {\n\tvar txn *Txn\n\tif db.opt.managedTxns {\n\t\ttxn = db.NewTransactionAt(math.MaxUint64, false)\n\t} else {\n\t\ttxn = db.NewTransaction(false)\n\t}\n\tdefer txn.Discard()\n\n\treturn fn(txn)\n}", "language": "go", "code": "func (db *DB) View(fn func(txn *Txn) error) error {\n\tvar txn *Txn\n\tif db.opt.managedTxns {\n\t\ttxn = db.NewTransactionAt(math.MaxUint64, false)\n\t} else {\n\t\ttxn = db.NewTransaction(false)\n\t}\n\tdefer txn.Discard()\n\n\treturn fn(txn)\n}", "code_tokens": ["func", "(", "db", "*", "DB", ")", "View", "(", "fn", "func", "(", "txn", "*", "Txn", ")", "error", ")", "error", "{", "var", "txn", "*", "Txn", "\n", "if", "db", ".", "opt", ".", "managedTxns", "{", "txn", "=", "db", ".", "NewTransactionAt", "(", "math", ".", "MaxUint64", ",", "false", ")", "\n", "}", "else", "{", "txn", "=", "db", ".", "NewTransaction", "(", "false", ")", "\n", "}", "\n", "defer", "txn", ".", "Discard", "(", ")", "\n\n", "return", "fn", "(", "txn", ")", "\n", "}"], "docstring": "// View executes a function creating and managing a read-only transaction for the user. Error\n// returned by the function is relayed by the View method.\n// If View is used with managed transactions, it would assume a read timestamp of MaxUint64.", "docstring_tokens": ["View", "executes", "a", "function", "creating", "and", "managing", "a", "read", "-", "only", "transaction", "for", "the", "user", ".", "Error", "returned", "by", "the", "function", "is", "relayed", "by", "the", "View", "method", ".", "If", "View", "is", "used", "with", "managed", "transactions", "it", "would", "assume", "a", "read", "timestamp", "of", "MaxUint64", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/txn.go#L726-L736", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "txn.go", "func_name": "Update", "original_string": "func (db *DB) Update(fn func(txn *Txn) error) error {\n\tif db.opt.managedTxns {\n\t\tpanic(\"Update can only be used with managedDB=false.\")\n\t}\n\ttxn := db.NewTransaction(true)\n\tdefer txn.Discard()\n\n\tif err := fn(txn); err != nil {\n\t\treturn err\n\t}\n\n\treturn txn.Commit()\n}", "language": "go", "code": "func (db *DB) Update(fn func(txn *Txn) error) error {\n\tif db.opt.managedTxns {\n\t\tpanic(\"Update can only be used with managedDB=false.\")\n\t}\n\ttxn := db.NewTransaction(true)\n\tdefer txn.Discard()\n\n\tif err := fn(txn); err != nil {\n\t\treturn err\n\t}\n\n\treturn txn.Commit()\n}", "code_tokens": ["func", "(", "db", "*", "DB", ")", "Update", "(", "fn", "func", "(", "txn", "*", "Txn", ")", "error", ")", "error", "{", "if", "db", ".", "opt", ".", "managedTxns", "{", "panic", "(", "\"", "\"", ")", "\n", "}", "\n", "txn", ":=", "db", ".", "NewTransaction", "(", "true", ")", "\n", "defer", "txn", ".", "Discard", "(", ")", "\n\n", "if", "err", ":=", "fn", "(", "txn", ")", ";", "err", "!=", "nil", "{", "return", "err", "\n", "}", "\n\n", "return", "txn", ".", "Commit", "(", ")", "\n", "}"], "docstring": "// Update executes a function, creating and managing a read-write transaction\n// for the user. Error returned by the function is relayed by the Update method.\n// Update cannot be used with managed transactions.", "docstring_tokens": ["Update", "executes", "a", "function", "creating", "and", "managing", "a", "read", "-", "write", "transaction", "for", "the", "user", ".", "Error", "returned", "by", "the", "function", "is", "relayed", "by", "the", "Update", "method", ".", "Update", "cannot", "be", "used", "with", "managed", "transactions", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/txn.go#L741-L753", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "table/iterator.go", "func_name": "Close", "original_string": "func (s *ConcatIterator) Close() error {\n\tfor _, it := range s.iters {\n\t\tif err := it.Close(); err != nil {\n\t\t\treturn errors.Wrap(err, \"ConcatIterator\")\n\t\t}\n\t}\n\treturn nil\n}", "language": "go", "code": "func (s *ConcatIterator) Close() error {\n\tfor _, it := range s.iters {\n\t\tif err := it.Close(); err != nil {\n\t\t\treturn errors.Wrap(err, \"ConcatIterator\")\n\t\t}\n\t}\n\treturn nil\n}", "code_tokens": ["func", "(", "s", "*", "ConcatIterator", ")", "Close", "(", ")", "error", "{", "for", "_", ",", "it", ":=", "range", "s", ".", "iters", "{", "if", "err", ":=", "it", ".", "Close", "(", ")", ";", "err", "!=", "nil", "{", "return", "errors", ".", "Wrap", "(", "err", ",", "\"", "\"", ")", "\n", "}", "\n", "}", "\n", "return", "nil", "\n", "}"], "docstring": "// Close implements y.Interface.", "docstring_tokens": ["Close", "implements", "y", ".", "Interface", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/table/iterator.go#L532-L539", "partition": "test"}
{"repo": "dgraph-io/badger", "path": "y/y.go", "func_name": "Finish", "original_string": "func (t *Throttle) Finish() error {\n\tt.wg.Wait()\n\tclose(t.ch)\n\tclose(t.errCh)\n\tfor err := range t.errCh {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}", "language": "go", "code": "func (t *Throttle) Finish() error {\n\tt.wg.Wait()\n\tclose(t.ch)\n\tclose(t.errCh)\n\tfor err := range t.errCh {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}", "code_tokens": ["func", "(", "t", "*", "Throttle", ")", "Finish", "(", ")", "error", "{", "t", ".", "wg", ".", "Wait", "(", ")", "\n", "close", "(", "t", ".", "ch", ")", "\n", "close", "(", "t", ".", "errCh", ")", "\n", "for", "err", ":=", "range", "t", ".", "errCh", "{", "if", "err", "!=", "nil", "{", "return", "err", "\n", "}", "\n", "}", "\n", "return", "nil", "\n", "}"], "docstring": "// Finish waits until all workers have finished working. It would return any\n// error passed by Done.", "docstring_tokens": ["Finish", "waits", "until", "all", "workers", "have", "finished", "working", ".", "It", "would", "return", "any", "error", "passed", "by", "Done", "."], "sha": "6b796b3ebec3ff006fcb1b425836cd784651e9fd", "url": "https://github.com/dgraph-io/badger/blob/6b796b3ebec3ff006fcb1b425836cd784651e9fd/y/y.go#L285-L295", "partition": "test"}
