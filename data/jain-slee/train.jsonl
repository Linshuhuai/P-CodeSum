{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/jaxb/descriptors/DeployableUnitDescriptorFactoryImpl.java", "func_name": "DeployableUnitDescriptorFactoryImpl.parse", "original_string": "public DeployableUnitDescriptorImpl parse(InputStream inputStream) throws DeploymentException {\n\t\t\n\t\tObject jaxbPojo = buildJAXBPojo(inputStream);\n\t\t\n\t\tif (jaxbPojo instanceof org.mobicents.slee.container.component.deployment.jaxb.slee11.du.DeployableUnit) {\n\t\t\treturn new DeployableUnitDescriptorImpl((org.mobicents.slee.container.component.deployment.jaxb.slee11.du.DeployableUnit)jaxbPojo);\n\t\t}\n\t\telse if (jaxbPojo instanceof org.mobicents.slee.container.component.deployment.jaxb.slee.du.DeployableUnit) {\n\t\t\treturn  new DeployableUnitDescriptorImpl((org.mobicents.slee.container.component.deployment.jaxb.slee.du.DeployableUnit)jaxbPojo);\n\t\t} \n\t\telse {\n\t\t\tthrow new SLEEException(\"unexpected class of jaxb pojo built: \"+(jaxbPojo != null ? jaxbPojo.getClass() : null));\n\t\t}\n\t}", "language": "java", "code": "public DeployableUnitDescriptorImpl parse(InputStream inputStream) throws DeploymentException {\n\t\t\n\t\tObject jaxbPojo = buildJAXBPojo(inputStream);\n\t\t\n\t\tif (jaxbPojo instanceof org.mobicents.slee.container.component.deployment.jaxb.slee11.du.DeployableUnit) {\n\t\t\treturn new DeployableUnitDescriptorImpl((org.mobicents.slee.container.component.deployment.jaxb.slee11.du.DeployableUnit)jaxbPojo);\n\t\t}\n\t\telse if (jaxbPojo instanceof org.mobicents.slee.container.component.deployment.jaxb.slee.du.DeployableUnit) {\n\t\t\treturn  new DeployableUnitDescriptorImpl((org.mobicents.slee.container.component.deployment.jaxb.slee.du.DeployableUnit)jaxbPojo);\n\t\t} \n\t\telse {\n\t\t\tthrow new SLEEException(\"unexpected class of jaxb pojo built: \"+(jaxbPojo != null ? jaxbPojo.getClass() : null));\n\t\t}\n\t}", "code_tokens": ["public", "DeployableUnitDescriptorImpl", "parse", "(", "InputStream", "inputStream", ")", "throws", "DeploymentException", "{", "Object", "jaxbPojo", "=", "buildJAXBPojo", "(", "inputStream", ")", ";", "if", "(", "jaxbPojo", "instanceof", "org", ".", "mobicents", ".", "slee", ".", "container", ".", "component", ".", "deployment", ".", "jaxb", ".", "slee11", ".", "du", ".", "DeployableUnit", ")", "{", "return", "new", "DeployableUnitDescriptorImpl", "(", "(", "org", ".", "mobicents", ".", "slee", ".", "container", ".", "component", ".", "deployment", ".", "jaxb", ".", "slee11", ".", "du", ".", "DeployableUnit", ")", "jaxbPojo", ")", ";", "}", "else", "if", "(", "jaxbPojo", "instanceof", "org", ".", "mobicents", ".", "slee", ".", "container", ".", "component", ".", "deployment", ".", "jaxb", ".", "slee", ".", "du", ".", "DeployableUnit", ")", "{", "return", "new", "DeployableUnitDescriptorImpl", "(", "(", "org", ".", "mobicents", ".", "slee", ".", "container", ".", "component", ".", "deployment", ".", "jaxb", ".", "slee", ".", "du", ".", "DeployableUnit", ")", "jaxbPojo", ")", ";", "}", "else", "{", "throw", "new", "SLEEException", "(", "\"unexpected class of jaxb pojo built: \"", "+", "(", "jaxbPojo", "!=", "null", "?", "jaxbPojo", ".", "getClass", "(", ")", ":", "null", ")", ")", ";", "}", "}"], "docstring": "/*\n(non-Javadoc)\n@see org.mobicents.slee.core.component.du.DeployableUnitDescriptorFactory#parse(java.io.InputStream)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/jaxb/descriptors/DeployableUnitDescriptorFactoryImpl.java#L43-L56", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java", "func_name": "SleeTransactionImpl.suspendIfAssoaciatedWithThread", "original_string": "private void suspendIfAssoaciatedWithThread() throws SystemException {\n\t\t// if there is a tx associated with this thread and it is this one\n\t\t// then suspend it to dissociate the thread (dumb feature?!?! of jboss ts)\n\t\tfinal SleeTransaction currentThreadTransaction = transactionManager\n\t\t\t\t.getSleeTransaction();\n\t\tif (currentThreadTransaction != null\n\t\t\t\t&& currentThreadTransaction.equals(this)) {\n\t\t\t// lets use the real tx manager directly, to avoid any other procedures\n\t\t\ttransactionManager.getRealTransactionManager().suspend();\n\t\t}\t\t\n\t}", "language": "java", "code": "private void suspendIfAssoaciatedWithThread() throws SystemException {\n\t\t// if there is a tx associated with this thread and it is this one\n\t\t// then suspend it to dissociate the thread (dumb feature?!?! of jboss ts)\n\t\tfinal SleeTransaction currentThreadTransaction = transactionManager\n\t\t\t\t.getSleeTransaction();\n\t\tif (currentThreadTransaction != null\n\t\t\t\t&& currentThreadTransaction.equals(this)) {\n\t\t\t// lets use the real tx manager directly, to avoid any other procedures\n\t\t\ttransactionManager.getRealTransactionManager().suspend();\n\t\t}\t\t\n\t}", "code_tokens": ["private", "void", "suspendIfAssoaciatedWithThread", "(", ")", "throws", "SystemException", "{", "// if there is a tx associated with this thread and it is this one", "// then suspend it to dissociate the thread (dumb feature?!?! of jboss ts)", "final", "SleeTransaction", "currentThreadTransaction", "=", "transactionManager", ".", "getSleeTransaction", "(", ")", ";", "if", "(", "currentThreadTransaction", "!=", "null", "&&", "currentThreadTransaction", ".", "equals", "(", "this", ")", ")", "{", "// lets use the real tx manager directly, to avoid any other procedures", "transactionManager", ".", "getRealTransactionManager", "(", ")", ".", "suspend", "(", ")", ";", "}", "}"], "docstring": "Some operations require that the transaction be suspended\n@throws SystemException", "docstring_tokens": ["Some", "operations", "require", "that", "the", "transaction", "be", "suspended"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java#L108-L118", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java", "func_name": "SleeTransactionImpl.beforeAsyncOperation", "original_string": "private void beforeAsyncOperation() throws IllegalStateException,\n\t\t\tSecurityException {\n\t\ttry {\n\t\t\tint status = transaction.getStatus();\n\t\t\tif (asyncOperationInitiated.getAndSet(true) || (status != Status.STATUS_ACTIVE\n\t\t\t\t\t&& status != Status.STATUS_MARKED_ROLLBACK)) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"There is no active tx, tx is in state: \" + status);\n\t\t\t}\n\t\t\tsuspendIfAssoaciatedWithThread();\n\t\t} catch (SystemException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}", "language": "java", "code": "private void beforeAsyncOperation() throws IllegalStateException,\n\t\t\tSecurityException {\n\t\ttry {\n\t\t\tint status = transaction.getStatus();\n\t\t\tif (asyncOperationInitiated.getAndSet(true) || (status != Status.STATUS_ACTIVE\n\t\t\t\t\t&& status != Status.STATUS_MARKED_ROLLBACK)) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"There is no active tx, tx is in state: \" + status);\n\t\t\t}\n\t\t\tsuspendIfAssoaciatedWithThread();\n\t\t} catch (SystemException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}", "code_tokens": ["private", "void", "beforeAsyncOperation", "(", ")", "throws", "IllegalStateException", ",", "SecurityException", "{", "try", "{", "int", "status", "=", "transaction", ".", "getStatus", "(", ")", ";", "if", "(", "asyncOperationInitiated", ".", "getAndSet", "(", "true", ")", "||", "(", "status", "!=", "Status", ".", "STATUS_ACTIVE", "&&", "status", "!=", "Status", ".", "STATUS_MARKED_ROLLBACK", ")", ")", "{", "throw", "new", "IllegalStateException", "(", "\"There is no active tx, tx is in state: \"", "+", "status", ")", ";", "}", "suspendIfAssoaciatedWithThread", "(", ")", ";", "}", "catch", "(", "SystemException", "e", ")", "{", "throw", "new", "IllegalStateException", "(", "e", ")", ";", "}", "}"], "docstring": "Verifies if the wrapped transaction is active and if dissociates it from\nthe thread if needed\n\n@throws IllegalStateException\n@throws SecurityException", "docstring_tokens": ["Verifies", "if", "the", "wrapped", "transaction", "is", "active", "and", "if", "dissociates", "it", "from", "the", "thread", "if", "needed"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java#L127-L140", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitServiceComponentBuilder.java", "func_name": "DeployableUnitServiceComponentBuilder.buildComponents", "original_string": "public List<ServiceComponentImpl> buildComponents(String serviceDescriptorFileName, JarFile deployableUnitJar) throws DeploymentException {\n    \t\n\t\t// make component jar entry\n\t\tJarEntry componentDescriptor = deployableUnitJar.getJarEntry(serviceDescriptorFileName);\n\t\tInputStream componentDescriptorInputStream = null;\n\t\tList<ServiceComponentImpl> result = new ArrayList<ServiceComponentImpl>();\n    \ttry {\n    \t\tcomponentDescriptorInputStream = deployableUnitJar.getInputStream(componentDescriptor);\n    \t\tServiceDescriptorFactoryImpl descriptorFactory = componentManagement.getComponentDescriptorFactory().getServiceDescriptorFactory();\n    \t\tfor (ServiceDescriptorImpl descriptor : descriptorFactory.parse(componentDescriptorInputStream)) {\n    \t\t\tresult.add(new ServiceComponentImpl(descriptor));\n    \t\t}\n    \t} catch (IOException e) {\n    \t\tthrow new DeploymentException(\"failed to parse service descriptor from \"+componentDescriptor.getName(),e);\n    \t}\n    \tfinally {\n    \t\tif (componentDescriptorInputStream != null) {\n    \t\t\ttry {\n    \t\t\t\tcomponentDescriptorInputStream.close();\n    \t\t\t} catch (IOException e) {\n    \t\t\t\tlogger.error(\"failed to close inputstream of descriptor for jar \"+componentDescriptor.getName());\n    \t\t\t}\n    \t\t}\n    \t}        \n    \treturn result;\n    }", "language": "java", "code": "public List<ServiceComponentImpl> buildComponents(String serviceDescriptorFileName, JarFile deployableUnitJar) throws DeploymentException {\n    \t\n\t\t// make component jar entry\n\t\tJarEntry componentDescriptor = deployableUnitJar.getJarEntry(serviceDescriptorFileName);\n\t\tInputStream componentDescriptorInputStream = null;\n\t\tList<ServiceComponentImpl> result = new ArrayList<ServiceComponentImpl>();\n    \ttry {\n    \t\tcomponentDescriptorInputStream = deployableUnitJar.getInputStream(componentDescriptor);\n    \t\tServiceDescriptorFactoryImpl descriptorFactory = componentManagement.getComponentDescriptorFactory().getServiceDescriptorFactory();\n    \t\tfor (ServiceDescriptorImpl descriptor : descriptorFactory.parse(componentDescriptorInputStream)) {\n    \t\t\tresult.add(new ServiceComponentImpl(descriptor));\n    \t\t}\n    \t} catch (IOException e) {\n    \t\tthrow new DeploymentException(\"failed to parse service descriptor from \"+componentDescriptor.getName(),e);\n    \t}\n    \tfinally {\n    \t\tif (componentDescriptorInputStream != null) {\n    \t\t\ttry {\n    \t\t\t\tcomponentDescriptorInputStream.close();\n    \t\t\t} catch (IOException e) {\n    \t\t\t\tlogger.error(\"failed to close inputstream of descriptor for jar \"+componentDescriptor.getName());\n    \t\t\t}\n    \t\t}\n    \t}        \n    \treturn result;\n    }", "code_tokens": ["public", "List", "<", "ServiceComponentImpl", ">", "buildComponents", "(", "String", "serviceDescriptorFileName", ",", "JarFile", "deployableUnitJar", ")", "throws", "DeploymentException", "{", "// make component jar entry", "JarEntry", "componentDescriptor", "=", "deployableUnitJar", ".", "getJarEntry", "(", "serviceDescriptorFileName", ")", ";", "InputStream", "componentDescriptorInputStream", "=", "null", ";", "List", "<", "ServiceComponentImpl", ">", "result", "=", "new", "ArrayList", "<", "ServiceComponentImpl", ">", "(", ")", ";", "try", "{", "componentDescriptorInputStream", "=", "deployableUnitJar", ".", "getInputStream", "(", "componentDescriptor", ")", ";", "ServiceDescriptorFactoryImpl", "descriptorFactory", "=", "componentManagement", ".", "getComponentDescriptorFactory", "(", ")", ".", "getServiceDescriptorFactory", "(", ")", ";", "for", "(", "ServiceDescriptorImpl", "descriptor", ":", "descriptorFactory", ".", "parse", "(", "componentDescriptorInputStream", ")", ")", "{", "result", ".", "add", "(", "new", "ServiceComponentImpl", "(", "descriptor", ")", ")", ";", "}", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "DeploymentException", "(", "\"failed to parse service descriptor from \"", "+", "componentDescriptor", ".", "getName", "(", ")", ",", "e", ")", ";", "}", "finally", "{", "if", "(", "componentDescriptorInputStream", "!=", "null", ")", "{", "try", "{", "componentDescriptorInputStream", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "logger", ".", "error", "(", "\"failed to close inputstream of descriptor for jar \"", "+", "componentDescriptor", ".", "getName", "(", ")", ")", ";", "}", "}", "}", "return", "result", ";", "}"], "docstring": "Builds a service component contained in the specified du jar file, with the specified and adds it to the specified deployable unit.\n\n@param serviceDescriptorFileName\n@param deployableUnitJar\n@param deployableUnit\n@param documentBuilder\n@throws DeploymentException", "docstring_tokens": ["Builds", "a", "service", "component", "contained", "in", "the", "specified", "du", "jar", "file", "with", "the", "specified", "and", "adds", "it", "to", "the", "specified", "deployable", "unit", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitServiceComponentBuilder.java#L67-L92", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java", "func_name": "ConcreteClassGeneratorUtils.getJarsFileListing", "original_string": "static public List getJarsFileListing(File aStartingDir)\r\n\t\t\tthrows FileNotFoundException {\r\n\t\tvalidateDirectory(aStartingDir);\r\n\t\tList result = new ArrayList();\r\n\r\n\t\tFile[] filesAndDirs = aStartingDir.listFiles(new FileFilter() {\r\n\t\t\r\n\t\t\tpublic boolean accept(File pathname) {\r\n\t\t\t\tif(pathname.getName().endsWith(\".jar\"))\r\n\t\t\t\t\treturn true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\r\n\t\t});\r\n\t\tList filesDirs = Arrays.asList(filesAndDirs);\r\n\t\tIterator filesIter = filesDirs.iterator();\r\n\t\tFile file = null;\r\n\t\twhile (filesIter.hasNext()) {\r\n\t\t\tfile = (File) filesIter.next();\r\n\t\t\tresult.add(file); // always add, even if directory\r\n\t\t\tif (!file.isFile()) {\r\n\t\t\t\t// must be a directory\r\n\t\t\t\t// recursive call!\r\n\t\t\t\tList deeperList = getJarsFileListing(file);\r\n\t\t\t\tresult.addAll(deeperList);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tCollections.sort(result);\r\n\t\treturn result;\r\n\t}", "language": "java", "code": "static public List getJarsFileListing(File aStartingDir)\r\n\t\t\tthrows FileNotFoundException {\r\n\t\tvalidateDirectory(aStartingDir);\r\n\t\tList result = new ArrayList();\r\n\r\n\t\tFile[] filesAndDirs = aStartingDir.listFiles(new FileFilter() {\r\n\t\t\r\n\t\t\tpublic boolean accept(File pathname) {\r\n\t\t\t\tif(pathname.getName().endsWith(\".jar\"))\r\n\t\t\t\t\treturn true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\r\n\t\t});\r\n\t\tList filesDirs = Arrays.asList(filesAndDirs);\r\n\t\tIterator filesIter = filesDirs.iterator();\r\n\t\tFile file = null;\r\n\t\twhile (filesIter.hasNext()) {\r\n\t\t\tfile = (File) filesIter.next();\r\n\t\t\tresult.add(file); // always add, even if directory\r\n\t\t\tif (!file.isFile()) {\r\n\t\t\t\t// must be a directory\r\n\t\t\t\t// recursive call!\r\n\t\t\t\tList deeperList = getJarsFileListing(file);\r\n\t\t\t\tresult.addAll(deeperList);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tCollections.sort(result);\r\n\t\treturn result;\r\n\t}", "code_tokens": ["static", "public", "List", "getJarsFileListing", "(", "File", "aStartingDir", ")", "throws", "FileNotFoundException", "{", "validateDirectory", "(", "aStartingDir", ")", ";", "List", "result", "=", "new", "ArrayList", "(", ")", ";", "File", "[", "]", "filesAndDirs", "=", "aStartingDir", ".", "listFiles", "(", "new", "FileFilter", "(", ")", "{", "public", "boolean", "accept", "(", "File", "pathname", ")", "{", "if", "(", "pathname", ".", "getName", "(", ")", ".", "endsWith", "(", "\".jar\"", ")", ")", "return", "true", ";", "return", "false", ";", "}", "}", ")", ";", "List", "filesDirs", "=", "Arrays", ".", "asList", "(", "filesAndDirs", ")", ";", "Iterator", "filesIter", "=", "filesDirs", ".", "iterator", "(", ")", ";", "File", "file", "=", "null", ";", "while", "(", "filesIter", ".", "hasNext", "(", ")", ")", "{", "file", "=", "(", "File", ")", "filesIter", ".", "next", "(", ")", ";", "result", ".", "add", "(", "file", ")", ";", "// always add, even if directory\r", "if", "(", "!", "file", ".", "isFile", "(", ")", ")", "{", "// must be a directory\r", "// recursive call!\r", "List", "deeperList", "=", "getJarsFileListing", "(", "file", ")", ";", "result", ".", "addAll", "(", "deeperList", ")", ";", "}", "}", "Collections", ".", "sort", "(", "result", ")", ";", "return", "result", ";", "}"], "docstring": "Recursively walk a directory tree and return a List of all jars Files found;\nthe List is sorted using File.compareTo.\n\n@param aStartingDir\nis a valid directory, which can be read.", "docstring_tokens": ["Recursively", "walk", "a", "directory", "tree", "and", "return", "a", "List", "of", "all", "jars", "Files", "found", ";", "the", "List", "is", "sorted", "using", "File", ".", "compareTo", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java#L124-L154", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java", "func_name": "ConcreteClassGeneratorUtils.validateDirectory", "original_string": "static private void validateDirectory(File aDirectory)\r\n\t\t\tthrows FileNotFoundException {\r\n\t\tif (aDirectory == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Directory should not be null.\");\r\n\t\t}\r\n\t\tif (!aDirectory.exists()) {\r\n\t\t\tthrow new FileNotFoundException(\"Directory does not exist: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t\tif (!aDirectory.isDirectory()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Is not a directory: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t\tif (!aDirectory.canRead()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Directory cannot be read: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t}", "language": "java", "code": "static private void validateDirectory(File aDirectory)\r\n\t\t\tthrows FileNotFoundException {\r\n\t\tif (aDirectory == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Directory should not be null.\");\r\n\t\t}\r\n\t\tif (!aDirectory.exists()) {\r\n\t\t\tthrow new FileNotFoundException(\"Directory does not exist: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t\tif (!aDirectory.isDirectory()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Is not a directory: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t\tif (!aDirectory.canRead()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Directory cannot be read: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t}", "code_tokens": ["static", "private", "void", "validateDirectory", "(", "File", "aDirectory", ")", "throws", "FileNotFoundException", "{", "if", "(", "aDirectory", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Directory should not be null.\"", ")", ";", "}", "if", "(", "!", "aDirectory", ".", "exists", "(", ")", ")", "{", "throw", "new", "FileNotFoundException", "(", "\"Directory does not exist: \"", "+", "aDirectory", ")", ";", "}", "if", "(", "!", "aDirectory", ".", "isDirectory", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Is not a directory: \"", "+", "aDirectory", ")", ";", "}", "if", "(", "!", "aDirectory", ".", "canRead", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Directory cannot be read: \"", "+", "aDirectory", ")", ";", "}", "}"], "docstring": "Directory is valid if it exists, does not represent a file, and can be read.", "docstring_tokens": ["Directory", "is", "valid", "if", "it", "exists", "does", "not", "represent", "a", "file", "and", "can", "be", "read", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java#L159-L176", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/facilities/AlarmLevel.java", "func_name": "AlarmLevel.fromInt", "original_string": "public static AlarmLevel fromInt(int level) throws IllegalArgumentException {\n        switch (level) {\n            case LEVEL_CLEAR: return CLEAR;\n            case LEVEL_CRITICAL: return CRITICAL;\n            case LEVEL_MAJOR: return MAJOR;\n            case LEVEL_WARNING: return WARNING;\n            case LEVEL_INDETERMINATE: return INDETERMINATE;\n            case LEVEL_MINOR: return MINOR;\n            default: throw new IllegalArgumentException(\"Invalid level: \" + level);\n        }\n    }", "language": "java", "code": "public static AlarmLevel fromInt(int level) throws IllegalArgumentException {\n        switch (level) {\n            case LEVEL_CLEAR: return CLEAR;\n            case LEVEL_CRITICAL: return CRITICAL;\n            case LEVEL_MAJOR: return MAJOR;\n            case LEVEL_WARNING: return WARNING;\n            case LEVEL_INDETERMINATE: return INDETERMINATE;\n            case LEVEL_MINOR: return MINOR;\n            default: throw new IllegalArgumentException(\"Invalid level: \" + level);\n        }\n    }", "code_tokens": ["public", "static", "AlarmLevel", "fromInt", "(", "int", "level", ")", "throws", "IllegalArgumentException", "{", "switch", "(", "level", ")", "{", "case", "LEVEL_CLEAR", ":", "return", "CLEAR", ";", "case", "LEVEL_CRITICAL", ":", "return", "CRITICAL", ";", "case", "LEVEL_MAJOR", ":", "return", "MAJOR", ";", "case", "LEVEL_WARNING", ":", "return", "WARNING", ";", "case", "LEVEL_INDETERMINATE", ":", "return", "INDETERMINATE", ";", "case", "LEVEL_MINOR", ":", "return", "MINOR", ";", "default", ":", "throw", "new", "IllegalArgumentException", "(", "\"Invalid level: \"", "+", "level", ")", ";", "}", "}"], "docstring": "Get an <code>AlarmLevel</code> object from an integer value.\n@param level the level as an integer.\n@return an <code>AlarmLevel</code> object corresponding to <code>level</code>.\n@throws IllegalArgumentException if <code>level</code> is not a valid alarm\nlevel value.", "docstring_tokens": ["Get", "an", "<code", ">", "AlarmLevel<", "/", "code", ">", "object", "from", "an", "integer", "value", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/facilities/AlarmLevel.java#L142-L152", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/facilities/AlarmLevel.java", "func_name": "AlarmLevel.fromString", "original_string": "public static AlarmLevel fromString(String level) throws NullPointerException, IllegalArgumentException {\n        if (level == null) throw new NullPointerException(\"level is null\");\n        if (level.equalsIgnoreCase(CLEAR_STRING)) return CLEAR;\n        if (level.equalsIgnoreCase(CRITICAL_STRING)) return CRITICAL;\n        if (level.equalsIgnoreCase(MAJOR_STRING)) return MAJOR;\n        if (level.equalsIgnoreCase(WARNING_STRING)) return WARNING;\n        if (level.equalsIgnoreCase(INDETERMINATE_STRING)) return INDETERMINATE;\n        if (level.equalsIgnoreCase(MINOR_STRING)) return MINOR;\n        throw new IllegalArgumentException(\"Invalid level: \" + level);\n    }", "language": "java", "code": "public static AlarmLevel fromString(String level) throws NullPointerException, IllegalArgumentException {\n        if (level == null) throw new NullPointerException(\"level is null\");\n        if (level.equalsIgnoreCase(CLEAR_STRING)) return CLEAR;\n        if (level.equalsIgnoreCase(CRITICAL_STRING)) return CRITICAL;\n        if (level.equalsIgnoreCase(MAJOR_STRING)) return MAJOR;\n        if (level.equalsIgnoreCase(WARNING_STRING)) return WARNING;\n        if (level.equalsIgnoreCase(INDETERMINATE_STRING)) return INDETERMINATE;\n        if (level.equalsIgnoreCase(MINOR_STRING)) return MINOR;\n        throw new IllegalArgumentException(\"Invalid level: \" + level);\n    }", "code_tokens": ["public", "static", "AlarmLevel", "fromString", "(", "String", "level", ")", "throws", "NullPointerException", ",", "IllegalArgumentException", "{", "if", "(", "level", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"level is null\"", ")", ";", "if", "(", "level", ".", "equalsIgnoreCase", "(", "CLEAR_STRING", ")", ")", "return", "CLEAR", ";", "if", "(", "level", ".", "equalsIgnoreCase", "(", "CRITICAL_STRING", ")", ")", "return", "CRITICAL", ";", "if", "(", "level", ".", "equalsIgnoreCase", "(", "MAJOR_STRING", ")", ")", "return", "MAJOR", ";", "if", "(", "level", ".", "equalsIgnoreCase", "(", "WARNING_STRING", ")", ")", "return", "WARNING", ";", "if", "(", "level", ".", "equalsIgnoreCase", "(", "INDETERMINATE_STRING", ")", ")", "return", "INDETERMINATE", ";", "if", "(", "level", ".", "equalsIgnoreCase", "(", "MINOR_STRING", ")", ")", "return", "MINOR", ";", "throw", "new", "IllegalArgumentException", "(", "\"Invalid level: \"", "+", "level", ")", ";", "}"], "docstring": "Get an <code>AlarmLevel</code> object from a string value.\n@param level the level as a string, for example as returned by the {@link #toString()}\nmethod (case insensitive).\n@return an <code>AlarmLevel</code> object corresponding to <code>level</code>.\n@throws NullPointerException if <code>level</code> is <code>null</code>.\n@throws IllegalArgumentException if <code>level</code> is not a valid alarm\nlevel string.", "docstring_tokens": ["Get", "an", "<code", ">", "AlarmLevel<", "/", "code", ">", "object", "from", "a", "string", "value", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/facilities/AlarmLevel.java#L163-L172", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/DeploymentMBeanUtils.java", "func_name": "DeploymentMBeanUtils.getEventTypes", "original_string": "public EventTypeID[] getEventTypes() throws ManagementConsoleException {\r\n    try {\r\n      EventTypeID[] IDs = (EventTypeID[]) mbeanServer.getAttribute(deploymentMBean, \"EventTypes\");\r\n      // ManagementConsole.getInstance().getComponentIDMap().put(IDs);\r\n      return IDs;\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "language": "java", "code": "public EventTypeID[] getEventTypes() throws ManagementConsoleException {\r\n    try {\r\n      EventTypeID[] IDs = (EventTypeID[]) mbeanServer.getAttribute(deploymentMBean, \"EventTypes\");\r\n      // ManagementConsole.getInstance().getComponentIDMap().put(IDs);\r\n      return IDs;\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "code_tokens": ["public", "EventTypeID", "[", "]", "getEventTypes", "(", ")", "throws", "ManagementConsoleException", "{", "try", "{", "EventTypeID", "[", "]", "IDs", "=", "(", "EventTypeID", "[", "]", ")", "mbeanServer", ".", "getAttribute", "(", "deploymentMBean", ",", "\"EventTypes\"", ")", ";", "// ManagementConsole.getInstance().getComponentIDMap().put(IDs);\r", "return", "IDs", ";", "}", "catch", "(", "Exception", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "throw", "new", "ManagementConsoleException", "(", "SleeManagementMBeanUtils", ".", "doMessage", "(", "e", ")", ")", ";", "}", "}"], "docstring": "}", "docstring_tokens": ["}"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/DeploymentMBeanUtils.java#L122-L132", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "tools/statistics/ra/src/main/java/org/restcomm/slee/resource/statistics/StatisticsResourceAdaptor.java", "func_name": "StatisticsResourceAdaptor.setResourceAdaptorContext", "original_string": "public void setResourceAdaptorContext(ResourceAdaptorContext raContext) {\r\n\t\tthis.raContext = raContext;\r\n\t\tthis.tracer = raContext.getTracer(StatisticsResourceAdaptor.class.getSimpleName());\r\n\r\n\t\tthis.sleeContainer = SleeContainer.lookupFromJndi();\r\n\t\tif (this.sleeContainer != null) {\r\n\t\t\tthis.resourceManagement = sleeContainer.getResourceManagement();\r\n\t\t}\r\n\t}", "language": "java", "code": "public void setResourceAdaptorContext(ResourceAdaptorContext raContext) {\r\n\t\tthis.raContext = raContext;\r\n\t\tthis.tracer = raContext.getTracer(StatisticsResourceAdaptor.class.getSimpleName());\r\n\r\n\t\tthis.sleeContainer = SleeContainer.lookupFromJndi();\r\n\t\tif (this.sleeContainer != null) {\r\n\t\t\tthis.resourceManagement = sleeContainer.getResourceManagement();\r\n\t\t}\r\n\t}", "code_tokens": ["public", "void", "setResourceAdaptorContext", "(", "ResourceAdaptorContext", "raContext", ")", "{", "this", ".", "raContext", "=", "raContext", ";", "this", ".", "tracer", "=", "raContext", ".", "getTracer", "(", "StatisticsResourceAdaptor", ".", "class", ".", "getSimpleName", "(", ")", ")", ";", "this", ".", "sleeContainer", "=", "SleeContainer", ".", "lookupFromJndi", "(", ")", ";", "if", "(", "this", ".", "sleeContainer", "!=", "null", ")", "{", "this", ".", "resourceManagement", "=", "sleeContainer", ".", "getResourceManagement", "(", ")", ";", "}", "}"], "docstring": "lifecycle methods", "docstring_tokens": ["lifecycle", "methods"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/statistics/ra/src/main/java/org/restcomm/slee/resource/statistics/StatisticsResourceAdaptor.java#L83-L91", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/validator/SbbComponentValidator.java", "func_name": "SbbComponentValidator.validateCompatibilityReferenceConstraints", "original_string": "boolean validateCompatibilityReferenceConstraints() {\r\n\r\n\t\tboolean passed = true;\r\n\t\tString errorBuffer = new String(\"\");\r\n\r\n\t\ttry {\r\n\t\t\tif (!this.component.isSlee11()) {\r\n\t\t\t\t// A 1.0 SBB must not reference or use a 1.1 Profile\r\n\t\t\t\t// Specification. This must be enforced by a 1.1\r\n\t\t\t\t// JAIN SLEE.\r\n\r\n\t\t\t\tfor (ProfileSpecRefDescriptor profileReference : this.component.getDescriptor().getProfileSpecRefs()) {\r\n\t\t\t\t\tProfileSpecificationComponent specComponent = this.repository.getComponentByID(profileReference.getComponentID());\r\n\t\t\t\t\tif (specComponent == null) {\r\n\t\t\t\t\t\t// should not happen\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\"Referenced \"+profileReference.getComponentID()+\" was not found in component repository, this should not happen since dependencies were already verified\",\"1.3\", errorBuffer);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (specComponent.isSlee11()) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\"Sbb is following 1.0 JSLEE contract, it must not reference 1.1 profile specification: \" + profileReference.getComponentID(), \"1.3\", errorBuffer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\tif (!passed) {\r\n\t\t\t\tif (logger.isEnabledFor(Level.ERROR)) {\r\n\t\t\t\t\tlogger.error(errorBuffer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn passed;\r\n\t}", "language": "java", "code": "boolean validateCompatibilityReferenceConstraints() {\r\n\r\n\t\tboolean passed = true;\r\n\t\tString errorBuffer = new String(\"\");\r\n\r\n\t\ttry {\r\n\t\t\tif (!this.component.isSlee11()) {\r\n\t\t\t\t// A 1.0 SBB must not reference or use a 1.1 Profile\r\n\t\t\t\t// Specification. This must be enforced by a 1.1\r\n\t\t\t\t// JAIN SLEE.\r\n\r\n\t\t\t\tfor (ProfileSpecRefDescriptor profileReference : this.component.getDescriptor().getProfileSpecRefs()) {\r\n\t\t\t\t\tProfileSpecificationComponent specComponent = this.repository.getComponentByID(profileReference.getComponentID());\r\n\t\t\t\t\tif (specComponent == null) {\r\n\t\t\t\t\t\t// should not happen\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\"Referenced \"+profileReference.getComponentID()+\" was not found in component repository, this should not happen since dependencies were already verified\",\"1.3\", errorBuffer);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (specComponent.isSlee11()) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\"Sbb is following 1.0 JSLEE contract, it must not reference 1.1 profile specification: \" + profileReference.getComponentID(), \"1.3\", errorBuffer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\tif (!passed) {\r\n\t\t\t\tif (logger.isEnabledFor(Level.ERROR)) {\r\n\t\t\t\t\tlogger.error(errorBuffer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn passed;\r\n\t}", "code_tokens": ["boolean", "validateCompatibilityReferenceConstraints", "(", ")", "{", "boolean", "passed", "=", "true", ";", "String", "errorBuffer", "=", "new", "String", "(", "\"\"", ")", ";", "try", "{", "if", "(", "!", "this", ".", "component", ".", "isSlee11", "(", ")", ")", "{", "// A 1.0 SBB must not reference or use a 1.1 Profile\r", "// Specification. This must be enforced by a 1.1\r", "// JAIN SLEE.\r", "for", "(", "ProfileSpecRefDescriptor", "profileReference", ":", "this", ".", "component", ".", "getDescriptor", "(", ")", ".", "getProfileSpecRefs", "(", ")", ")", "{", "ProfileSpecificationComponent", "specComponent", "=", "this", ".", "repository", ".", "getComponentByID", "(", "profileReference", ".", "getComponentID", "(", ")", ")", ";", "if", "(", "specComponent", "==", "null", ")", "{", "// should not happen\r", "passed", "=", "false", ";", "errorBuffer", "=", "appendToBuffer", "(", "\"Referenced \"", "+", "profileReference", ".", "getComponentID", "(", ")", "+", "\" was not found in component repository, this should not happen since dependencies were already verified\"", ",", "\"1.3\"", ",", "errorBuffer", ")", ";", "}", "else", "{", "if", "(", "specComponent", ".", "isSlee11", "(", ")", ")", "{", "passed", "=", "false", ";", "errorBuffer", "=", "appendToBuffer", "(", "\"Sbb is following 1.0 JSLEE contract, it must not reference 1.1 profile specification: \"", "+", "profileReference", ".", "getComponentID", "(", ")", ",", "\"1.3\"", ",", "errorBuffer", ")", ";", "}", "}", "}", "}", "}", "finally", "{", "if", "(", "!", "passed", ")", "{", "if", "(", "logger", ".", "isEnabledFor", "(", "Level", ".", "ERROR", ")", ")", "{", "logger", ".", "error", "(", "errorBuffer", ")", ";", "}", "}", "}", "return", "passed", ";", "}"], "docstring": "See section 1.3 of jslee 1.1 specs\n\n@return", "docstring_tokens": ["See", "section", "1", ".", "3", "of", "jslee", "1", ".", "1", "specs"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/validator/SbbComponentValidator.java#L1961-L1998", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/events/src/main/java/org/mobicents/slee/container/event/EventContextFactoryImpl.java", "func_name": "EventContextFactoryImpl.createActivityEndEventContext", "original_string": "public EventContext createActivityEndEventContext(ActivityContext ac,\n\t\t\tEventUnreferencedCallback unreferencedCallback) {\n\t\tfinal EventReferencesHandlerImpl referencesHandler = new EventReferencesHandlerImpl();\n\t\tfinal EventContextData data = dataSource.newEventContextData(\n\t\t\t\tActivityEndEventImpl.EVENT_TYPE_ID,\n\t\t\t\tActivityEndEventImpl.SINGLETON, ac, null, null, null, null,\n\t\t\t\tunreferencedCallback, referencesHandler);\n\t\tfinal EventContextImpl eventContext = new ActivityEndEventContextImpl(\n\t\t\t\tdata, this);\n\t\treferencesHandler.setEventContext(eventContext);\n\t\treturn eventContext;\n\t}", "language": "java", "code": "public EventContext createActivityEndEventContext(ActivityContext ac,\n\t\t\tEventUnreferencedCallback unreferencedCallback) {\n\t\tfinal EventReferencesHandlerImpl referencesHandler = new EventReferencesHandlerImpl();\n\t\tfinal EventContextData data = dataSource.newEventContextData(\n\t\t\t\tActivityEndEventImpl.EVENT_TYPE_ID,\n\t\t\t\tActivityEndEventImpl.SINGLETON, ac, null, null, null, null,\n\t\t\t\tunreferencedCallback, referencesHandler);\n\t\tfinal EventContextImpl eventContext = new ActivityEndEventContextImpl(\n\t\t\t\tdata, this);\n\t\treferencesHandler.setEventContext(eventContext);\n\t\treturn eventContext;\n\t}", "code_tokens": ["public", "EventContext", "createActivityEndEventContext", "(", "ActivityContext", "ac", ",", "EventUnreferencedCallback", "unreferencedCallback", ")", "{", "final", "EventReferencesHandlerImpl", "referencesHandler", "=", "new", "EventReferencesHandlerImpl", "(", ")", ";", "final", "EventContextData", "data", "=", "dataSource", ".", "newEventContextData", "(", "ActivityEndEventImpl", ".", "EVENT_TYPE_ID", ",", "ActivityEndEventImpl", ".", "SINGLETON", ",", "ac", ",", "null", ",", "null", ",", "null", ",", "null", ",", "unreferencedCallback", ",", "referencesHandler", ")", ";", "final", "EventContextImpl", "eventContext", "=", "new", "ActivityEndEventContextImpl", "(", "data", ",", "this", ")", ";", "referencesHandler", ".", "setEventContext", "(", "eventContext", ")", ";", "return", "eventContext", ";", "}"], "docstring": "/*\n(non-Javadoc)\n\n@seeorg.mobicents.slee.container.event.EventContextFactory#\ncreateActivityEndEventContext\n(org.mobicents.slee.container.activity.ActivityContext,\norg.mobicents.slee.container.event.EventUnreferencedCallback)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/events/src/main/java/org/mobicents/slee/container/event/EventContextFactoryImpl.java#L65-L76", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/events/src/main/java/org/mobicents/slee/container/event/EventContextFactoryImpl.java", "func_name": "EventContextFactoryImpl.createEventContext", "original_string": "public EventContext createEventContext(EventTypeID eventTypeId,\n\t\t\tObject eventObject, ActivityContext ac, Address address,\n\t\t\tServiceID serviceID,\n\t\t\tEventProcessingSucceedCallback succeedCallback,\n\t\t\tEventProcessingFailedCallback failedCallback,\n\t\t\tEventUnreferencedCallback unreferencedCallback) {\n\t\tfinal EventReferencesHandlerImpl referencesHandler = new EventReferencesHandlerImpl();\n\t\tfinal EventContextData data = dataSource.newEventContextData(\n\t\t\t\teventTypeId, eventObject, ac, address, serviceID,\n\t\t\t\tsucceedCallback, failedCallback, unreferencedCallback,\n\t\t\t\treferencesHandler);\n\t\tfinal EventContextImpl eventContext = new EventContextImpl(data, this);\n\t\treferencesHandler.setEventContext(eventContext);\n\t\treturn eventContext;\n\t}", "language": "java", "code": "public EventContext createEventContext(EventTypeID eventTypeId,\n\t\t\tObject eventObject, ActivityContext ac, Address address,\n\t\t\tServiceID serviceID,\n\t\t\tEventProcessingSucceedCallback succeedCallback,\n\t\t\tEventProcessingFailedCallback failedCallback,\n\t\t\tEventUnreferencedCallback unreferencedCallback) {\n\t\tfinal EventReferencesHandlerImpl referencesHandler = new EventReferencesHandlerImpl();\n\t\tfinal EventContextData data = dataSource.newEventContextData(\n\t\t\t\teventTypeId, eventObject, ac, address, serviceID,\n\t\t\t\tsucceedCallback, failedCallback, unreferencedCallback,\n\t\t\t\treferencesHandler);\n\t\tfinal EventContextImpl eventContext = new EventContextImpl(data, this);\n\t\treferencesHandler.setEventContext(eventContext);\n\t\treturn eventContext;\n\t}", "code_tokens": ["public", "EventContext", "createEventContext", "(", "EventTypeID", "eventTypeId", ",", "Object", "eventObject", ",", "ActivityContext", "ac", ",", "Address", "address", ",", "ServiceID", "serviceID", ",", "EventProcessingSucceedCallback", "succeedCallback", ",", "EventProcessingFailedCallback", "failedCallback", ",", "EventUnreferencedCallback", "unreferencedCallback", ")", "{", "final", "EventReferencesHandlerImpl", "referencesHandler", "=", "new", "EventReferencesHandlerImpl", "(", ")", ";", "final", "EventContextData", "data", "=", "dataSource", ".", "newEventContextData", "(", "eventTypeId", ",", "eventObject", ",", "ac", ",", "address", ",", "serviceID", ",", "succeedCallback", ",", "failedCallback", ",", "unreferencedCallback", ",", "referencesHandler", ")", ";", "final", "EventContextImpl", "eventContext", "=", "new", "EventContextImpl", "(", "data", ",", "this", ")", ";", "referencesHandler", ".", "setEventContext", "(", "eventContext", ")", ";", "return", "eventContext", ";", "}"], "docstring": "/*\n(non-Javadoc)\n\n@see\norg.mobicents.slee.container.event.EventContextFactory#createEventContext\n(javax.slee.EventTypeID, java.lang.Object,\norg.mobicents.slee.container.activity.ActivityContext,\njavax.slee.Address, javax.slee.ServiceID,\norg.mobicents.slee.container.event.EventProcessingSucceedCallback,\norg.mobicents.slee.container.event.EventProcessingFailedCallback,\norg.mobicents.slee.container.event.EventUnreferencedCallback)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/events/src/main/java/org/mobicents/slee/container/event/EventContextFactoryImpl.java#L90-L104", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/ProfileProvisioningMBeanUtils.java", "func_name": "ProfileProvisioningMBeanUtils.getProfileTables", "original_string": "public Collection getProfileTables() throws ManagementConsoleException {\r\n    try {\r\n      return (Collection) mbeanServer.invoke(profileProvisioningMBean, \"getProfileTables\", new Object[] {}, new String[] {});\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "language": "java", "code": "public Collection getProfileTables() throws ManagementConsoleException {\r\n    try {\r\n      return (Collection) mbeanServer.invoke(profileProvisioningMBean, \"getProfileTables\", new Object[] {}, new String[] {});\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "code_tokens": ["public", "Collection", "getProfileTables", "(", ")", "throws", "ManagementConsoleException", "{", "try", "{", "return", "(", "Collection", ")", "mbeanServer", ".", "invoke", "(", "profileProvisioningMBean", ",", "\"getProfileTables\"", ",", "new", "Object", "[", "]", "{", "}", ",", "new", "String", "[", "]", "{", "}", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "throw", "new", "ManagementConsoleException", "(", "SleeManagementMBeanUtils", ".", "doMessage", "(", "e", ")", ")", ";", "}", "}"], "docstring": "/*\n(non-Javadoc)\n\n@see javax.slee.management.ProfileProvisioningMBean#getProfileTables()", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/ProfileProvisioningMBeanUtils.java#L111-L119", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/ProfileProvisioningMBeanUtils.java", "func_name": "ProfileProvisioningMBeanUtils.getProfilesByIndexedAttribute", "original_string": "public Collection getProfilesByIndexedAttribute(String arg0, String arg1, Object arg2) throws ManagementConsoleException {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n  }", "language": "java", "code": "public Collection getProfilesByIndexedAttribute(String arg0, String arg1, Object arg2) throws ManagementConsoleException {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n  }", "code_tokens": ["public", "Collection", "getProfilesByIndexedAttribute", "(", "String", "arg0", ",", "String", "arg1", ",", "Object", "arg2", ")", "throws", "ManagementConsoleException", "{", "// TODO Auto-generated method stub\r", "return", "null", ";", "}"], "docstring": "/*\n(non-Javadoc)\n\n@see javax.slee.management.ProfileProvisioningMBean#getProfilesByIndexedAttribute(java.lang.String, java.lang.String, java.lang.Object)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/ProfileProvisioningMBeanUtils.java#L136-L139", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/management/ServiceState.java", "func_name": "ServiceState.fromInt", "original_string": "public static ServiceState fromInt(int state) throws IllegalArgumentException {\n        switch (state) {\n            case SERVICE_INACTIVE: return INACTIVE;\n            case SERVICE_ACTIVE: return ACTIVE;\n            case SERVICE_STOPPING: return STOPPING;\n            default: throw new IllegalArgumentException(\"Invalid state: \" + state);\n        }\n    }", "language": "java", "code": "public static ServiceState fromInt(int state) throws IllegalArgumentException {\n        switch (state) {\n            case SERVICE_INACTIVE: return INACTIVE;\n            case SERVICE_ACTIVE: return ACTIVE;\n            case SERVICE_STOPPING: return STOPPING;\n            default: throw new IllegalArgumentException(\"Invalid state: \" + state);\n        }\n    }", "code_tokens": ["public", "static", "ServiceState", "fromInt", "(", "int", "state", ")", "throws", "IllegalArgumentException", "{", "switch", "(", "state", ")", "{", "case", "SERVICE_INACTIVE", ":", "return", "INACTIVE", ";", "case", "SERVICE_ACTIVE", ":", "return", "ACTIVE", ";", "case", "SERVICE_STOPPING", ":", "return", "STOPPING", ";", "default", ":", "throw", "new", "IllegalArgumentException", "(", "\"Invalid state: \"", "+", "state", ")", ";", "}", "}"], "docstring": "Get a <code>ServiceState</code> object from an integer value.\n@param state the state as an integer.\n@return a <code>ServiceState</code> object corresponding to <code>state</code>.\n@throws IllegalArgumentException if <code>state</code> is not a valid service\nstate value.", "docstring_tokens": ["Get", "a", "<code", ">", "ServiceState<", "/", "code", ">", "object", "from", "an", "integer", "value", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/management/ServiceState.java#L80-L87", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/management/ServiceState.java", "func_name": "ServiceState.fromString", "original_string": "public static ServiceState fromString(String state) throws NullPointerException, IllegalArgumentException {\n        if (state == null) throw new NullPointerException(\"state is null\");\n        if (state.equalsIgnoreCase(INACTIVE_STRING)) return INACTIVE;\n        if (state.equalsIgnoreCase(ACTIVE_STRING)) return ACTIVE;\n        if (state.equalsIgnoreCase(STOPPING_STRING)) return STOPPING;\n        throw new IllegalArgumentException(\"Invalid state: \" + state);\n    }", "language": "java", "code": "public static ServiceState fromString(String state) throws NullPointerException, IllegalArgumentException {\n        if (state == null) throw new NullPointerException(\"state is null\");\n        if (state.equalsIgnoreCase(INACTIVE_STRING)) return INACTIVE;\n        if (state.equalsIgnoreCase(ACTIVE_STRING)) return ACTIVE;\n        if (state.equalsIgnoreCase(STOPPING_STRING)) return STOPPING;\n        throw new IllegalArgumentException(\"Invalid state: \" + state);\n    }", "code_tokens": ["public", "static", "ServiceState", "fromString", "(", "String", "state", ")", "throws", "NullPointerException", ",", "IllegalArgumentException", "{", "if", "(", "state", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"state is null\"", ")", ";", "if", "(", "state", ".", "equalsIgnoreCase", "(", "INACTIVE_STRING", ")", ")", "return", "INACTIVE", ";", "if", "(", "state", ".", "equalsIgnoreCase", "(", "ACTIVE_STRING", ")", ")", "return", "ACTIVE", ";", "if", "(", "state", ".", "equalsIgnoreCase", "(", "STOPPING_STRING", ")", ")", "return", "STOPPING", ";", "throw", "new", "IllegalArgumentException", "(", "\"Invalid state: \"", "+", "state", ")", ";", "}"], "docstring": "Get a <code>ServiceState</code> object from an integer value.\n@param state the state as a string, for example as returned by the {@link #toString()}\nmethod (case insensitive).\n@return a <code>ServiceState</code> object corresponding to <code>state</code>.\n@throws NullPointerException if <code>state</code> is <code>null</code>.\n@throws IllegalArgumentException if <code>state</code> is not a valid service\nstate string.\n@since SLEE 1.1", "docstring_tokens": ["Get", "a", "<code", ">", "ServiceState<", "/", "code", ">", "object", "from", "an", "integer", "value", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/management/ServiceState.java#L99-L105", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java", "func_name": "ProfileFacilityImpl.getProfiles", "original_string": "public Collection<ProfileID> getProfiles(String profileTableName)\r\n\t\t\tthrows NullPointerException, UnrecognizedProfileTableNameException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfiles( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" )\");\r\n\t\t}\r\n\t\t\r\n\t\tprofileManagement.getSleeContainer().getTransactionManager().mandateTransaction();\r\n\r\n\t\ttry {\r\n\t\t\treturn profileManagement.getProfileTable(\r\n\t\t\t\t\t\t\tprofileTableName).getProfiles();\t\t\t\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\t\t\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(e.getMessage(), e);\r\n\t\t}\r\n\t}", "language": "java", "code": "public Collection<ProfileID> getProfiles(String profileTableName)\r\n\t\t\tthrows NullPointerException, UnrecognizedProfileTableNameException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfiles( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" )\");\r\n\t\t}\r\n\t\t\r\n\t\tprofileManagement.getSleeContainer().getTransactionManager().mandateTransaction();\r\n\r\n\t\ttry {\r\n\t\t\treturn profileManagement.getProfileTable(\r\n\t\t\t\t\t\t\tprofileTableName).getProfiles();\t\t\t\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\t\t\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(e.getMessage(), e);\r\n\t\t}\r\n\t}", "code_tokens": ["public", "Collection", "<", "ProfileID", ">", "getProfiles", "(", "String", "profileTableName", ")", "throws", "NullPointerException", ",", "UnrecognizedProfileTableNameException", ",", "TransactionRolledbackLocalException", ",", "FacilityException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"getProfiles( profileTableName = \"", "+", "profileTableName", "+", "\" )\"", ")", ";", "}", "profileManagement", ".", "getSleeContainer", "(", ")", ".", "getTransactionManager", "(", ")", ".", "mandateTransaction", "(", ")", ";", "try", "{", "return", "profileManagement", ".", "getProfileTable", "(", "profileTableName", ")", ".", "getProfiles", "(", ")", ";", "}", "catch", "(", "NullPointerException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "UnrecognizedProfileTableNameException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "FacilityException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Get a collection of ProfileID objects that identify all the profiles\ncontained in the specified profile table. The collection returned is\nimmutable. Any attempt to modify it, either directly or indirectly, will\nresult in a java.lang.UnsupportedOperationException being thrown.\n\nNote: A profile identifier for the profile table's default profile will\nnot be included in the collection returned by this method as the default\nprofile has no such identifier.\n\nThis method is a required transactional method.\n\n@deprecated\n@param profileTableName\n- the name of the profile table.\n@return a read-only collection of ProfileID objects identifying the\nprofiles contained in the specified profile table.\n@throws java.lang.NullPointerException\n- if profileTableName is null.\n@throws UnrecognizedProfileTableNameException\n- if a profile table with the specified name does not exist.\n@throws TransactionRolledbackLocalException\n- if this method was invoked without a valid transaction\ncontext and the transaction started by this method failed to\ncommit.\n@throws FacilityException\n- if the profile identifies could not be obtained due to a\nsystem-level failure.", "docstring_tokens": ["Get", "a", "collection", "of", "ProfileID", "objects", "that", "identify", "all", "the", "profiles", "contained", "in", "the", "specified", "profile", "table", ".", "The", "collection", "returned", "is", "immutable", ".", "Any", "attempt", "to", "modify", "it", "either", "directly", "or", "indirectly", "will", "result", "in", "a", "java", ".", "lang", ".", "UnsupportedOperationException", "being", "thrown", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java#L158-L179", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java", "func_name": "ProfileFacilityImpl.getProfileTableActivity", "original_string": "public ProfileTableActivity getProfileTableActivity(String profileTableName)\r\n\t\t\tthrows NullPointerException, UnrecognizedProfileTableNameException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfileTableActivity( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" )\");\r\n\t\t}\r\n\t\t\t\t\r\n\t\tfinal SleeTransactionManager sleeTransactionManager = profileManagement.getSleeContainer()\r\n\t\t\t\t.getTransactionManager();\t\t\r\n\t\tboolean terminateTx = sleeTransactionManager.requireTransaction();\r\n\t\ttry {\r\n\t\t\treturn profileManagement.getProfileTable(profileTableName).getActivity();\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(\"Failed to obtain profile table.\", e);\r\n\t\t} finally {\r\n\t\t\t// never rollback\r\n\t\t\ttry {\r\n\t\t\t\tsleeTransactionManager.requireTransactionEnd(terminateTx,false);\t\r\n\t\t\t} catch (Throwable e) {\r\n\t\t\t\tthrow new FacilityException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}", "language": "java", "code": "public ProfileTableActivity getProfileTableActivity(String profileTableName)\r\n\t\t\tthrows NullPointerException, UnrecognizedProfileTableNameException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfileTableActivity( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" )\");\r\n\t\t}\r\n\t\t\t\t\r\n\t\tfinal SleeTransactionManager sleeTransactionManager = profileManagement.getSleeContainer()\r\n\t\t\t\t.getTransactionManager();\t\t\r\n\t\tboolean terminateTx = sleeTransactionManager.requireTransaction();\r\n\t\ttry {\r\n\t\t\treturn profileManagement.getProfileTable(profileTableName).getActivity();\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(\"Failed to obtain profile table.\", e);\r\n\t\t} finally {\r\n\t\t\t// never rollback\r\n\t\t\ttry {\r\n\t\t\t\tsleeTransactionManager.requireTransactionEnd(terminateTx,false);\t\r\n\t\t\t} catch (Throwable e) {\r\n\t\t\t\tthrow new FacilityException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}", "code_tokens": ["public", "ProfileTableActivity", "getProfileTableActivity", "(", "String", "profileTableName", ")", "throws", "NullPointerException", ",", "UnrecognizedProfileTableNameException", ",", "TransactionRolledbackLocalException", ",", "FacilityException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"getProfileTableActivity( profileTableName = \"", "+", "profileTableName", "+", "\" )\"", ")", ";", "}", "final", "SleeTransactionManager", "sleeTransactionManager", "=", "profileManagement", ".", "getSleeContainer", "(", ")", ".", "getTransactionManager", "(", ")", ";", "boolean", "terminateTx", "=", "sleeTransactionManager", ".", "requireTransaction", "(", ")", ";", "try", "{", "return", "profileManagement", ".", "getProfileTable", "(", "profileTableName", ")", ".", "getActivity", "(", ")", ";", "}", "catch", "(", "NullPointerException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "UnrecognizedProfileTableNameException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "FacilityException", "(", "\"Failed to obtain profile table.\"", ",", "e", ")", ";", "}", "finally", "{", "// never rollback\r", "try", "{", "sleeTransactionManager", ".", "requireTransactionEnd", "(", "terminateTx", ",", "false", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "FacilityException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}"], "docstring": "Get a ProfileTableActivity object for a profile table.\n\nThis method is a required transactional method.\n\n@param profileTableName\n- the name of the profile table.\n@return a ProfileTableActivity object for the profile table.\n@throws java.lang.NullPointerException\n- if profileTableName is null.\n@throws UnrecognizedProfileTableNameException\n- if a profile table with the specified name does not exist.\n@throws TransactionRolledbackLocalException\n- if this method was invoked without a valid transaction\ncontext and the transaction started by this method failed to\ncommit.\n@throws FacilityException\n- if the activity could not be obtained due to a system-level\nfailure. This exception is also thrown if the method is\ninvoked on a ProfileFacility object provided to a resource\nadaptor via its ResourceAdaptorContext.", "docstring_tokens": ["Get", "a", "ProfileTableActivity", "object", "for", "a", "profile", "table", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java#L203-L231", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AbstractOperation.java", "func_name": "AbstractOperation.displayResult", "original_string": "public void displayResult() {\r\n\t\t//default impl of display;\r\n\t\tif (!context.isQuiet()) {\r\n\t\t\t// Translate the result to text\r\n\t\t\tString resultText = prepareResultText();\r\n\r\n\t\t\t// render results to out\r\n\t\t\tPrintWriter out = context.getWriter();\r\n\t\t\tout.println(resultText);\r\n\t\t\tout.flush();\r\n\t\t}\r\n\t}", "language": "java", "code": "public void displayResult() {\r\n\t\t//default impl of display;\r\n\t\tif (!context.isQuiet()) {\r\n\t\t\t// Translate the result to text\r\n\t\t\tString resultText = prepareResultText();\r\n\r\n\t\t\t// render results to out\r\n\t\t\tPrintWriter out = context.getWriter();\r\n\t\t\tout.println(resultText);\r\n\t\t\tout.flush();\r\n\t\t}\r\n\t}", "code_tokens": ["public", "void", "displayResult", "(", ")", "{", "//default impl of display;\r", "if", "(", "!", "context", ".", "isQuiet", "(", ")", ")", "{", "// Translate the result to text\r", "String", "resultText", "=", "prepareResultText", "(", ")", ";", "// render results to out\r", "PrintWriter", "out", "=", "context", ".", "getWriter", "(", ")", ";", "out", ".", "println", "(", "resultText", ")", ";", "out", ".", "flush", "(", ")", ";", "}", "}"], "docstring": "Method to display result of operation.", "docstring_tokens": ["Method", "to", "display", "result", "of", "operation", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AbstractOperation.java#L102-L113", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/management/AlarmDuplicateFilter.java", "func_name": "AlarmDuplicateFilter.isNotificationEnabled", "original_string": "public boolean isNotificationEnabled(Notification notification) {\n        if (!(notification instanceof AlarmNotification)) return false;\n\n        synchronized (knownAlarms) {\n            clearStaleTimeouts();\n\n            if (knownAlarms.containsKey(notification)) return false;\n\n            // we've not seen this alarm before, or the period has expired since\n            // the first notification\n            knownAlarms.put(notification, new Long(System.currentTimeMillis()));\n            return true;\n        }\n    }", "language": "java", "code": "public boolean isNotificationEnabled(Notification notification) {\n        if (!(notification instanceof AlarmNotification)) return false;\n\n        synchronized (knownAlarms) {\n            clearStaleTimeouts();\n\n            if (knownAlarms.containsKey(notification)) return false;\n\n            // we've not seen this alarm before, or the period has expired since\n            // the first notification\n            knownAlarms.put(notification, new Long(System.currentTimeMillis()));\n            return true;\n        }\n    }", "code_tokens": ["public", "boolean", "isNotificationEnabled", "(", "Notification", "notification", ")", "{", "if", "(", "!", "(", "notification", "instanceof", "AlarmNotification", ")", ")", "return", "false", ";", "synchronized", "(", "knownAlarms", ")", "{", "clearStaleTimeouts", "(", ")", ";", "if", "(", "knownAlarms", ".", "containsKey", "(", "notification", ")", ")", "return", "false", ";", "// we've not seen this alarm before, or the period has expired since", "// the first notification", "knownAlarms", ".", "put", "(", "notification", ",", "new", "Long", "(", "System", ".", "currentTimeMillis", "(", ")", ")", ")", ";", "return", "true", ";", "}", "}"], "docstring": "Determine whether the specified notification should be delivered to notification\nlisteners using this notification filter.\n@param notification the notification to be sent.\n@return <code>true</code> if the notification should be delivered to notification\nlisteners, <code>false</code> otherwise.  This method always returns\n<code>false</code> if <code>notification</code> is not an instance of\n{@link AlarmNotification}.", "docstring_tokens": ["Determine", "whether", "the", "specified", "notification", "should", "be", "delivered", "to", "notification", "listeners", "using", "this", "notification", "filter", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/management/AlarmDuplicateFilter.java#L44-L57", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/management/AlarmDuplicateFilter.java", "func_name": "AlarmDuplicateFilter.clearStaleTimeouts", "original_string": "private void clearStaleTimeouts() {\n        Iterator iterator = knownAlarms.values().iterator();\n        long currentTime = System.currentTimeMillis();\n        while (iterator.hasNext()) {\n            Long firstSeenTime = (Long)iterator.next();\n            // if period has expired remove reference to the notification\n            if ((firstSeenTime.longValue() + period) < currentTime) {\n                iterator.remove();\n            }\n        }\n    }", "language": "java", "code": "private void clearStaleTimeouts() {\n        Iterator iterator = knownAlarms.values().iterator();\n        long currentTime = System.currentTimeMillis();\n        while (iterator.hasNext()) {\n            Long firstSeenTime = (Long)iterator.next();\n            // if period has expired remove reference to the notification\n            if ((firstSeenTime.longValue() + period) < currentTime) {\n                iterator.remove();\n            }\n        }\n    }", "code_tokens": ["private", "void", "clearStaleTimeouts", "(", ")", "{", "Iterator", "iterator", "=", "knownAlarms", ".", "values", "(", ")", ".", "iterator", "(", ")", ";", "long", "currentTime", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "Long", "firstSeenTime", "=", "(", "Long", ")", "iterator", ".", "next", "(", ")", ";", "// if period has expired remove reference to the notification", "if", "(", "(", "firstSeenTime", ".", "longValue", "(", ")", "+", "period", ")", "<", "currentTime", ")", "{", "iterator", ".", "remove", "(", ")", ";", "}", "}", "}"], "docstring": "private", "docstring_tokens": ["private"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/management/AlarmDuplicateFilter.java#L62-L72", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointFireEventNotTransactedExecutor.java", "func_name": "SleeEndpointFireEventNotTransactedExecutor.execute", "original_string": "void execute(final ActivityHandle realHandle, final ActivityHandle refHandle,\n\t\t\tfinal FireableEventType eventType, final Object event,\n\t\t\tfinal Address address, final ReceivableService receivableService,\n\t\t\tfinal int eventFlags) throws ActivityIsEndingException,\n\t\t\tFireEventException, SLEEException,\n\t\t\tUnrecognizedActivityHandleException {\n\t\t\n\t\tfinal SleeTransaction tx = super.suspendTransaction();\n\t\ttry {\n\t\t\tsleeEndpoint._fireEvent(realHandle, refHandle, eventType, event, address,\n\t\t\t\t\treceivableService, eventFlags,tx);\n\t\t} finally {\n\t\t\tif (tx != null) {\n\t\t\t\tsuper.resumeTransaction(tx);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "void execute(final ActivityHandle realHandle, final ActivityHandle refHandle,\n\t\t\tfinal FireableEventType eventType, final Object event,\n\t\t\tfinal Address address, final ReceivableService receivableService,\n\t\t\tfinal int eventFlags) throws ActivityIsEndingException,\n\t\t\tFireEventException, SLEEException,\n\t\t\tUnrecognizedActivityHandleException {\n\t\t\n\t\tfinal SleeTransaction tx = super.suspendTransaction();\n\t\ttry {\n\t\t\tsleeEndpoint._fireEvent(realHandle, refHandle, eventType, event, address,\n\t\t\t\t\treceivableService, eventFlags,tx);\n\t\t} finally {\n\t\t\tif (tx != null) {\n\t\t\t\tsuper.resumeTransaction(tx);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["void", "execute", "(", "final", "ActivityHandle", "realHandle", ",", "final", "ActivityHandle", "refHandle", ",", "final", "FireableEventType", "eventType", ",", "final", "Object", "event", ",", "final", "Address", "address", ",", "final", "ReceivableService", "receivableService", ",", "final", "int", "eventFlags", ")", "throws", "ActivityIsEndingException", ",", "FireEventException", ",", "SLEEException", ",", "UnrecognizedActivityHandleException", "{", "final", "SleeTransaction", "tx", "=", "super", ".", "suspendTransaction", "(", ")", ";", "try", "{", "sleeEndpoint", ".", "_fireEvent", "(", "realHandle", ",", "refHandle", ",", "eventType", ",", "event", ",", "address", ",", "receivableService", ",", "eventFlags", ",", "tx", ")", ";", "}", "finally", "{", "if", "(", "tx", "!=", "null", ")", "{", "super", ".", "resumeTransaction", "(", "tx", ")", ";", "}", "}", "}"], "docstring": "Executes a non transacted fire event operation.\n\n@param realHandle\n@param refHandle\n@param eventType\n@param event\n@param address\n@param receivableService\n@param eventFlags\n@throws ActivityIsEndingException\n@throws FireEventException\n@throws SLEEException\n@throws UnrecognizedActivityHandleException", "docstring_tokens": ["Executes", "a", "non", "transacted", "fire", "event", "operation", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointFireEventNotTransactedExecutor.java#L70-L86", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java", "func_name": "ActivityContextNamingFacilityCacheData.bindName", "original_string": "public void bindName(Object ach, String name)\n\t\t\tthrows NameAlreadyBoundException {\n\t\tfinal Node node = getNode();\n\t\tif (node.hasChild(name)) {\n\t\t\tthrow new NameAlreadyBoundException(\"name already bound\");\n\t\t} else {\n\t\t\tnode.addChild(Fqn.fromElements(name)).put(CACHE_NODE_MAP_KEY, ach);\n\t\t}\n\t}", "language": "java", "code": "public void bindName(Object ach, String name)\n\t\t\tthrows NameAlreadyBoundException {\n\t\tfinal Node node = getNode();\n\t\tif (node.hasChild(name)) {\n\t\t\tthrow new NameAlreadyBoundException(\"name already bound\");\n\t\t} else {\n\t\t\tnode.addChild(Fqn.fromElements(name)).put(CACHE_NODE_MAP_KEY, ach);\n\t\t}\n\t}", "code_tokens": ["public", "void", "bindName", "(", "Object", "ach", ",", "String", "name", ")", "throws", "NameAlreadyBoundException", "{", "final", "Node", "node", "=", "getNode", "(", ")", ";", "if", "(", "node", ".", "hasChild", "(", "name", ")", ")", "{", "throw", "new", "NameAlreadyBoundException", "(", "\"name already bound\"", ")", ";", "}", "else", "{", "node", ".", "addChild", "(", "Fqn", ".", "fromElements", "(", "name", ")", ")", ".", "put", "(", "CACHE_NODE_MAP_KEY", ",", "ach", ")", ";", "}", "}"], "docstring": "Binds the specified aci name with the specified activity context handle\n@param ach\n@param name\n@throws NameAlreadyBoundException", "docstring_tokens": ["Binds", "the", "specified", "aci", "name", "with", "the", "specified", "activity", "context", "handle"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java#L68-L76", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/facilities/TraceLevel.java", "func_name": "TraceLevel.fromInt", "original_string": "public static TraceLevel fromInt(int level) throws IllegalArgumentException {\n        switch (level) {\n            case LEVEL_OFF: return OFF;\n            case LEVEL_SEVERE: return SEVERE;\n            case LEVEL_WARNING: return WARNING;\n            case LEVEL_INFO: return INFO;\n            case LEVEL_CONFIG: return CONFIG;\n            case LEVEL_FINE: return FINE;\n            case LEVEL_FINER: return FINER;\n            case LEVEL_FINEST: return FINEST;\n            default: throw new IllegalArgumentException(\"Invalid level: \" + level);\n        }\n    }", "language": "java", "code": "public static TraceLevel fromInt(int level) throws IllegalArgumentException {\n        switch (level) {\n            case LEVEL_OFF: return OFF;\n            case LEVEL_SEVERE: return SEVERE;\n            case LEVEL_WARNING: return WARNING;\n            case LEVEL_INFO: return INFO;\n            case LEVEL_CONFIG: return CONFIG;\n            case LEVEL_FINE: return FINE;\n            case LEVEL_FINER: return FINER;\n            case LEVEL_FINEST: return FINEST;\n            default: throw new IllegalArgumentException(\"Invalid level: \" + level);\n        }\n    }", "code_tokens": ["public", "static", "TraceLevel", "fromInt", "(", "int", "level", ")", "throws", "IllegalArgumentException", "{", "switch", "(", "level", ")", "{", "case", "LEVEL_OFF", ":", "return", "OFF", ";", "case", "LEVEL_SEVERE", ":", "return", "SEVERE", ";", "case", "LEVEL_WARNING", ":", "return", "WARNING", ";", "case", "LEVEL_INFO", ":", "return", "INFO", ";", "case", "LEVEL_CONFIG", ":", "return", "CONFIG", ";", "case", "LEVEL_FINE", ":", "return", "FINE", ";", "case", "LEVEL_FINER", ":", "return", "FINER", ";", "case", "LEVEL_FINEST", ":", "return", "FINEST", ";", "default", ":", "throw", "new", "IllegalArgumentException", "(", "\"Invalid level: \"", "+", "level", ")", ";", "}", "}"], "docstring": "Get a <code>TraceLevel</code> object from an integer value.\n@param level the level as an integer.\n@return a <code>TraceLevel</code> object corresponding to <code>level</code>.\n@throws IllegalArgumentException if <code>level</code> is not a valid trace\nlevel value.", "docstring_tokens": ["Get", "a", "<code", ">", "TraceLevel<", "/", "code", ">", "object", "from", "an", "integer", "value", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/facilities/TraceLevel.java#L162-L174", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/jslee/TraceCommand.java", "func_name": "TraceCommand.processArguments", "original_string": "@Override\r\n\tprotected void processArguments(String[] args) throws CommandException {\r\n\t\tString sopts = \":a:f:sug\";\r\n\r\n\t\tLongOpt[] lopts = {\r\n\t\t\t\tnew LongOpt(\"tracers-used\", LongOpt.REQUIRED_ARGUMENT, null, 'a'),\r\n\t\t\t\tnew LongOpt(\"tracers-set\", LongOpt.REQUIRED_ARGUMENT, null, 'f'),\r\n\t\t\t\tnew LongOpt(\"set-level\", LongOpt.NO_ARGUMENT, null, 's'),\r\n\t\t\t\t\tnew LongOpt(\"cid\", LongOpt.REQUIRED_ARGUMENT, null, SetLevelOperation.cid),\r\n\t\t\t\t\tnew LongOpt(\"nsrc\", LongOpt.REQUIRED_ARGUMENT, null, SetLevelOperation.nsrc),\r\n\t\t\t\t\tnew LongOpt(\"name\", LongOpt.REQUIRED_ARGUMENT, null, SetLevelOperation.name),\r\n\t\t\t\t\tnew LongOpt(\"level\", LongOpt.REQUIRED_ARGUMENT, null, SetLevelOperation.level),\r\n\t\t\t\tnew LongOpt(\"un-set-level\", LongOpt.NO_ARGUMENT, null, 'u'),\r\n\t\t\t\t\tnew LongOpt(\"nsrc\", LongOpt.REQUIRED_ARGUMENT, null, UnsetLevelOperation.nsrc),\r\n\t\t\t\t\tnew LongOpt(\"name\", LongOpt.REQUIRED_ARGUMENT, null, UnsetLevelOperation.name),\r\n\t\t\t\tnew LongOpt(\"get-level\", LongOpt.NO_ARGUMENT, null, 'g'),\r\n\t\t\t\t\tnew LongOpt(\"cid\", LongOpt.REQUIRED_ARGUMENT, null, GetLevelOperation.cid),\r\n\t\t\t\t\tnew LongOpt(\"nsrc\", LongOpt.REQUIRED_ARGUMENT, null, GetLevelOperation.nsrc),\r\n\t\t\t\t\tnew LongOpt(\"name\", LongOpt.REQUIRED_ARGUMENT, null, GetLevelOperation.name), };\r\n\r\n\t\tGetopt getopt = new Getopt(null, args, sopts, lopts);\r\n\t\t// getopt.setOpterr(false);\r\n\r\n\t\tint code;\r\n\t\twhile ((code = getopt.getopt()) != -1) {\r\n\t\t\tswitch (code) {\r\n\t\t\tcase ':':\r\n\t\t\t\tthrow new CommandException(\"Option requires an argument: \" + args[getopt.getOptind() - 1]);\r\n\r\n\t\t\tcase '?':\r\n\t\t\t\tthrow new CommandException(\"Invalid (or ambiguous) option: \" + args[getopt.getOptind() - 1]);\r\n\r\n\t\t\tcase 'a':\r\n\r\n\t\t\t\tsuper.operation = new GetTracersUsedOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'f':\r\n\r\n\t\t\t\tsuper.operation = new GetTracersSetOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 's':\r\n\r\n\t\t\t\tsuper.operation = new SetLevelOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'u':\r\n\r\n\t\t\t\tsuper.operation = new UnsetLevelOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'g':\r\n\r\n\t\t\t\tsuper.operation = new GetLevelOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new CommandException(\"Command: \\\"\" + getName() + \"\\\", found unexpected opt: \" + args[getopt.getOptind() - 1]);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}", "language": "java", "code": "@Override\r\n\tprotected void processArguments(String[] args) throws CommandException {\r\n\t\tString sopts = \":a:f:sug\";\r\n\r\n\t\tLongOpt[] lopts = {\r\n\t\t\t\tnew LongOpt(\"tracers-used\", LongOpt.REQUIRED_ARGUMENT, null, 'a'),\r\n\t\t\t\tnew LongOpt(\"tracers-set\", LongOpt.REQUIRED_ARGUMENT, null, 'f'),\r\n\t\t\t\tnew LongOpt(\"set-level\", LongOpt.NO_ARGUMENT, null, 's'),\r\n\t\t\t\t\tnew LongOpt(\"cid\", LongOpt.REQUIRED_ARGUMENT, null, SetLevelOperation.cid),\r\n\t\t\t\t\tnew LongOpt(\"nsrc\", LongOpt.REQUIRED_ARGUMENT, null, SetLevelOperation.nsrc),\r\n\t\t\t\t\tnew LongOpt(\"name\", LongOpt.REQUIRED_ARGUMENT, null, SetLevelOperation.name),\r\n\t\t\t\t\tnew LongOpt(\"level\", LongOpt.REQUIRED_ARGUMENT, null, SetLevelOperation.level),\r\n\t\t\t\tnew LongOpt(\"un-set-level\", LongOpt.NO_ARGUMENT, null, 'u'),\r\n\t\t\t\t\tnew LongOpt(\"nsrc\", LongOpt.REQUIRED_ARGUMENT, null, UnsetLevelOperation.nsrc),\r\n\t\t\t\t\tnew LongOpt(\"name\", LongOpt.REQUIRED_ARGUMENT, null, UnsetLevelOperation.name),\r\n\t\t\t\tnew LongOpt(\"get-level\", LongOpt.NO_ARGUMENT, null, 'g'),\r\n\t\t\t\t\tnew LongOpt(\"cid\", LongOpt.REQUIRED_ARGUMENT, null, GetLevelOperation.cid),\r\n\t\t\t\t\tnew LongOpt(\"nsrc\", LongOpt.REQUIRED_ARGUMENT, null, GetLevelOperation.nsrc),\r\n\t\t\t\t\tnew LongOpt(\"name\", LongOpt.REQUIRED_ARGUMENT, null, GetLevelOperation.name), };\r\n\r\n\t\tGetopt getopt = new Getopt(null, args, sopts, lopts);\r\n\t\t// getopt.setOpterr(false);\r\n\r\n\t\tint code;\r\n\t\twhile ((code = getopt.getopt()) != -1) {\r\n\t\t\tswitch (code) {\r\n\t\t\tcase ':':\r\n\t\t\t\tthrow new CommandException(\"Option requires an argument: \" + args[getopt.getOptind() - 1]);\r\n\r\n\t\t\tcase '?':\r\n\t\t\t\tthrow new CommandException(\"Invalid (or ambiguous) option: \" + args[getopt.getOptind() - 1]);\r\n\r\n\t\t\tcase 'a':\r\n\r\n\t\t\t\tsuper.operation = new GetTracersUsedOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'f':\r\n\r\n\t\t\t\tsuper.operation = new GetTracersSetOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 's':\r\n\r\n\t\t\t\tsuper.operation = new SetLevelOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'u':\r\n\r\n\t\t\t\tsuper.operation = new UnsetLevelOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'g':\r\n\r\n\t\t\t\tsuper.operation = new GetLevelOperation(super.context, super.log, this);\r\n\t\t\t\tsuper.operation.buildOperation(getopt, args);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new CommandException(\"Command: \\\"\" + getName() + \"\\\", found unexpected opt: \" + args[getopt.getOptind() - 1]);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}", "code_tokens": ["@", "Override", "protected", "void", "processArguments", "(", "String", "[", "]", "args", ")", "throws", "CommandException", "{", "String", "sopts", "=", "\":a:f:sug\"", ";", "LongOpt", "[", "]", "lopts", "=", "{", "new", "LongOpt", "(", "\"tracers-used\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "'", "'", ")", ",", "new", "LongOpt", "(", "\"tracers-set\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "'", "'", ")", ",", "new", "LongOpt", "(", "\"set-level\"", ",", "LongOpt", ".", "NO_ARGUMENT", ",", "null", ",", "'", "'", ")", ",", "new", "LongOpt", "(", "\"cid\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "SetLevelOperation", ".", "cid", ")", ",", "new", "LongOpt", "(", "\"nsrc\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "SetLevelOperation", ".", "nsrc", ")", ",", "new", "LongOpt", "(", "\"name\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "SetLevelOperation", ".", "name", ")", ",", "new", "LongOpt", "(", "\"level\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "SetLevelOperation", ".", "level", ")", ",", "new", "LongOpt", "(", "\"un-set-level\"", ",", "LongOpt", ".", "NO_ARGUMENT", ",", "null", ",", "'", "'", ")", ",", "new", "LongOpt", "(", "\"nsrc\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "UnsetLevelOperation", ".", "nsrc", ")", ",", "new", "LongOpt", "(", "\"name\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "UnsetLevelOperation", ".", "name", ")", ",", "new", "LongOpt", "(", "\"get-level\"", ",", "LongOpt", ".", "NO_ARGUMENT", ",", "null", ",", "'", "'", ")", ",", "new", "LongOpt", "(", "\"cid\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "GetLevelOperation", ".", "cid", ")", ",", "new", "LongOpt", "(", "\"nsrc\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "GetLevelOperation", ".", "nsrc", ")", ",", "new", "LongOpt", "(", "\"name\"", ",", "LongOpt", ".", "REQUIRED_ARGUMENT", ",", "null", ",", "GetLevelOperation", ".", "name", ")", ",", "}", ";", "Getopt", "getopt", "=", "new", "Getopt", "(", "null", ",", "args", ",", "sopts", ",", "lopts", ")", ";", "// getopt.setOpterr(false);\r", "int", "code", ";", "while", "(", "(", "code", "=", "getopt", ".", "getopt", "(", ")", ")", "!=", "-", "1", ")", "{", "switch", "(", "code", ")", "{", "case", "'", "'", ":", "throw", "new", "CommandException", "(", "\"Option requires an argument: \"", "+", "args", "[", "getopt", ".", "getOptind", "(", ")", "-", "1", "]", ")", ";", "case", "'", "'", ":", "throw", "new", "CommandException", "(", "\"Invalid (or ambiguous) option: \"", "+", "args", "[", "getopt", ".", "getOptind", "(", ")", "-", "1", "]", ")", ";", "case", "'", "'", ":", "super", ".", "operation", "=", "new", "GetTracersUsedOperation", "(", "super", ".", "context", ",", "super", ".", "log", ",", "this", ")", ";", "super", ".", "operation", ".", "buildOperation", "(", "getopt", ",", "args", ")", ";", "break", ";", "case", "'", "'", ":", "super", ".", "operation", "=", "new", "GetTracersSetOperation", "(", "super", ".", "context", ",", "super", ".", "log", ",", "this", ")", ";", "super", ".", "operation", ".", "buildOperation", "(", "getopt", ",", "args", ")", ";", "break", ";", "case", "'", "'", ":", "super", ".", "operation", "=", "new", "SetLevelOperation", "(", "super", ".", "context", ",", "super", ".", "log", ",", "this", ")", ";", "super", ".", "operation", ".", "buildOperation", "(", "getopt", ",", "args", ")", ";", "break", ";", "case", "'", "'", ":", "super", ".", "operation", "=", "new", "UnsetLevelOperation", "(", "super", ".", "context", ",", "super", ".", "log", ",", "this", ")", ";", "super", ".", "operation", ".", "buildOperation", "(", "getopt", ",", "args", ")", ";", "break", ";", "case", "'", "'", ":", "super", ".", "operation", "=", "new", "GetLevelOperation", "(", "super", ".", "context", ",", "super", ".", "log", ",", "this", ")", ";", "super", ".", "operation", ".", "buildOperation", "(", "getopt", ",", "args", ")", ";", "break", ";", "default", ":", "throw", "new", "CommandException", "(", "\"Command: \\\"\"", "+", "getName", "(", ")", "+", "\"\\\", found unexpected opt: \"", "+", "args", "[", "getopt", ".", "getOptind", "(", ")", "-", "1", "]", ")", ";", "}", "}", "}"], "docstring": "/*\n(non-Javadoc)\n\n@see\norg.mobicents.slee.tools.twiddle.AbstractSleeCommand#processArguments\n(java.lang.String[])", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/jslee/TraceCommand.java#L124-L188", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileTableActivityContextInterfaceFactoryImpl.java", "func_name": "ProfileTableActivityContextInterfaceFactoryImpl.getActivityContextInterface", "original_string": "public ActivityContextInterface getActivityContextInterface(\n\t\t\tProfileTableActivity profileTableActivity)\n\t\t\tthrows NullPointerException, TransactionRequiredLocalException,\n\t\t\tUnrecognizedActivityException, FactoryException {\n\t\tif (profileTableActivity == null\n\t\t\t\t|| profileTableActivity.getProfileTableName() == null) {\n\n\t\t\tthrow new NullPointerException(\"null profile table activity\");\n\n\t\t}\n\n\t\tserviceContainer.getTransactionManager().mandateTransaction();\n\t\tProfileTableImpl profileTableImpl = null;\n\t\ttry {\n\t\t\t// check if this is an assigned profile table\n\t\t\t// name.\n\t\t\tprofileTableImpl = profileManagementImpl.getProfileTable(profileTableActivity.getProfileTableName());\n\t\t} catch (UnrecognizedProfileTableNameException e) {\n\t\t\tthrow new UnrecognizedActivityException(profileTableActivity.getProfileTableName(),e);\n\t\t}\n\t\t\n        ActivityContext ac = profileTableImpl.getActivityContext();\n        if (ac == null) {\n        \tthrow new UnrecognizedActivityException(\"No resource for: \"+profileTableActivity.getProfileTableName(),profileTableActivity);\n        }\n        \n\t\treturn ac.getActivityContextInterface();\n\n\t}", "language": "java", "code": "public ActivityContextInterface getActivityContextInterface(\n\t\t\tProfileTableActivity profileTableActivity)\n\t\t\tthrows NullPointerException, TransactionRequiredLocalException,\n\t\t\tUnrecognizedActivityException, FactoryException {\n\t\tif (profileTableActivity == null\n\t\t\t\t|| profileTableActivity.getProfileTableName() == null) {\n\n\t\t\tthrow new NullPointerException(\"null profile table activity\");\n\n\t\t}\n\n\t\tserviceContainer.getTransactionManager().mandateTransaction();\n\t\tProfileTableImpl profileTableImpl = null;\n\t\ttry {\n\t\t\t// check if this is an assigned profile table\n\t\t\t// name.\n\t\t\tprofileTableImpl = profileManagementImpl.getProfileTable(profileTableActivity.getProfileTableName());\n\t\t} catch (UnrecognizedProfileTableNameException e) {\n\t\t\tthrow new UnrecognizedActivityException(profileTableActivity.getProfileTableName(),e);\n\t\t}\n\t\t\n        ActivityContext ac = profileTableImpl.getActivityContext();\n        if (ac == null) {\n        \tthrow new UnrecognizedActivityException(\"No resource for: \"+profileTableActivity.getProfileTableName(),profileTableActivity);\n        }\n        \n\t\treturn ac.getActivityContextInterface();\n\n\t}", "code_tokens": ["public", "ActivityContextInterface", "getActivityContextInterface", "(", "ProfileTableActivity", "profileTableActivity", ")", "throws", "NullPointerException", ",", "TransactionRequiredLocalException", ",", "UnrecognizedActivityException", ",", "FactoryException", "{", "if", "(", "profileTableActivity", "==", "null", "||", "profileTableActivity", ".", "getProfileTableName", "(", ")", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"null profile table activity\"", ")", ";", "}", "serviceContainer", ".", "getTransactionManager", "(", ")", ".", "mandateTransaction", "(", ")", ";", "ProfileTableImpl", "profileTableImpl", "=", "null", ";", "try", "{", "// check if this is an assigned profile table", "// name.", "profileTableImpl", "=", "profileManagementImpl", ".", "getProfileTable", "(", "profileTableActivity", ".", "getProfileTableName", "(", ")", ")", ";", "}", "catch", "(", "UnrecognizedProfileTableNameException", "e", ")", "{", "throw", "new", "UnrecognizedActivityException", "(", "profileTableActivity", ".", "getProfileTableName", "(", ")", ",", "e", ")", ";", "}", "ActivityContext", "ac", "=", "profileTableImpl", ".", "getActivityContext", "(", ")", ";", "if", "(", "ac", "==", "null", ")", "{", "throw", "new", "UnrecognizedActivityException", "(", "\"No resource for: \"", "+", "profileTableActivity", ".", "getProfileTableName", "(", ")", ",", "profileTableActivity", ")", ";", "}", "return", "ac", ".", "getActivityContextInterface", "(", ")", ";", "}"], "docstring": "/*\n(non-Javadoc)\n\n@see javax.slee.profile.ProfileTableActivityContextInterfaceFactory#getActivityContextInterface(javax.slee.profile.ProfileTableActivity)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileTableActivityContextInterfaceFactoryImpl.java#L77-L105", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/facilities/TimerPreserveMissed.java", "func_name": "TimerPreserveMissed.fromInt", "original_string": "public static TimerPreserveMissed fromInt(int option) throws IllegalArgumentException {\n        switch (option) {\n            case PRESERVE_NONE: return NONE;\n            case PRESERVE_ALL: return ALL;\n            case PRESERVE_LAST: return LAST;\n            default: throw new IllegalArgumentException(\"Invalid preserve-missed value: \" + option);\n        }\n    }", "language": "java", "code": "public static TimerPreserveMissed fromInt(int option) throws IllegalArgumentException {\n        switch (option) {\n            case PRESERVE_NONE: return NONE;\n            case PRESERVE_ALL: return ALL;\n            case PRESERVE_LAST: return LAST;\n            default: throw new IllegalArgumentException(\"Invalid preserve-missed value: \" + option);\n        }\n    }", "code_tokens": ["public", "static", "TimerPreserveMissed", "fromInt", "(", "int", "option", ")", "throws", "IllegalArgumentException", "{", "switch", "(", "option", ")", "{", "case", "PRESERVE_NONE", ":", "return", "NONE", ";", "case", "PRESERVE_ALL", ":", "return", "ALL", ";", "case", "PRESERVE_LAST", ":", "return", "LAST", ";", "default", ":", "throw", "new", "IllegalArgumentException", "(", "\"Invalid preserve-missed value: \"", "+", "option", ")", ";", "}", "}"], "docstring": "Get a <code>TimerPreserveMissed</code> object from an integer value.\n@param option the preserve-missed option as an integer.\n@return a <code>TimerPreserveMissed</code> object corresponding to <code>option</code>.\n@throws IllegalArgumentException if <code>option</code> is not a valid\npreserve-missed option value.", "docstring_tokens": ["Get", "a", "<code", ">", "TimerPreserveMissed<", "/", "code", ">", "object", "from", "an", "integer", "value", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/facilities/TimerPreserveMissed.java#L79-L86", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/SbbEntityFactoryCacheData.java", "func_name": "SbbEntityFactoryCacheData.getSbbEntities", "original_string": "public Set<SbbEntityID> getSbbEntities() {\n\t\tfinal Node node = getNode();\n\t\tif (node == null) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\t\tHashSet<SbbEntityID> result = new HashSet<SbbEntityID>();\n\t\tServiceID serviceID = null;\n\t\tfor (Object obj : node.getChildrenNames()) {\n\t\t\tserviceID = (ServiceID) obj;\n\t\t\tfor (SbbEntityID sbbEntityID : getRootSbbEntityIDs(serviceID)) {\n\t\t\t\tresult.add(sbbEntityID);\n\t\t\t\tcollectSbbEntities(sbbEntityID,result);\n\t\t\t}\n\t\t}\t\t\n\t\treturn result;\n\t}", "language": "java", "code": "public Set<SbbEntityID> getSbbEntities() {\n\t\tfinal Node node = getNode();\n\t\tif (node == null) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\t\tHashSet<SbbEntityID> result = new HashSet<SbbEntityID>();\n\t\tServiceID serviceID = null;\n\t\tfor (Object obj : node.getChildrenNames()) {\n\t\t\tserviceID = (ServiceID) obj;\n\t\t\tfor (SbbEntityID sbbEntityID : getRootSbbEntityIDs(serviceID)) {\n\t\t\t\tresult.add(sbbEntityID);\n\t\t\t\tcollectSbbEntities(sbbEntityID,result);\n\t\t\t}\n\t\t}\t\t\n\t\treturn result;\n\t}", "code_tokens": ["public", "Set", "<", "SbbEntityID", ">", "getSbbEntities", "(", ")", "{", "final", "Node", "node", "=", "getNode", "(", ")", ";", "if", "(", "node", "==", "null", ")", "{", "return", "Collections", ".", "emptySet", "(", ")", ";", "}", "HashSet", "<", "SbbEntityID", ">", "result", "=", "new", "HashSet", "<", "SbbEntityID", ">", "(", ")", ";", "ServiceID", "serviceID", "=", "null", ";", "for", "(", "Object", "obj", ":", "node", ".", "getChildrenNames", "(", ")", ")", "{", "serviceID", "=", "(", "ServiceID", ")", "obj", ";", "for", "(", "SbbEntityID", "sbbEntityID", ":", "getRootSbbEntityIDs", "(", "serviceID", ")", ")", "{", "result", ".", "add", "(", "sbbEntityID", ")", ";", "collectSbbEntities", "(", "sbbEntityID", ",", "result", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "Retrieves a set containing sbb entity ids in the factory\ncache data\n\n@return", "docstring_tokens": ["Retrieves", "a", "set", "containing", "sbb", "entity", "ids", "in", "the", "factory", "cache", "data"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/SbbEntityFactoryCacheData.java#L68-L83", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/usage/UsageNotification.java", "func_name": "UsageNotification.writeObject", "original_string": "private void writeObject(ObjectOutputStream out) throws IOException {\n        VendorExtensionUtils.writeObject(out, vendorDataSerializationEnabled ? vendorData : null);\n    }", "language": "java", "code": "private void writeObject(ObjectOutputStream out) throws IOException {\n        VendorExtensionUtils.writeObject(out, vendorDataSerializationEnabled ? vendorData : null);\n    }", "code_tokens": ["private", "void", "writeObject", "(", "ObjectOutputStream", "out", ")", "throws", "IOException", "{", "VendorExtensionUtils", ".", "writeObject", "(", "out", ",", "vendorDataSerializationEnabled", "?", "vendorData", ":", "null", ")", ";", "}"], "docstring": "special handling of serialization", "docstring_tokens": ["special", "handling", "of", "serialization"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/usage/UsageNotification.java#L395-L397", "partition": "test"}
