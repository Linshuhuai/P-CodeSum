{"repo": "RestComm/jain-slee", "path": "container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java", "func_name": "SleeTransactionImpl.asyncCommit", "original_string": "public void asyncCommit(CommitListener commitListener)\n\t\t\tthrows IllegalStateException, SecurityException {\n\t\tbeforeAsyncOperation();\n\t\ttransactionManager.getExecutorService().submit(new AsyncTransactionCommitRunnable(\n\t\t\t\tcommitListener, transaction));\n\t}", "language": "java", "code": "public void asyncCommit(CommitListener commitListener)\n\t\t\tthrows IllegalStateException, SecurityException {\n\t\tbeforeAsyncOperation();\n\t\ttransactionManager.getExecutorService().submit(new AsyncTransactionCommitRunnable(\n\t\t\t\tcommitListener, transaction));\n\t}", "code_tokens": ["public", "void", "asyncCommit", "(", "CommitListener", "commitListener", ")", "throws", "IllegalStateException", ",", "SecurityException", "{", "beforeAsyncOperation", "(", ")", ";", "transactionManager", ".", "getExecutorService", "(", ")", ".", "submit", "(", "new", "AsyncTransactionCommitRunnable", "(", "commitListener", ",", "transaction", ")", ")", ";", "}"], "docstring": "/*\n(non-Javadoc)\n@see javax.slee.transaction.SleeTransaction#asyncCommit(javax.slee.transaction.CommitListener)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java#L146-L151", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java", "func_name": "SleeTransactionImpl.asyncRollback", "original_string": "public void asyncRollback(RollbackListener rollbackListener)\n\t\t\tthrows IllegalStateException, SecurityException {\n\t\tbeforeAsyncOperation();\n\t\ttransactionManager.getExecutorService().submit(new AsyncTransactionRollbackRunnable(\n\t\t\t\trollbackListener, transaction));\n\t}", "language": "java", "code": "public void asyncRollback(RollbackListener rollbackListener)\n\t\t\tthrows IllegalStateException, SecurityException {\n\t\tbeforeAsyncOperation();\n\t\ttransactionManager.getExecutorService().submit(new AsyncTransactionRollbackRunnable(\n\t\t\t\trollbackListener, transaction));\n\t}", "code_tokens": ["public", "void", "asyncRollback", "(", "RollbackListener", "rollbackListener", ")", "throws", "IllegalStateException", ",", "SecurityException", "{", "beforeAsyncOperation", "(", ")", ";", "transactionManager", ".", "getExecutorService", "(", ")", ".", "submit", "(", "new", "AsyncTransactionRollbackRunnable", "(", "rollbackListener", ",", "transaction", ")", ")", ";", "}"], "docstring": "/*\n(non-Javadoc)\n@see javax.slee.transaction.SleeTransaction#asyncRollback(javax.slee.transaction.RollbackListener)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java#L157-L162", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/management/ResourceAdaptorEntityState.java", "func_name": "ResourceAdaptorEntityState.fromInt", "original_string": "public static ResourceAdaptorEntityState fromInt(int state) throws IllegalArgumentException {\n        switch (state) {\n            case ENTITY_INACTIVE: return INACTIVE;\n            case ENTITY_ACTIVE: return ACTIVE;\n            case ENTITY_STOPPING: return STOPPING;\n            default: throw new IllegalArgumentException(\"Invalid state: \" + state);\n        }\n    }", "language": "java", "code": "public static ResourceAdaptorEntityState fromInt(int state) throws IllegalArgumentException {\n        switch (state) {\n            case ENTITY_INACTIVE: return INACTIVE;\n            case ENTITY_ACTIVE: return ACTIVE;\n            case ENTITY_STOPPING: return STOPPING;\n            default: throw new IllegalArgumentException(\"Invalid state: \" + state);\n        }\n    }", "code_tokens": ["public", "static", "ResourceAdaptorEntityState", "fromInt", "(", "int", "state", ")", "throws", "IllegalArgumentException", "{", "switch", "(", "state", ")", "{", "case", "ENTITY_INACTIVE", ":", "return", "INACTIVE", ";", "case", "ENTITY_ACTIVE", ":", "return", "ACTIVE", ";", "case", "ENTITY_STOPPING", ":", "return", "STOPPING", ";", "default", ":", "throw", "new", "IllegalArgumentException", "(", "\"Invalid state: \"", "+", "state", ")", ";", "}", "}"], "docstring": "Get a <code>ResourceAdaptorEntityState</code> object from an integer value.\n@param state the state as an integer.\n@return a <code>ResourceAdaptorEntityState</code> object corresponding to <code>state</code>.\n@throws IllegalArgumentException if <code>state</code> is not a valid resource\nadaptor entity state value.", "docstring_tokens": ["Get", "a", "<code", ">", "ResourceAdaptorEntityState<", "/", "code", ">", "object", "from", "an", "integer", "value", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/management/ResourceAdaptorEntityState.java#L79-L86", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java", "func_name": "ConcreteClassGeneratorUtils.copyMethods", "original_string": "public static void copyMethods(CtMethod[] methods, CtClass destination,\r\n\t\t\tCtClass[] exceptions) {\r\n\t\tCtMethod methodCopy = null;\r\n\t\tfor (CtMethod method : methods) {\r\n\t\t\ttry {\r\n\t\t\t\tmethodCopy = new CtMethod(method, destination, null);\r\n\t\t\t\tif (exceptions != null) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tmethodCopy.setExceptionTypes(exceptions);\r\n\t\t\t\t\t} catch (NotFoundException e) {\r\n\t\t\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdestination.addMethod(methodCopy);\r\n\t\t\t} catch (CannotCompileException e) {\r\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "public static void copyMethods(CtMethod[] methods, CtClass destination,\r\n\t\t\tCtClass[] exceptions) {\r\n\t\tCtMethod methodCopy = null;\r\n\t\tfor (CtMethod method : methods) {\r\n\t\t\ttry {\r\n\t\t\t\tmethodCopy = new CtMethod(method, destination, null);\r\n\t\t\t\tif (exceptions != null) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tmethodCopy.setExceptionTypes(exceptions);\r\n\t\t\t\t\t} catch (NotFoundException e) {\r\n\t\t\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdestination.addMethod(methodCopy);\r\n\t\t\t} catch (CannotCompileException e) {\r\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["public", "static", "void", "copyMethods", "(", "CtMethod", "[", "]", "methods", ",", "CtClass", "destination", ",", "CtClass", "[", "]", "exceptions", ")", "{", "CtMethod", "methodCopy", "=", "null", ";", "for", "(", "CtMethod", "method", ":", "methods", ")", "{", "try", "{", "methodCopy", "=", "new", "CtMethod", "(", "method", ",", "destination", ",", "null", ")", ";", "if", "(", "exceptions", "!=", "null", ")", "{", "try", "{", "methodCopy", ".", "setExceptionTypes", "(", "exceptions", ")", ";", "}", "catch", "(", "NotFoundException", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "destination", ".", "addMethod", "(", "methodCopy", ")", ";", "}", "catch", "(", "CannotCompileException", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}"], "docstring": "Copy methods to a class\n\n@param methods\nthe methods to copy\n@param destination\nthe class to which the methods are copied\n@param exceptions\noptional, defines the set of exceptions the methods can throw", "docstring_tokens": ["Copy", "methods", "to", "a", "class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java#L509-L527", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/AddressPlan.java", "func_name": "AddressPlan.fromString", "original_string": "public static AddressPlan fromString(String plan) throws NullPointerException, IllegalArgumentException {\n        if (plan == null) throw new NullPointerException(\"plan is null\");\n        if (plan.equalsIgnoreCase(NOT_PRESENT_STRING)) return NOT_PRESENT;\n        if (plan.equalsIgnoreCase(UNDEFINED_STRING)) return UNDEFINED;\n        if (plan.equalsIgnoreCase(IP_STRING)) return IP;\n        if (plan.equalsIgnoreCase(MULTICAST_STRING)) return MULTICAST;\n        if (plan.equalsIgnoreCase(UNICAST_STRING)) return UNICAST;\n        if (plan.equalsIgnoreCase(E164_STRING)) return E164;\n        if (plan.equalsIgnoreCase(AESA_STRING)) return AESA;\n        if (plan.equalsIgnoreCase(URI_STRING)) return URI;\n        if (plan.equalsIgnoreCase(NSAP_STRING)) return NSAP;\n        if (plan.equalsIgnoreCase(SMTP_STRING)) return SMTP;\n        if (plan.equalsIgnoreCase(X400_STRING)) return X400;\n        if (plan.equalsIgnoreCase(SIP_STRING)) return SIP;\n        if (plan.equalsIgnoreCase(E164_MOBILE_STRING)) return E164_MOBILE;\n        if (plan.equalsIgnoreCase(H323_STRING)) return H323;\n        if (plan.equalsIgnoreCase(GT_STRING)) return GT;\n        if (plan.equalsIgnoreCase(SSN_STRING)) return SSN;\n        if (plan.equalsIgnoreCase(SLEE_PROFILE_TABLE_STRING)) return SLEE_PROFILE_TABLE;\n        if (plan.equalsIgnoreCase(SLEE_PROFILE_STRING)) return SLEE_PROFILE;\n        throw new IllegalArgumentException(\"Invalid address plan: \" + plan);\n    }", "language": "java", "code": "public static AddressPlan fromString(String plan) throws NullPointerException, IllegalArgumentException {\n        if (plan == null) throw new NullPointerException(\"plan is null\");\n        if (plan.equalsIgnoreCase(NOT_PRESENT_STRING)) return NOT_PRESENT;\n        if (plan.equalsIgnoreCase(UNDEFINED_STRING)) return UNDEFINED;\n        if (plan.equalsIgnoreCase(IP_STRING)) return IP;\n        if (plan.equalsIgnoreCase(MULTICAST_STRING)) return MULTICAST;\n        if (plan.equalsIgnoreCase(UNICAST_STRING)) return UNICAST;\n        if (plan.equalsIgnoreCase(E164_STRING)) return E164;\n        if (plan.equalsIgnoreCase(AESA_STRING)) return AESA;\n        if (plan.equalsIgnoreCase(URI_STRING)) return URI;\n        if (plan.equalsIgnoreCase(NSAP_STRING)) return NSAP;\n        if (plan.equalsIgnoreCase(SMTP_STRING)) return SMTP;\n        if (plan.equalsIgnoreCase(X400_STRING)) return X400;\n        if (plan.equalsIgnoreCase(SIP_STRING)) return SIP;\n        if (plan.equalsIgnoreCase(E164_MOBILE_STRING)) return E164_MOBILE;\n        if (plan.equalsIgnoreCase(H323_STRING)) return H323;\n        if (plan.equalsIgnoreCase(GT_STRING)) return GT;\n        if (plan.equalsIgnoreCase(SSN_STRING)) return SSN;\n        if (plan.equalsIgnoreCase(SLEE_PROFILE_TABLE_STRING)) return SLEE_PROFILE_TABLE;\n        if (plan.equalsIgnoreCase(SLEE_PROFILE_STRING)) return SLEE_PROFILE;\n        throw new IllegalArgumentException(\"Invalid address plan: \" + plan);\n    }", "code_tokens": ["public", "static", "AddressPlan", "fromString", "(", "String", "plan", ")", "throws", "NullPointerException", ",", "IllegalArgumentException", "{", "if", "(", "plan", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"plan is null\"", ")", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "NOT_PRESENT_STRING", ")", ")", "return", "NOT_PRESENT", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "UNDEFINED_STRING", ")", ")", "return", "UNDEFINED", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "IP_STRING", ")", ")", "return", "IP", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "MULTICAST_STRING", ")", ")", "return", "MULTICAST", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "UNICAST_STRING", ")", ")", "return", "UNICAST", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "E164_STRING", ")", ")", "return", "E164", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "AESA_STRING", ")", ")", "return", "AESA", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "URI_STRING", ")", ")", "return", "URI", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "NSAP_STRING", ")", ")", "return", "NSAP", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "SMTP_STRING", ")", ")", "return", "SMTP", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "X400_STRING", ")", ")", "return", "X400", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "SIP_STRING", ")", ")", "return", "SIP", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "E164_MOBILE_STRING", ")", ")", "return", "E164_MOBILE", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "H323_STRING", ")", ")", "return", "H323", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "GT_STRING", ")", ")", "return", "GT", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "SSN_STRING", ")", ")", "return", "SSN", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "SLEE_PROFILE_TABLE_STRING", ")", ")", "return", "SLEE_PROFILE_TABLE", ";", "if", "(", "plan", ".", "equalsIgnoreCase", "(", "SLEE_PROFILE_STRING", ")", ")", "return", "SLEE_PROFILE", ";", "throw", "new", "IllegalArgumentException", "(", "\"Invalid address plan: \"", "+", "plan", ")", ";", "}"], "docstring": "Get an <code>AddressPlan</code> object from a string value.\n@param plan the address plan as a string, for example as returned by the {@link #toString()}\nmethod (case insensitive).\n@return an <code>AddressPlan</code> object corresponding to <code>plan</code>.\n@throws NullPointerException if <code>plan</code> is <code>null</code>.\n@throws IllegalArgumentException if <code>plan</code> is not a valid\naddress plan value.\n@since SLEE 1.1", "docstring_tokens": ["Get", "an", "<code", ">", "AddressPlan<", "/", "code", ">", "object", "from", "a", "string", "value", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/AddressPlan.java#L351-L372", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/timers/src/main/java/org/mobicents/slee/runtime/facilities/TimerFacilityImpl.java", "func_name": "TimerFacilityImpl.getActivityContextInterface", "original_string": "public ActivityContextInterface getActivityContextInterface(TimerID timerID)\r\n\t\t\tthrows NullPointerException, TransactionRequiredLocalException,\r\n\t\t\tFacilityException {\r\n\t\tif (timerID == null) {\r\n\t\t\tthrow new NullPointerException(\"null timerID\");\r\n\t\t}\r\n\t\t\r\n\t\tsleeContainer.getTransactionManager().mandateTransaction();\r\n\t\t\r\n\t\tTimerFacilityTimerTaskData taskData = (TimerFacilityTimerTaskData) scheduler.getTimerTaskData(timerID);\r\n\t\tif (taskData != null) {\r\n\t\t\ttry {\r\n\t\t\t\treturn sleeContainer.getActivityContextFactory().getActivityContext(taskData.getActivityContextHandle()).getActivityContextInterface();\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new FacilityException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\t\t\r\n\t\t}\r\n\t}", "language": "java", "code": "public ActivityContextInterface getActivityContextInterface(TimerID timerID)\r\n\t\t\tthrows NullPointerException, TransactionRequiredLocalException,\r\n\t\t\tFacilityException {\r\n\t\tif (timerID == null) {\r\n\t\t\tthrow new NullPointerException(\"null timerID\");\r\n\t\t}\r\n\t\t\r\n\t\tsleeContainer.getTransactionManager().mandateTransaction();\r\n\t\t\r\n\t\tTimerFacilityTimerTaskData taskData = (TimerFacilityTimerTaskData) scheduler.getTimerTaskData(timerID);\r\n\t\tif (taskData != null) {\r\n\t\t\ttry {\r\n\t\t\t\treturn sleeContainer.getActivityContextFactory().getActivityContext(taskData.getActivityContextHandle()).getActivityContextInterface();\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new FacilityException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\t\t\r\n\t\t}\r\n\t}", "code_tokens": ["public", "ActivityContextInterface", "getActivityContextInterface", "(", "TimerID", "timerID", ")", "throws", "NullPointerException", ",", "TransactionRequiredLocalException", ",", "FacilityException", "{", "if", "(", "timerID", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"null timerID\"", ")", ";", "}", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "mandateTransaction", "(", ")", ";", "TimerFacilityTimerTaskData", "taskData", "=", "(", "TimerFacilityTimerTaskData", ")", "scheduler", ".", "getTimerTaskData", "(", "timerID", ")", ";", "if", "(", "taskData", "!=", "null", ")", "{", "try", "{", "return", "sleeContainer", ".", "getActivityContextFactory", "(", ")", ".", "getActivityContext", "(", "taskData", ".", "getActivityContextHandle", "(", ")", ")", ".", "getActivityContextInterface", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "FacilityException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "else", "{", "return", "null", ";", "}", "}"], "docstring": "/*\n(non-Javadoc)\n@see javax.slee.facilities.TimerFacility#getActivityContextInterface(javax.slee.facilities.TimerID)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/timers/src/main/java/org/mobicents/slee/runtime/facilities/TimerFacilityImpl.java#L260-L280", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/SbbManagementImpl.java", "func_name": "SbbManagementImpl.uninstallSbb", "original_string": "public void uninstallSbb(final SbbComponent sbbComponent)\n\t\t\tthrows SystemException, Exception, NamingException {\n\n\t\tfinal SleeTransactionManager sleeTransactionManager = sleeContainer\n\t\t\t\t.getTransactionManager();\n\t\tsleeTransactionManager.mandateTransaction();\n\n\t\tif (logger.isDebugEnabled())\n\t\t\tlogger.debug(\"Uninstalling \"+sbbComponent);\n\n\t\t// remove sbb from trace and alarm facilities\n\t\tsleeContainer.getTraceManagement().getTraceFacility().unSetTraceLevel(\n\t\t\t\tsbbComponent.getSbbID());\n\t\tsleeContainer.getAlarmManagement().unRegisterComponent(\n\t\t\t\tsbbComponent.getSbbID());\n\t\t\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Removed SBB \" + sbbComponent.getSbbID()\n\t\t\t\t\t+ \" from trace and alarm facilities\");\n\t\t}\n\t\t\n\t\tsleeContainer.getJndiManagement().componentUninstall(sbbComponent);\n\t\t\n\t\t// if we are in cluster mode we need to remove the sbb class loader domain from the replication class loader\n\t\tif (!sleeContainer.getCluster().getMobicentsCache().isLocalMode()) {\n\t\t\tfinal ReplicationClassLoader replicationClassLoader = sleeContainer.getReplicationClassLoader();\n\t\t\tTransactionalAction action2 = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\treplicationClassLoader.removeDomain(sbbComponent.getClassLoaderDomain());\n\t\t\t\t}\n\t\t\t};\n\t\t\tsleeTransactionManager.getTransactionContext().getAfterCommitActions().add(action2);\n\t\t}\n\n\t}", "language": "java", "code": "public void uninstallSbb(final SbbComponent sbbComponent)\n\t\t\tthrows SystemException, Exception, NamingException {\n\n\t\tfinal SleeTransactionManager sleeTransactionManager = sleeContainer\n\t\t\t\t.getTransactionManager();\n\t\tsleeTransactionManager.mandateTransaction();\n\n\t\tif (logger.isDebugEnabled())\n\t\t\tlogger.debug(\"Uninstalling \"+sbbComponent);\n\n\t\t// remove sbb from trace and alarm facilities\n\t\tsleeContainer.getTraceManagement().getTraceFacility().unSetTraceLevel(\n\t\t\t\tsbbComponent.getSbbID());\n\t\tsleeContainer.getAlarmManagement().unRegisterComponent(\n\t\t\t\tsbbComponent.getSbbID());\n\t\t\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Removed SBB \" + sbbComponent.getSbbID()\n\t\t\t\t\t+ \" from trace and alarm facilities\");\n\t\t}\n\t\t\n\t\tsleeContainer.getJndiManagement().componentUninstall(sbbComponent);\n\t\t\n\t\t// if we are in cluster mode we need to remove the sbb class loader domain from the replication class loader\n\t\tif (!sleeContainer.getCluster().getMobicentsCache().isLocalMode()) {\n\t\t\tfinal ReplicationClassLoader replicationClassLoader = sleeContainer.getReplicationClassLoader();\n\t\t\tTransactionalAction action2 = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\treplicationClassLoader.removeDomain(sbbComponent.getClassLoaderDomain());\n\t\t\t\t}\n\t\t\t};\n\t\t\tsleeTransactionManager.getTransactionContext().getAfterCommitActions().add(action2);\n\t\t}\n\n\t}", "code_tokens": ["public", "void", "uninstallSbb", "(", "final", "SbbComponent", "sbbComponent", ")", "throws", "SystemException", ",", "Exception", ",", "NamingException", "{", "final", "SleeTransactionManager", "sleeTransactionManager", "=", "sleeContainer", ".", "getTransactionManager", "(", ")", ";", "sleeTransactionManager", ".", "mandateTransaction", "(", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "logger", ".", "debug", "(", "\"Uninstalling \"", "+", "sbbComponent", ")", ";", "// remove sbb from trace and alarm facilities", "sleeContainer", ".", "getTraceManagement", "(", ")", ".", "getTraceFacility", "(", ")", ".", "unSetTraceLevel", "(", "sbbComponent", ".", "getSbbID", "(", ")", ")", ";", "sleeContainer", ".", "getAlarmManagement", "(", ")", ".", "unRegisterComponent", "(", "sbbComponent", ".", "getSbbID", "(", ")", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Removed SBB \"", "+", "sbbComponent", ".", "getSbbID", "(", ")", "+", "\" from trace and alarm facilities\"", ")", ";", "}", "sleeContainer", ".", "getJndiManagement", "(", ")", ".", "componentUninstall", "(", "sbbComponent", ")", ";", "// if we are in cluster mode we need to remove the sbb class loader domain from the replication class loader", "if", "(", "!", "sleeContainer", ".", "getCluster", "(", ")", ".", "getMobicentsCache", "(", ")", ".", "isLocalMode", "(", ")", ")", "{", "final", "ReplicationClassLoader", "replicationClassLoader", "=", "sleeContainer", ".", "getReplicationClassLoader", "(", ")", ";", "TransactionalAction", "action2", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "replicationClassLoader", ".", "removeDomain", "(", "sbbComponent", ".", "getClassLoaderDomain", "(", ")", ")", ";", "}", "}", ";", "sleeTransactionManager", ".", "getTransactionContext", "(", ")", ".", "getAfterCommitActions", "(", ")", ".", "add", "(", "action2", ")", ";", "}", "}"], "docstring": "/*\n(non-Javadoc)\n@see org.mobicents.slee.container.management.SbbManagement#uninstallSbb(org.mobicents.slee.core.component.sbb.SbbComponent)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/SbbManagementImpl.java#L585-L619", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/management/jmx/DeploymentMBeanImpl.java", "func_name": "DeploymentMBeanImpl.isInstalled", "original_string": "public boolean isInstalled(ComponentID componentID)\n\t\t\tthrows NullPointerException, ManagementException {\n\t\tif (componentID == null)\n\t\t\tthrow new NullPointerException(\"null componentID\");\n\t\ttry {\n\t\t\treturn getSleeContainer().getComponentRepository()\n\t\t\t\t\t.isInstalled(componentID);\n\t\t} catch (Throwable ex) {\n\t\t\tthrow new ManagementException(ex.getMessage(), ex);\n\t\t}\n\t}", "language": "java", "code": "public boolean isInstalled(ComponentID componentID)\n\t\t\tthrows NullPointerException, ManagementException {\n\t\tif (componentID == null)\n\t\t\tthrow new NullPointerException(\"null componentID\");\n\t\ttry {\n\t\t\treturn getSleeContainer().getComponentRepository()\n\t\t\t\t\t.isInstalled(componentID);\n\t\t} catch (Throwable ex) {\n\t\t\tthrow new ManagementException(ex.getMessage(), ex);\n\t\t}\n\t}", "code_tokens": ["public", "boolean", "isInstalled", "(", "ComponentID", "componentID", ")", "throws", "NullPointerException", ",", "ManagementException", "{", "if", "(", "componentID", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"null componentID\"", ")", ";", "try", "{", "return", "getSleeContainer", "(", ")", ".", "getComponentRepository", "(", ")", ".", "isInstalled", "(", "componentID", ")", ";", "}", "catch", "(", "Throwable", "ex", ")", "{", "throw", "new", "ManagementException", "(", "ex", ".", "getMessage", "(", ")", ",", "ex", ")", ";", "}", "}"], "docstring": "/*\n(non-Javadoc)\n\n@see javax.slee.management.DeploymentMBean#isInstalled(javax.slee.ComponentID)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/management/jmx/DeploymentMBeanImpl.java#L955-L965", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/router/src/main/java/org/mobicents/slee/runtime/eventrouter/stats/EventRouterStatisticsImpl.java", "func_name": "EventRouterStatisticsImpl.getWorkingQueueSize", "original_string": "@Override\n\tpublic int getWorkingQueueSize(int executor) {\t\t\n\t\tfinal EventRouterExecutorStatistics executorStats = getExecutors()[executor].getStatistics();\n\t\treturn executorStats == null ? 0 : executorStats.getWorkingQueueSize();\n\t}", "language": "java", "code": "@Override\n\tpublic int getWorkingQueueSize(int executor) {\t\t\n\t\tfinal EventRouterExecutorStatistics executorStats = getExecutors()[executor].getStatistics();\n\t\treturn executorStats == null ? 0 : executorStats.getWorkingQueueSize();\n\t}", "code_tokens": ["@", "Override", "public", "int", "getWorkingQueueSize", "(", "int", "executor", ")", "{", "final", "EventRouterExecutorStatistics", "executorStats", "=", "getExecutors", "(", ")", "[", "executor", "]", ".", "getStatistics", "(", ")", ";", "return", "executorStats", "==", "null", "?", "0", ":", "executorStats", ".", "getWorkingQueueSize", "(", ")", ";", "}"], "docstring": "/*\n(non-Javadoc)\n@see org.mobicents.slee.container.eventrouter.stats.EventRouterStatistics#getWorkingQueueSize(int)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/router/src/main/java/org/mobicents/slee/runtime/eventrouter/stats/EventRouterStatisticsImpl.java#L247-L251", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java", "func_name": "ServiceManagementImpl.activityEnded", "original_string": "public void activityEnded(final ServiceActivityHandle activityHandle) {\n\t\t// do this only on tx commit and in a new thread, to escape the tx context\n\t\tfinal Runnable r = new Runnable() {\t\t\t\n\t\t\tpublic void run() {\n\t\t\t\tfinal ServiceID serviceID = activityHandle.getServiceID();\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Activity end for \" + serviceID);\n\t\t\t\t}\t\t\n\t\t\t\t// remove and cancel the timer task to force activity ending\n\t\t\t\tScheduledFuture<?> scheduledFuture = activityEndingTasks.remove(serviceID);\n\t\t\t\tif (scheduledFuture != null) {\n\t\t\t\t\tscheduledFuture.cancel(true);\n\t\t\t\t}\n\t\t\t\t// get stopping service\n\t\t\t\tfinal ServiceComponent serviceComponent = componentRepositoryImpl\n\t\t\t\t.getComponentByID(serviceID);\n\t\t\t\tif (serviceComponent != null) {\n\t\t\t\t\tsynchronized (serviceComponent) {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Service is in \"\n\t\t\t\t\t\t\t\t\t+ serviceComponent.getServiceState() + \" state.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (serviceComponent.getServiceState().isStopping()) {\n\t\t\t\t\t\t\tcompleteServiceStop(serviceComponent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tserviceComponent.setActivityEnded(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(serviceID.toString()+ \" activity ended, but component not found, removed concurrently?\");\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t};\n\t\tfinal ExecutorService executorService = Executors.newSingleThreadExecutor(SLEE_THREAD_FACTORY);\n\t\tTransactionContext txContext = sleeContainer.getTransactionManager().getTransactionContext();\n\t\tif (txContext != null) {\n\t\t\tTransactionalAction txAction = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\texecutorService.execute(r);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"failed to execute task to complete service deactivation\",e);\n\t\t\t\t\t}\n\t\t\t\t\texecutorService.shutdown();\n\t\t\t\t}\n\t\t\t};\n\t\t\ttxContext.getAfterCommitActions().add(txAction);\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\texecutorService.execute(r);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlogger.error(\"failed to execute task to complete service deactivation\",e);\n\t\t\t}\n\t\t\texecutorService.shutdown();\n\t\t}\n\t}", "language": "java", "code": "public void activityEnded(final ServiceActivityHandle activityHandle) {\n\t\t// do this only on tx commit and in a new thread, to escape the tx context\n\t\tfinal Runnable r = new Runnable() {\t\t\t\n\t\t\tpublic void run() {\n\t\t\t\tfinal ServiceID serviceID = activityHandle.getServiceID();\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Activity end for \" + serviceID);\n\t\t\t\t}\t\t\n\t\t\t\t// remove and cancel the timer task to force activity ending\n\t\t\t\tScheduledFuture<?> scheduledFuture = activityEndingTasks.remove(serviceID);\n\t\t\t\tif (scheduledFuture != null) {\n\t\t\t\t\tscheduledFuture.cancel(true);\n\t\t\t\t}\n\t\t\t\t// get stopping service\n\t\t\t\tfinal ServiceComponent serviceComponent = componentRepositoryImpl\n\t\t\t\t.getComponentByID(serviceID);\n\t\t\t\tif (serviceComponent != null) {\n\t\t\t\t\tsynchronized (serviceComponent) {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Service is in \"\n\t\t\t\t\t\t\t\t\t+ serviceComponent.getServiceState() + \" state.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (serviceComponent.getServiceState().isStopping()) {\n\t\t\t\t\t\t\tcompleteServiceStop(serviceComponent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tserviceComponent.setActivityEnded(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(serviceID.toString()+ \" activity ended, but component not found, removed concurrently?\");\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t};\n\t\tfinal ExecutorService executorService = Executors.newSingleThreadExecutor(SLEE_THREAD_FACTORY);\n\t\tTransactionContext txContext = sleeContainer.getTransactionManager().getTransactionContext();\n\t\tif (txContext != null) {\n\t\t\tTransactionalAction txAction = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\texecutorService.execute(r);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"failed to execute task to complete service deactivation\",e);\n\t\t\t\t\t}\n\t\t\t\t\texecutorService.shutdown();\n\t\t\t\t}\n\t\t\t};\n\t\t\ttxContext.getAfterCommitActions().add(txAction);\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\texecutorService.execute(r);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlogger.error(\"failed to execute task to complete service deactivation\",e);\n\t\t\t}\n\t\t\texecutorService.shutdown();\n\t\t}\n\t}", "code_tokens": ["public", "void", "activityEnded", "(", "final", "ServiceActivityHandle", "activityHandle", ")", "{", "// do this only on tx commit and in a new thread, to escape the tx context", "final", "Runnable", "r", "=", "new", "Runnable", "(", ")", "{", "public", "void", "run", "(", ")", "{", "final", "ServiceID", "serviceID", "=", "activityHandle", ".", "getServiceID", "(", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Activity end for \"", "+", "serviceID", ")", ";", "}", "// remove and cancel the timer task to force activity ending", "ScheduledFuture", "<", "?", ">", "scheduledFuture", "=", "activityEndingTasks", ".", "remove", "(", "serviceID", ")", ";", "if", "(", "scheduledFuture", "!=", "null", ")", "{", "scheduledFuture", ".", "cancel", "(", "true", ")", ";", "}", "// get stopping service", "final", "ServiceComponent", "serviceComponent", "=", "componentRepositoryImpl", ".", "getComponentByID", "(", "serviceID", ")", ";", "if", "(", "serviceComponent", "!=", "null", ")", "{", "synchronized", "(", "serviceComponent", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Service is in \"", "+", "serviceComponent", ".", "getServiceState", "(", ")", "+", "\" state.\"", ")", ";", "}", "if", "(", "serviceComponent", ".", "getServiceState", "(", ")", ".", "isStopping", "(", ")", ")", "{", "completeServiceStop", "(", "serviceComponent", ")", ";", "}", "serviceComponent", ".", "setActivityEnded", "(", "true", ")", ";", "}", "}", "else", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "serviceID", ".", "toString", "(", ")", "+", "\" activity ended, but component not found, removed concurrently?\"", ")", ";", "}", "}", "}", "}", ";", "final", "ExecutorService", "executorService", "=", "Executors", ".", "newSingleThreadExecutor", "(", "SLEE_THREAD_FACTORY", ")", ";", "TransactionContext", "txContext", "=", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "getTransactionContext", "(", ")", ";", "if", "(", "txContext", "!=", "null", ")", "{", "TransactionalAction", "txAction", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "try", "{", "executorService", ".", "execute", "(", "r", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "error", "(", "\"failed to execute task to complete service deactivation\"", ",", "e", ")", ";", "}", "executorService", ".", "shutdown", "(", ")", ";", "}", "}", ";", "txContext", ".", "getAfterCommitActions", "(", ")", ".", "add", "(", "txAction", ")", ";", "}", "else", "{", "try", "{", "executorService", ".", "execute", "(", "r", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "error", "(", "\"failed to execute task to complete service deactivation\"", ",", "e", ")", ";", "}", "executorService", ".", "shutdown", "(", ")", ";", "}", "}"], "docstring": "/*\n(non-Javadoc)\n\n@see\norg.mobicents.slee.container.management.ServiceManagement#activityEnded\n(org.mobicents.slee.container.service.ServiceActivityHandle)", "docstring_tokens": ["/", "*", "(", "non", "-", "Javadoc", ")"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java#L967-L1027", "partition": "test"}
