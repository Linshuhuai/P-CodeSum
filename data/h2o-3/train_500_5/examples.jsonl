{"repo": "h2oai/h2o-3", "path": "py2/h2o_ray.py", "func_name": "model_metrics", "original_string": "def model_metrics(self, timeoutSecs=60, **kwargs):\n    '''\n    ModelMetrics list. \n    '''\n    result = self.do_json_request('/3/ModelMetrics.json', cmd='get', timeout=timeoutSecs)\n    h2o_sandbox.check_sandbox_for_errors()\n    return result", "language": "python", "code": "def model_metrics(self, timeoutSecs=60, **kwargs):\n    '''\n    ModelMetrics list. \n    '''\n    result = self.do_json_request('/3/ModelMetrics.json', cmd='get', timeout=timeoutSecs)\n    h2o_sandbox.check_sandbox_for_errors()\n    return result", "code_tokens": ["def", "model_metrics", "(", "self", ",", "timeoutSecs", "=", "60", ",", "*", "*", "kwargs", ")", ":", "result", "=", "self", ".", "do_json_request", "(", "'/3/ModelMetrics.json'", ",", "cmd", "=", "'get'", ",", "timeout", "=", "timeoutSecs", ")", "h2o_sandbox", ".", "check_sandbox_for_errors", "(", ")", "return", "result"], "docstring": "ModelMetrics list.", "docstring_tokens": ["ModelMetrics", "list", "."], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/py2/h2o_ray.py#L592-L598", "partition": "test", "index": 1332, "time": "2014-11-09 00:05:08"}
{"repo": "h2oai/h2o-3", "path": "py2/ec2_cmd.py", "func_name": "stop_instances", "original_string": "def stop_instances(instances, region):\n    '''stop all the instances given by its ids'''\n    if not instances: return\n    conn = ec2_connect(region)\n    log(\"Stopping instances {0}.\".format(instances))\n    conn.stop_instances(instances)\n    log(\"Done\")", "language": "python", "code": "def stop_instances(instances, region):\n    '''stop all the instances given by its ids'''\n    if not instances: return\n    conn = ec2_connect(region)\n    log(\"Stopping instances {0}.\".format(instances))\n    conn.stop_instances(instances)\n    log(\"Done\")", "code_tokens": ["def", "stop_instances", "(", "instances", ",", "region", ")", ":", "if", "not", "instances", ":", "return", "conn", "=", "ec2_connect", "(", "region", ")", "log", "(", "\"Stopping instances {0}.\"", ".", "format", "(", "instances", ")", ")", "conn", ".", "stop_instances", "(", "instances", ")", "log", "(", "\"Done\"", ")"], "docstring": "stop all the instances given by its ids", "docstring_tokens": ["stop", "all", "the", "instances", "given", "by", "its", "ids"], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/py2/ec2_cmd.py#L208-L214", "partition": "test", "index": 1337, "time": "2014-11-11 18:26:15"}
{"repo": "h2oai/h2o-3", "path": "py2/ec2_cmd.py", "func_name": "start_instances", "original_string": "def start_instances(instances, region):\n    '''Start all the instances given by its ids'''\n    if not instances: return\n    conn = ec2_connect(region)\n    log(\"Starting instances {0}.\".format(instances))\n    conn.start_instances(instances)\n    log(\"Done\")", "language": "python", "code": "def start_instances(instances, region):\n    '''Start all the instances given by its ids'''\n    if not instances: return\n    conn = ec2_connect(region)\n    log(\"Starting instances {0}.\".format(instances))\n    conn.start_instances(instances)\n    log(\"Done\")", "code_tokens": ["def", "start_instances", "(", "instances", ",", "region", ")", ":", "if", "not", "instances", ":", "return", "conn", "=", "ec2_connect", "(", "region", ")", "log", "(", "\"Starting instances {0}.\"", ".", "format", "(", "instances", ")", ")", "conn", ".", "start_instances", "(", "instances", ")", "log", "(", "\"Done\"", ")"], "docstring": "Start all the instances given by its ids", "docstring_tokens": ["Start", "all", "the", "instances", "given", "by", "its", "ids"], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/py2/ec2_cmd.py#L216-L222", "partition": "test", "index": 1338, "time": "2014-11-11 18:26:15"}
{"repo": "h2oai/h2o-3", "path": "py2/h2o_objects.py", "func_name": "H2O.stabilize", "original_string": "def stabilize(self, test_func, error, timeoutSecs=10, retryDelaySecs=0.5):\n        '''Repeatedly test a function waiting for it to return True.\n\n        Arguments:\n        test_func      -- A function that will be run repeatedly\n        error          -- A function that will be run to produce an error message\n                          it will be called with (node, timeTakenSecs, numberOfRetries)\n                    OR\n                       -- A string that will be interpolated with a dictionary of\n                          { 'timeTakenSecs', 'numberOfRetries' }\n        timeoutSecs    -- How long in seconds to keep trying before declaring a failure\n        retryDelaySecs -- How long to wait between retry attempts\n        '''\n        start = time.time()\n        numberOfRetries = 0\n        while h2o_args.no_timeout or (time.time() - start < timeoutSecs):\n            if test_func(self, tries=numberOfRetries, timeoutSecs=timeoutSecs):\n                break\n            time.sleep(retryDelaySecs)\n            numberOfRetries += 1\n            # hey, check the sandbox if we've been waiting a long time...rather than wait for timeout\n            # to find the badness?. can check_sandbox_for_errors at any time\n            if ((numberOfRetries % 50) == 0):\n                check_sandbox_for_errors(python_test_name=h2o_args.python_test_name)\n\n        else:\n            timeTakenSecs = time.time() - start\n            if isinstance(error, type('')):\n                raise Exception('%s failed after %.2f seconds having retried %d times' % (\n                    error, timeTakenSecs, numberOfRetries))\n            else:\n                msg = error(self, timeTakenSecs, numberOfRetries)\n                raise Exception(msg)", "language": "python", "code": "def stabilize(self, test_func, error, timeoutSecs=10, retryDelaySecs=0.5):\n        '''Repeatedly test a function waiting for it to return True.\n\n        Arguments:\n        test_func      -- A function that will be run repeatedly\n        error          -- A function that will be run to produce an error message\n                          it will be called with (node, timeTakenSecs, numberOfRetries)\n                    OR\n                       -- A string that will be interpolated with a dictionary of\n                          { 'timeTakenSecs', 'numberOfRetries' }\n        timeoutSecs    -- How long in seconds to keep trying before declaring a failure\n        retryDelaySecs -- How long to wait between retry attempts\n        '''\n        start = time.time()\n        numberOfRetries = 0\n        while h2o_args.no_timeout or (time.time() - start < timeoutSecs):\n            if test_func(self, tries=numberOfRetries, timeoutSecs=timeoutSecs):\n                break\n            time.sleep(retryDelaySecs)\n            numberOfRetries += 1\n            # hey, check the sandbox if we've been waiting a long time...rather than wait for timeout\n            # to find the badness?. can check_sandbox_for_errors at any time\n            if ((numberOfRetries % 50) == 0):\n                check_sandbox_for_errors(python_test_name=h2o_args.python_test_name)\n\n        else:\n            timeTakenSecs = time.time() - start\n            if isinstance(error, type('')):\n                raise Exception('%s failed after %.2f seconds having retried %d times' % (\n                    error, timeTakenSecs, numberOfRetries))\n            else:\n                msg = error(self, timeTakenSecs, numberOfRetries)\n                raise Exception(msg)", "code_tokens": ["def", "stabilize", "(", "self", ",", "test_func", ",", "error", ",", "timeoutSecs", "=", "10", ",", "retryDelaySecs", "=", "0.5", ")", ":", "start", "=", "time", ".", "time", "(", ")", "numberOfRetries", "=", "0", "while", "h2o_args", ".", "no_timeout", "or", "(", "time", ".", "time", "(", ")", "-", "start", "<", "timeoutSecs", ")", ":", "if", "test_func", "(", "self", ",", "tries", "=", "numberOfRetries", ",", "timeoutSecs", "=", "timeoutSecs", ")", ":", "break", "time", ".", "sleep", "(", "retryDelaySecs", ")", "numberOfRetries", "+=", "1", "# hey, check the sandbox if we've been waiting a long time...rather than wait for timeout", "# to find the badness?. can check_sandbox_for_errors at any time", "if", "(", "(", "numberOfRetries", "%", "50", ")", "==", "0", ")", ":", "check_sandbox_for_errors", "(", "python_test_name", "=", "h2o_args", ".", "python_test_name", ")", "else", ":", "timeTakenSecs", "=", "time", ".", "time", "(", ")", "-", "start", "if", "isinstance", "(", "error", ",", "type", "(", "''", ")", ")", ":", "raise", "Exception", "(", "'%s failed after %.2f seconds having retried %d times'", "%", "(", "error", ",", "timeTakenSecs", ",", "numberOfRetries", ")", ")", "else", ":", "msg", "=", "error", "(", "self", ",", "timeTakenSecs", ",", "numberOfRetries", ")", "raise", "Exception", "(", "msg", ")"], "docstring": "Repeatedly test a function waiting for it to return True.\n\n        Arguments:\n        test_func      -- A function that will be run repeatedly\n        error          -- A function that will be run to produce an error message\n                          it will be called with (node, timeTakenSecs, numberOfRetries)\n                    OR\n                       -- A string that will be interpolated with a dictionary of\n                          { 'timeTakenSecs', 'numberOfRetries' }\n        timeoutSecs    -- How long in seconds to keep trying before declaring a failure\n        retryDelaySecs -- How long to wait between retry attempts", "docstring_tokens": ["Repeatedly", "test", "a", "function", "waiting", "for", "it", "to", "return", "True", "."], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/py2/h2o_objects.py#L293-L325", "partition": "test", "index": 1326, "time": "2014-11-08 20:41:05"}
{"repo": "h2oai/h2o-3", "path": "py2/ec2_cmd.py", "func_name": "wait_for_ssh", "original_string": "def wait_for_ssh(ips, port=22, skipAlive=True, requiredsuccess=3):\n    ''' Wait for ssh service to appear on given hosts'''\n    log('Waiting for SSH on following hosts: {0}'.format(ips))\n    for ip in ips:\n        if not skipAlive or not ssh_live(ip, port): \n            log('Waiting for SSH on instance {0}...'.format(ip))\n            count = 0\n            while count < requiredsuccess:\n                if ssh_live(ip, port):\n                    count += 1\n                else:\n                    count = 0\n                time.sleep(1)\n                h2o_cmd.dot()", "language": "python", "code": "def wait_for_ssh(ips, port=22, skipAlive=True, requiredsuccess=3):\n    ''' Wait for ssh service to appear on given hosts'''\n    log('Waiting for SSH on following hosts: {0}'.format(ips))\n    for ip in ips:\n        if not skipAlive or not ssh_live(ip, port): \n            log('Waiting for SSH on instance {0}...'.format(ip))\n            count = 0\n            while count < requiredsuccess:\n                if ssh_live(ip, port):\n                    count += 1\n                else:\n                    count = 0\n                time.sleep(1)\n                h2o_cmd.dot()", "code_tokens": ["def", "wait_for_ssh", "(", "ips", ",", "port", "=", "22", ",", "skipAlive", "=", "True", ",", "requiredsuccess", "=", "3", ")", ":", "log", "(", "'Waiting for SSH on following hosts: {0}'", ".", "format", "(", "ips", ")", ")", "for", "ip", "in", "ips", ":", "if", "not", "skipAlive", "or", "not", "ssh_live", "(", "ip", ",", "port", ")", ":", "log", "(", "'Waiting for SSH on instance {0}...'", ".", "format", "(", "ip", ")", ")", "count", "=", "0", "while", "count", "<", "requiredsuccess", ":", "if", "ssh_live", "(", "ip", ",", "port", ")", ":", "count", "+=", "1", "else", ":", "count", "=", "0", "time", ".", "sleep", "(", "1", ")", "h2o_cmd", ".", "dot", "(", ")"], "docstring": "Wait for ssh service to appear on given hosts", "docstring_tokens": ["Wait", "for", "ssh", "service", "to", "appear", "on", "given", "hosts"], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/py2/ec2_cmd.py#L232-L245", "partition": "test", "index": 1340, "time": "2014-11-11 18:26:15"}
{"repo": "h2oai/h2o-3", "path": "py2/h2o_ray.py", "func_name": "summary", "original_string": "def summary(self, key, column=\"C1\", timeoutSecs=10, **kwargs):\n    '''\n    Return the summary for a single column for a single Frame in the h2o cluster.  \n    '''\n    params_dict = { \n        # 'offset': 0,\n        # 'len': 100\n    }\n    h2o_methods.check_params_update_kwargs(params_dict, kwargs, 'summary', True)\n    \n    result = self.do_json_request('3/Frames.json/%s/columns/%s/summary' % (key, column), timeout=timeoutSecs, params=params_dict)\n    h2o_sandbox.check_sandbox_for_errors()\n    return result", "language": "python", "code": "def summary(self, key, column=\"C1\", timeoutSecs=10, **kwargs):\n    '''\n    Return the summary for a single column for a single Frame in the h2o cluster.  \n    '''\n    params_dict = { \n        # 'offset': 0,\n        # 'len': 100\n    }\n    h2o_methods.check_params_update_kwargs(params_dict, kwargs, 'summary', True)\n    \n    result = self.do_json_request('3/Frames.json/%s/columns/%s/summary' % (key, column), timeout=timeoutSecs, params=params_dict)\n    h2o_sandbox.check_sandbox_for_errors()\n    return result", "code_tokens": ["def", "summary", "(", "self", ",", "key", ",", "column", "=", "\"C1\"", ",", "timeoutSecs", "=", "10", ",", "*", "*", "kwargs", ")", ":", "params_dict", "=", "{", "# 'offset': 0,", "# 'len': 100", "}", "h2o_methods", ".", "check_params_update_kwargs", "(", "params_dict", ",", "kwargs", ",", "'summary'", ",", "True", ")", "result", "=", "self", ".", "do_json_request", "(", "'3/Frames.json/%s/columns/%s/summary'", "%", "(", "key", ",", "column", ")", ",", "timeout", "=", "timeoutSecs", ",", "params", "=", "params_dict", ")", "h2o_sandbox", ".", "check_sandbox_for_errors", "(", ")", "return", "result"], "docstring": "Return the summary for a single column for a single Frame in the h2o cluster.", "docstring_tokens": ["Return", "the", "summary", "for", "a", "single", "column", "for", "a", "single", "Frame", "in", "the", "h2o", "cluster", "."], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/py2/h2o_ray.py#L347-L359", "partition": "test", "index": 1327, "time": "2014-11-09 00:05:08"}
{"repo": "h2oai/h2o-3", "path": "py2/h2o_ray.py", "func_name": "delete_model", "original_string": "def delete_model(self, key, ignoreMissingKey=True, timeoutSecs=60, **kwargs):\n    '''\n    Delete a model on the h2o cluster, given its key.\n    '''\n    assert key is not None, '\"key\" parameter is null'\n\n    result = self.do_json_request('/3/Models.json/' + key, cmd='delete', timeout=timeoutSecs)\n\n    # TODO: look for what?\n    if not ignoreMissingKey and 'f00b4r' in result:\n        raise ValueError('Model key not found: ' + key)\n\n    verboseprint(\"delete_model result:\", dump_json(result))\n    return result", "language": "python", "code": "def delete_model(self, key, ignoreMissingKey=True, timeoutSecs=60, **kwargs):\n    '''\n    Delete a model on the h2o cluster, given its key.\n    '''\n    assert key is not None, '\"key\" parameter is null'\n\n    result = self.do_json_request('/3/Models.json/' + key, cmd='delete', timeout=timeoutSecs)\n\n    # TODO: look for what?\n    if not ignoreMissingKey and 'f00b4r' in result:\n        raise ValueError('Model key not found: ' + key)\n\n    verboseprint(\"delete_model result:\", dump_json(result))\n    return result", "code_tokens": ["def", "delete_model", "(", "self", ",", "key", ",", "ignoreMissingKey", "=", "True", ",", "timeoutSecs", "=", "60", ",", "*", "*", "kwargs", ")", ":", "assert", "key", "is", "not", "None", ",", "'\"key\" parameter is null'", "result", "=", "self", ".", "do_json_request", "(", "'/3/Models.json/'", "+", "key", ",", "cmd", "=", "'delete'", ",", "timeout", "=", "timeoutSecs", ")", "# TODO: look for what?", "if", "not", "ignoreMissingKey", "and", "'f00b4r'", "in", "result", ":", "raise", "ValueError", "(", "'Model key not found: '", "+", "key", ")", "verboseprint", "(", "\"delete_model result:\"", ",", "dump_json", "(", "result", ")", ")", "return", "result"], "docstring": "Delete a model on the h2o cluster, given its key.", "docstring_tokens": ["Delete", "a", "model", "on", "the", "h2o", "cluster", "given", "its", "key", "."], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/py2/h2o_ray.py#L628-L641", "partition": "test", "index": 1333, "time": "2014-11-09 00:05:08"}
{"repo": "h2oai/h2o-3", "path": "h2o-py/h2o/backend/connection.py", "func_name": "H2OConnection._print", "original_string": "def _print(self, msg, flush=False, end=\"\\n\"):\n        \"\"\"Helper function to print connection status messages when in verbose mode.\"\"\"\n        if self._verbose:\n            print2(msg, end=end, flush=flush)", "language": "python", "code": "def _print(self, msg, flush=False, end=\"\\n\"):\n        \"\"\"Helper function to print connection status messages when in verbose mode.\"\"\"\n        if self._verbose:\n            print2(msg, end=end, flush=flush)", "code_tokens": ["def", "_print", "(", "self", ",", "msg", ",", "flush", "=", "False", ",", "end", "=", "\"\\n\"", ")", ":", "if", "self", ".", "_verbose", ":", "print2", "(", "msg", ",", "end", "=", "end", ",", "flush", "=", "flush", ")"], "docstring": "Helper function to print connection status messages when in verbose mode.", "docstring_tokens": ["Helper", "function", "to", "print", "connection", "status", "messages", "when", "in", "verbose", "mode", "."], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/backend/connection.py#L758-L761", "partition": "test", "index": 1507, "time": "2016-07-27 12:58:54"}
{"repo": "h2oai/h2o-3", "path": "h2o-py/h2o/automl/autoh2o.py", "func_name": "H2OAutoML.download_mojo", "original_string": "def download_mojo(self, path=\".\", get_genmodel_jar=False, genmodel_name=\"\"):\n        \"\"\"\n        Download the leader model in AutoML in MOJO format.\n\n        :param path: the path where MOJO file should be saved.\n        :param get_genmodel_jar: if True, then also download h2o-genmodel.jar and store it in folder ``path``.\n        :param genmodel_name Custom name of genmodel jar\n        :returns: name of the MOJO file written.\n        \"\"\"\n\n        return ModelBase.download_mojo(self.leader, path, get_genmodel_jar, genmodel_name)", "language": "python", "code": "def download_mojo(self, path=\".\", get_genmodel_jar=False, genmodel_name=\"\"):\n        \"\"\"\n        Download the leader model in AutoML in MOJO format.\n\n        :param path: the path where MOJO file should be saved.\n        :param get_genmodel_jar: if True, then also download h2o-genmodel.jar and store it in folder ``path``.\n        :param genmodel_name Custom name of genmodel jar\n        :returns: name of the MOJO file written.\n        \"\"\"\n\n        return ModelBase.download_mojo(self.leader, path, get_genmodel_jar, genmodel_name)", "code_tokens": ["def", "download_mojo", "(", "self", ",", "path", "=", "\".\"", ",", "get_genmodel_jar", "=", "False", ",", "genmodel_name", "=", "\"\"", ")", ":", "return", "ModelBase", ".", "download_mojo", "(", "self", ".", "leader", ",", "path", ",", "get_genmodel_jar", ",", "genmodel_name", ")"], "docstring": "Download the leader model in AutoML in MOJO format.\n\n        :param path: the path where MOJO file should be saved.\n        :param get_genmodel_jar: if True, then also download h2o-genmodel.jar and store it in folder ``path``.\n        :param genmodel_name Custom name of genmodel jar\n        :returns: name of the MOJO file written.", "docstring_tokens": ["Download", "the", "leader", "model", "in", "AutoML", "in", "MOJO", "format", "."], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/automl/autoh2o.py#L457-L467", "partition": "test", "index": 1510, "time": "2018-04-11 17:35:20"}
{"repo": "h2oai/h2o-3", "path": "h2o-py/h2o/frame.py", "func_name": "H2OFrame.refresh", "original_string": "def refresh(self):\n        \"\"\"Reload frame information from the backend H2O server.\"\"\"\n        self._ex._cache.flush()\n        self._frame(fill_cache=True)", "language": "python", "code": "def refresh(self):\n        \"\"\"Reload frame information from the backend H2O server.\"\"\"\n        self._ex._cache.flush()\n        self._frame(fill_cache=True)", "code_tokens": ["def", "refresh", "(", "self", ")", ":", "self", ".", "_ex", ".", "_cache", ".", "flush", "(", ")", "self", ".", "_frame", "(", "fill_cache", "=", "True", ")"], "docstring": "Reload frame information from the backend H2O server.", "docstring_tokens": ["Reload", "frame", "information", "from", "the", "backend", "H2O", "server", "."], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/frame.py#L216-L219", "partition": "test", "index": 1389, "time": "2016-09-23 15:59:46"}
{"repo": "h2oai/h2o-3", "path": "h2o-py/h2o/model/model_base.py", "func_name": "ModelBase.download_mojo", "original_string": "def download_mojo(self, path=\".\", get_genmodel_jar=False, genmodel_name=\"\"):\n        \"\"\"\n        Download the model in MOJO format.\n\n        :param path: the path where MOJO file should be saved.\n        :param get_genmodel_jar: if True, then also download h2o-genmodel.jar and store it in folder ``path``.\n        :param genmodel_name Custom name of genmodel jar\n        :returns: name of the MOJO file written.\n        \"\"\"\n        assert_is_type(path, str)\n        assert_is_type(get_genmodel_jar, bool)\n\n        if not self.have_mojo:\n            raise H2OValueError(\"Export to MOJO not supported\")\n\n        if get_genmodel_jar:\n            if genmodel_name == \"\":\n                h2o.api(\"GET /3/h2o-genmodel.jar\", save_to=os.path.join(path, \"h2o-genmodel.jar\"))\n            else:\n                h2o.api(\"GET /3/h2o-genmodel.jar\", save_to=os.path.join(path, genmodel_name))\n        return h2o.api(\"GET /3/Models/%s/mojo\" % self.model_id, save_to=path)", "language": "python", "code": "def download_mojo(self, path=\".\", get_genmodel_jar=False, genmodel_name=\"\"):\n        \"\"\"\n        Download the model in MOJO format.\n\n        :param path: the path where MOJO file should be saved.\n        :param get_genmodel_jar: if True, then also download h2o-genmodel.jar and store it in folder ``path``.\n        :param genmodel_name Custom name of genmodel jar\n        :returns: name of the MOJO file written.\n        \"\"\"\n        assert_is_type(path, str)\n        assert_is_type(get_genmodel_jar, bool)\n\n        if not self.have_mojo:\n            raise H2OValueError(\"Export to MOJO not supported\")\n\n        if get_genmodel_jar:\n            if genmodel_name == \"\":\n                h2o.api(\"GET /3/h2o-genmodel.jar\", save_to=os.path.join(path, \"h2o-genmodel.jar\"))\n            else:\n                h2o.api(\"GET /3/h2o-genmodel.jar\", save_to=os.path.join(path, genmodel_name))\n        return h2o.api(\"GET /3/Models/%s/mojo\" % self.model_id, save_to=path)", "code_tokens": ["def", "download_mojo", "(", "self", ",", "path", "=", "\".\"", ",", "get_genmodel_jar", "=", "False", ",", "genmodel_name", "=", "\"\"", ")", ":", "assert_is_type", "(", "path", ",", "str", ")", "assert_is_type", "(", "get_genmodel_jar", ",", "bool", ")", "if", "not", "self", ".", "have_mojo", ":", "raise", "H2OValueError", "(", "\"Export to MOJO not supported\"", ")", "if", "get_genmodel_jar", ":", "if", "genmodel_name", "==", "\"\"", ":", "h2o", ".", "api", "(", "\"GET /3/h2o-genmodel.jar\"", ",", "save_to", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"h2o-genmodel.jar\"", ")", ")", "else", ":", "h2o", ".", "api", "(", "\"GET /3/h2o-genmodel.jar\"", ",", "save_to", "=", "os", ".", "path", ".", "join", "(", "path", ",", "genmodel_name", ")", ")", "return", "h2o", ".", "api", "(", "\"GET /3/Models/%s/mojo\"", "%", "self", ".", "model_id", ",", "save_to", "=", "path", ")"], "docstring": "Download the model in MOJO format.", "docstring_tokens": ["Download", "the", "model", "in", "MOJO", "format", "."], "sha": "dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8", "url": "https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/model/model_base.py#L801-L821", "partition": "test", "index": 1542, "time": "2016-09-16 13:38:10"}
